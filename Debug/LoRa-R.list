
LoRa-R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08005190  08005190  00006190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800572c  0800572c  0000721c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800572c  0800572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005734  08005734  0000721c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005734  08005734  00006734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005738  08005738  00006738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800573c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000021c  08005958  0000721c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08005958  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000721c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044d2  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ea  00000000  00000000  0000b71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  0000cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002cb  00000000  00000000  0000d018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a63  00000000  00000000  0000d2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b41  00000000  00000000  00023d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084934  00000000  00000000  0002b887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b01bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d68  00000000  00000000  000b0200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000b1f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005178 	.word	0x08005178

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08005178 	.word	0x08005178

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <button_init>:
#include "button.h"

volatile uint8_t system_powered_on = 0;
volatile uint8_t buzzer_should_off = 0;

void button_init(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    // PC13 - ON/OFF
    SYSCFG->EXTICR[3] &= ~(0xF << 4);  // EXTI13 ← PC13
 8000bf8:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <button_init+0xac>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	4a28      	ldr	r2, [pc, #160]	@ (8000ca0 <button_init+0xac>)
 8000bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c02:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |=  (0x2 << 4);
 8000c04:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <button_init+0xac>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a25      	ldr	r2, [pc, #148]	@ (8000ca0 <button_init+0xac>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6153      	str	r3, [r2, #20]
    EXTI->IMR  |= (1 << BTN_ONOFF_PIN);
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <button_init+0xb0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a23      	ldr	r2, [pc, #140]	@ (8000ca4 <button_init+0xb0>)
 8000c16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c1a:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << BTN_ONOFF_PIN);
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <button_init+0xb0>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <button_init+0xb0>)
 8000c22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c26:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c28:	2028      	movs	r0, #40	@ 0x28
 8000c2a:	f7ff ffc5 	bl	8000bb8 <__NVIC_EnableIRQ>

    // PB3 - RESET

    SYSCFG->EXTICR[0] &= ~(0xF << (4 * BTN_RESET_PIN));
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <button_init+0xac>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <button_init+0xac>)
 8000c34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000c38:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  (0x1 << (4 * BTN_RESET_PIN));
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <button_init+0xac>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <button_init+0xac>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c44:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= (1 << BTN_RESET_PIN);
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <button_init+0xb0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <button_init+0xb0>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << BTN_RESET_PIN);
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <button_init+0xb0>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <button_init+0xb0>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI3_IRQn);
 8000c5e:	2009      	movs	r0, #9
 8000c60:	f7ff ffaa 	bl	8000bb8 <__NVIC_EnableIRQ>

    // PB5 - BUZZ OFF

    SYSCFG->EXTICR[1] &= ~(0xF << (4 * (BTN_BUZZ_PIN - 4)));
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <button_init+0xac>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <button_init+0xac>)
 8000c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c6e:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |=  (0x1 << (4 * (BTN_BUZZ_PIN - 4)));
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <button_init+0xac>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <button_init+0xac>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	60d3      	str	r3, [r2, #12]
    EXTI->IMR  |= (1 << BTN_BUZZ_PIN);
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <button_init+0xb0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <button_init+0xb0>)
 8000c82:	f043 0320 	orr.w	r3, r3, #32
 8000c86:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << BTN_BUZZ_PIN);
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <button_init+0xb0>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <button_init+0xb0>)
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c94:	2017      	movs	r0, #23
 8000c96:	f7ff ff8f 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	40013c00 	.word	0x40013c00

08000ca8 <buzzer_on>:
#define BUZZER_PIN 10  // PB10

static uint32_t buzzer_start = 0;
static uint32_t buzzer_running = 0;

void buzzer_on(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	if (!buzzer_running){
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <buzzer_on+0x2c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10d      	bne.n	8000cd0 <buzzer_on+0x28>
		GPIOB->ODR |= (1 << BUZZER_PIN);
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <buzzer_on+0x30>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <buzzer_on+0x30>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cbe:	6153      	str	r3, [r2, #20]
		buzzer_start = millis();
 8000cc0:	f001 fb2e 	bl	8002320 <millis>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <buzzer_on+0x34>)
 8000cc8:	6013      	str	r3, [r2, #0]
		buzzer_running = 1;
 8000cca:	4b02      	ldr	r3, [pc, #8]	@ (8000cd4 <buzzer_on+0x2c>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000240 	.word	0x20000240
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	2000023c 	.word	0x2000023c

08000ce0 <buzzer_off>:

void buzzer_off(void) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << BUZZER_PIN);
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <buzzer_off+0x20>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <buzzer_off+0x20>)
 8000cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cee:	6153      	str	r3, [r2, #20]
    buzzer_running = 0;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <buzzer_off+0x24>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40020400 	.word	0x40020400
 8000d04:	20000240 	.word	0x20000240

08000d08 <__NVIC_EnableIRQ>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <gpio_init_all>:
#include "stm32f4xx.h"

void gpio_init_all(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    // Enable GPIO clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 8000d48:	4b8a      	ldr	r3, [pc, #552]	@ (8000f74 <gpio_init_all+0x230>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	4a89      	ldr	r2, [pc, #548]	@ (8000f74 <gpio_init_all+0x230>)
 8000d4e:	f043 0307 	orr.w	r3, r3, #7
 8000d52:	6313      	str	r3, [r2, #48]	@ 0x30
                    RCC_AHB1ENR_GPIOCEN;

    // ------------------------
    // BUTTONS: PC13, PB3, PB5 (Input + Pull-up)
    // ------------------------
    GPIOC->MODER &= ~(0x3 << (13 * 2));  // PC13
 8000d54:	4b88      	ldr	r3, [pc, #544]	@ (8000f78 <gpio_init_all+0x234>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a87      	ldr	r2, [pc, #540]	@ (8000f78 <gpio_init_all+0x234>)
 8000d5a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d5e:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(0x3 << (13 * 2));
 8000d60:	4b85      	ldr	r3, [pc, #532]	@ (8000f78 <gpio_init_all+0x234>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4a84      	ldr	r2, [pc, #528]	@ (8000f78 <gpio_init_all+0x234>)
 8000d66:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d6a:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |=  (0x1 << (13 * 2));
 8000d6c:	4b82      	ldr	r3, [pc, #520]	@ (8000f78 <gpio_init_all+0x234>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	4a81      	ldr	r2, [pc, #516]	@ (8000f78 <gpio_init_all+0x234>)
 8000d72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d76:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(0x3 << (3 * 2));   // PB3
 8000d78:	4b80      	ldr	r3, [pc, #512]	@ (8000f7c <gpio_init_all+0x238>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f7c <gpio_init_all+0x238>)
 8000d7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000d82:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(0x3 << (3 * 2));
 8000d84:	4b7d      	ldr	r3, [pc, #500]	@ (8000f7c <gpio_init_all+0x238>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a7c      	ldr	r2, [pc, #496]	@ (8000f7c <gpio_init_all+0x238>)
 8000d8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000d8e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (0x1 << (3 * 2));
 8000d90:	4b7a      	ldr	r3, [pc, #488]	@ (8000f7c <gpio_init_all+0x238>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a79      	ldr	r2, [pc, #484]	@ (8000f7c <gpio_init_all+0x238>)
 8000d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d9a:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(0x3 << (5 * 2));   // PB5
 8000d9c:	4b77      	ldr	r3, [pc, #476]	@ (8000f7c <gpio_init_all+0x238>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a76      	ldr	r2, [pc, #472]	@ (8000f7c <gpio_init_all+0x238>)
 8000da2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000da6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(0x3 << (5 * 2));
 8000da8:	4b74      	ldr	r3, [pc, #464]	@ (8000f7c <gpio_init_all+0x238>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	4a73      	ldr	r2, [pc, #460]	@ (8000f7c <gpio_init_all+0x238>)
 8000dae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000db2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (0x1 << (5 * 2));
 8000db4:	4b71      	ldr	r3, [pc, #452]	@ (8000f7c <gpio_init_all+0x238>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	4a70      	ldr	r2, [pc, #448]	@ (8000f7c <gpio_init_all+0x238>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dbe:	60d3      	str	r3, [r2, #12]

    // ------------------------
    // LEDS: PB0, PB1, PC2, PC3 (Output)
    // ------------------------
    GPIOB->MODER &= ~(0x3 << (0 * 2));
 8000dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8000f7c <gpio_init_all+0x238>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a6d      	ldr	r2, [pc, #436]	@ (8000f7c <gpio_init_all+0x238>)
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0x1 << (0 * 2));  // Output
 8000dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8000f7c <gpio_init_all+0x238>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a6a      	ldr	r2, [pc, #424]	@ (8000f7c <gpio_init_all+0x238>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]

    GPIOB->MODER &= ~(0x3 << (1 * 2));
 8000dd8:	4b68      	ldr	r3, [pc, #416]	@ (8000f7c <gpio_init_all+0x238>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a67      	ldr	r2, [pc, #412]	@ (8000f7c <gpio_init_all+0x238>)
 8000dde:	f023 030c 	bic.w	r3, r3, #12
 8000de2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0x1 << (1 * 2));  // Output
 8000de4:	4b65      	ldr	r3, [pc, #404]	@ (8000f7c <gpio_init_all+0x238>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a64      	ldr	r2, [pc, #400]	@ (8000f7c <gpio_init_all+0x238>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(0x3 << (2 * 2));
 8000df0:	4b61      	ldr	r3, [pc, #388]	@ (8000f78 <gpio_init_all+0x234>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a60      	ldr	r2, [pc, #384]	@ (8000f78 <gpio_init_all+0x234>)
 8000df6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dfa:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (0x1 << (2 * 2));  // Output
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8000f78 <gpio_init_all+0x234>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a5d      	ldr	r2, [pc, #372]	@ (8000f78 <gpio_init_all+0x234>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(0x3 << (3 * 2));
 8000e08:	4b5b      	ldr	r3, [pc, #364]	@ (8000f78 <gpio_init_all+0x234>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8000f78 <gpio_init_all+0x234>)
 8000e0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000e12:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (0x1 << (3 * 2));  // Output
 8000e14:	4b58      	ldr	r3, [pc, #352]	@ (8000f78 <gpio_init_all+0x234>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a57      	ldr	r2, [pc, #348]	@ (8000f78 <gpio_init_all+0x234>)
 8000e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1e:	6013      	str	r3, [r2, #0]

    // ------------------------
    // BUZZER: PB10 (Output)
    // ------------------------
    GPIOB->MODER &= ~(0x3 << (10 * 2));
 8000e20:	4b56      	ldr	r3, [pc, #344]	@ (8000f7c <gpio_init_all+0x238>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a55      	ldr	r2, [pc, #340]	@ (8000f7c <gpio_init_all+0x238>)
 8000e26:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000e2a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0x1 << (10 * 2));    // Output mode
 8000e2c:	4b53      	ldr	r3, [pc, #332]	@ (8000f7c <gpio_init_all+0x238>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a52      	ldr	r2, [pc, #328]	@ (8000f7c <gpio_init_all+0x238>)
 8000e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e36:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 10);           // Push-pull
 8000e38:	4b50      	ldr	r3, [pc, #320]	@ (8000f7c <gpio_init_all+0x238>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f7c <gpio_init_all+0x238>)
 8000e3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e42:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0x3 << (10 * 2));   // High speed
 8000e44:	4b4d      	ldr	r3, [pc, #308]	@ (8000f7c <gpio_init_all+0x238>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4a4c      	ldr	r2, [pc, #304]	@ (8000f7c <gpio_init_all+0x238>)
 8000e4a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000e4e:	6093      	str	r3, [r2, #8]

    // ------------------------
    // LoRa SPI: PA5 (SCK), PA6 (MISO), PA7 (MOSI) – AF5
    // ------------------------
    GPIOA->MODER &= ~((0x3 << (5 * 2)) | (0x3 << (6 * 2)) | (0x3 << (7 * 2)));
 8000e50:	4b4b      	ldr	r3, [pc, #300]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e56:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000e5a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((0x2 << (5 * 2)) | (0x2 << (6 * 2)) | (0x2 << (7 * 2))); // AF mode
 8000e5c:	4b48      	ldr	r3, [pc, #288]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a47      	ldr	r2, [pc, #284]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e62:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000e66:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (5 * 4)) | (0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000e68:	4b45      	ldr	r3, [pc, #276]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a44      	ldr	r2, [pc, #272]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e72:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((0x5 << (5 * 4)) | (0x5 << (6 * 4)) | (0x5 << (7 * 4))); // AF5 = SPI1
 8000e74:	4b42      	ldr	r3, [pc, #264]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a41      	ldr	r2, [pc, #260]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e7a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000e7e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000e82:	6213      	str	r3, [r2, #32]

    // ------------------------
    // LoRa NSS: PA4 (Output)
    // ------------------------
    GPIOA->MODER &= ~(0x3 << (4 * 2));
 8000e84:	4b3e      	ldr	r3, [pc, #248]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3d      	ldr	r2, [pc, #244]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e8e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0x1 << (4 * 2)); // Output
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a3a      	ldr	r2, [pc, #232]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 4);
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ea2:	f023 0310 	bic.w	r3, r3, #16
 8000ea6:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (0x3 << (4 * 2));
 8000ea8:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000eb2:	6093      	str	r3, [r2, #8]

    // ------------------------
    // LoRa DIO0: PA0 (Input + Interrupt)
    // ------------------------
    GPIOA->MODER &= ~(0x3 << (0 * 2));
 8000eb4:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a31      	ldr	r2, [pc, #196]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(0x3 << (0 * 2));
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0x2 << (0 * 2)); // Pull-down
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	60d3      	str	r3, [r2, #12]

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <gpio_init_all+0x230>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	4a25      	ldr	r2, [pc, #148]	@ (8000f74 <gpio_init_all+0x230>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee2:	6453      	str	r3, [r2, #68]	@ 0x44
    SYSCFG->EXTICR[0] &= ~(0xF << 0); // PA0 = EXTI0
 8000ee4:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <gpio_init_all+0x240>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a26      	ldr	r2, [pc, #152]	@ (8000f84 <gpio_init_all+0x240>)
 8000eea:	f023 030f 	bic.w	r3, r3, #15
 8000eee:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= (1 << 0);  // Unmask line 0
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <gpio_init_all+0x244>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a24      	ldr	r2, [pc, #144]	@ (8000f88 <gpio_init_all+0x244>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << 0);  // Rising edge
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <gpio_init_all+0x244>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <gpio_init_all+0x244>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f7ff fefd 	bl	8000d08 <__NVIC_EnableIRQ>

    // ------------------------
    // LCD I2C (I2C1): PB8 (SCL), PB9 (SDA) – AF4
    // ------------------------
    GPIOB->MODER &= ~((0x3 << (8 * 2)) | (0x3 << (9 * 2)));    // Clear mode
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <gpio_init_all+0x238>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <gpio_init_all+0x238>)
 8000f14:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000f18:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((0x2 << (8 * 2)) | (0x2 << (9 * 2)));    // AF mode
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <gpio_init_all+0x238>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a17      	ldr	r2, [pc, #92]	@ (8000f7c <gpio_init_all+0x238>)
 8000f20:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000f24:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4))); // Clear AFR
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <gpio_init_all+0x238>)
 8000f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2a:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <gpio_init_all+0x238>)
 8000f2c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f30:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((0x4 << ((8 - 8) * 4)) | (0x4 << ((9 - 8) * 4))); // AF4 = I2C1
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <gpio_init_all+0x238>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <gpio_init_all+0x238>)
 8000f38:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000f3c:	6253      	str	r3, [r2, #36]	@ 0x24

    GPIOB->OTYPER |=  (1 << 8) | (1 << 9);     // Open-drain
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <gpio_init_all+0x238>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <gpio_init_all+0x238>)
 8000f44:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000f48:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0x3 << (8 * 2)) | (0x3 << (9 * 2)); // High speed
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <gpio_init_all+0x238>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <gpio_init_all+0x238>)
 8000f50:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000f54:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR   |= (0x1 << (8 * 2)) | (0x1 << (9 * 2)); // Pull-up
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <gpio_init_all+0x238>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <gpio_init_all+0x238>)
 8000f5c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000f60:	60d3      	str	r3, [r2, #12]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // Enable I2C1
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <gpio_init_all+0x230>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a03      	ldr	r2, [pc, #12]	@ (8000f74 <gpio_init_all+0x230>)
 8000f68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40013c00 	.word	0x40013c00

08000f8c <i2c2_init>:
#include "stm32f4xx.h"
#include "i2c.h"

// I2C1: SCL = PB8, SDA = PB9
void i2c2_init(void) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;    // Enable GPIOB clock
 8000f90:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <i2c2_init+0xec>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a38      	ldr	r2, [pc, #224]	@ (8001078 <i2c2_init+0xec>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;     // Enable I2C1 clock
 8000f9c:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <i2c2_init+0xec>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	4a35      	ldr	r2, [pc, #212]	@ (8001078 <i2c2_init+0xec>)
 8000fa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fa6:	6413      	str	r3, [r2, #64]	@ 0x40

    // PB8 - SCL
    GPIOB->MODER &= ~(3 << (8 * 2));
 8000fa8:	4b34      	ldr	r3, [pc, #208]	@ (800107c <i2c2_init+0xf0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a33      	ldr	r2, [pc, #204]	@ (800107c <i2c2_init+0xf0>)
 8000fae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000fb2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (8 * 2));         // Alternate function mode
 8000fb4:	4b31      	ldr	r3, [pc, #196]	@ (800107c <i2c2_init+0xf0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a30      	ldr	r2, [pc, #192]	@ (800107c <i2c2_init+0xf0>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbe:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((8 - 8) * 4));
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <i2c2_init+0xf0>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800107c <i2c2_init+0xf0>)
 8000fc6:	f023 030f 	bic.w	r3, r3, #15
 8000fca:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((8 - 8) * 4));   // AF4 for I2C1
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <i2c2_init+0xf0>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800107c <i2c2_init+0xf0>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 8);               // Open-drain
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <i2c2_init+0xf0>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a27      	ldr	r2, [pc, #156]	@ (800107c <i2c2_init+0xf0>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (8 * 2));
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <i2c2_init+0xf0>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a24      	ldr	r2, [pc, #144]	@ (800107c <i2c2_init+0xf0>)
 8000fea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000fee:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (8 * 2));          // Pull-up
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <i2c2_init+0xf0>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <i2c2_init+0xf0>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffa:	60d3      	str	r3, [r2, #12]

    // PB9 - SDA
    GPIOB->MODER &= ~(3 << (9 * 2));
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <i2c2_init+0xf0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <i2c2_init+0xf0>)
 8001002:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001006:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (9 * 2));         // Alternate function mode
 8001008:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <i2c2_init+0xf0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1b      	ldr	r2, [pc, #108]	@ (800107c <i2c2_init+0xf0>)
 800100e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001012:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <i2c2_init+0xf0>)
 8001016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001018:	4a18      	ldr	r2, [pc, #96]	@ (800107c <i2c2_init+0xf0>)
 800101a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800101e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));   // AF4 for I2C1
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <i2c2_init+0xf0>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	4a15      	ldr	r2, [pc, #84]	@ (800107c <i2c2_init+0xf0>)
 8001026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800102a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 9);               // Open-drain
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <i2c2_init+0xf0>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a12      	ldr	r2, [pc, #72]	@ (800107c <i2c2_init+0xf0>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001036:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (9 * 2));
 8001038:	4b10      	ldr	r3, [pc, #64]	@ (800107c <i2c2_init+0xf0>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <i2c2_init+0xf0>)
 800103e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001042:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (9 * 2));          // Pull-up
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <i2c2_init+0xf0>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <i2c2_init+0xf0>)
 800104a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800104e:	60d3      	str	r3, [r2, #12]

    // I2C1 configuration (100kHz @ APB1 = 16 MHz)
    I2C1->CR2 = 16;              // APB1 frequency in MHz
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <i2c2_init+0xf4>)
 8001052:	2210      	movs	r2, #16
 8001054:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;              // Clock control value
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <i2c2_init+0xf4>)
 8001058:	2250      	movs	r2, #80	@ 0x50
 800105a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;            // Maximum rise time
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <i2c2_init+0xf4>)
 800105e:	2211      	movs	r2, #17
 8001060:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;     // Enable I2C1
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <i2c2_init+0xf4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <i2c2_init+0xf4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40023800 	.word	0x40023800
 800107c:	40020400 	.word	0x40020400
 8001080:	40005400 	.word	0x40005400

08001084 <lcd_i2c_start>:
#include "stm32f4xx.h"
#include "lcd.h"

void lcd_i2c_start(void) {
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <lcd_i2c_start+0x44>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	@ (80010c8 <lcd_i2c_start+0x44>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001092:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8001094:	bf00      	nop
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <lcd_i2c_start+0x44>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f9      	beq.n	8001096 <lcd_i2c_start+0x12>
    I2C1->DR = (LCD_ADDR << 1);               // Gửi địa chỉ LCD (ghi)
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010a4:	224e      	movs	r2, #78	@ 0x4e
 80010a6:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80010a8:	bf00      	nop
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f9      	beq.n	80010aa <lcd_i2c_start+0x26>
    (void)I2C1->SR1; (void)I2C1->SR2;
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010bc:	699b      	ldr	r3, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40005400 	.word	0x40005400

080010cc <lcd_i2c_stop>:

void lcd_i2c_stop(void) {
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <lcd_i2c_stop+0x1c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <lcd_i2c_stop+0x1c>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40005400 	.word	0x40005400

080010ec <lcd_i2c_write>:

void lcd_i2c_write(uint8_t data) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80010f6:	bf00      	nop
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <lcd_i2c_write+0x3c>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f9      	beq.n	80010f8 <lcd_i2c_write+0xc>
    I2C1->DR = data;
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <lcd_i2c_write+0x3c>)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800110a:	bf00      	nop
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <lcd_i2c_write+0x3c>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f9      	beq.n	800110c <lcd_i2c_write+0x20>
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40005400 	.word	0x40005400

0800112c <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble, uint8_t control) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0) | control | LCD_BACKLIGHT;
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	f023 030f 	bic.w	r3, r3, #15
 8001144:	b25a      	sxtb	r2, r3
 8001146:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800114a:	4313      	orrs	r3, r2
 800114c:	b25b      	sxtb	r3, r3
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	b25b      	sxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
    lcd_i2c_start();
 8001156:	f7ff ff95 	bl	8001084 <lcd_i2c_start>
    lcd_i2c_write(data);
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffc5 	bl	80010ec <lcd_i2c_write>
    lcd_i2c_write(data | LCD_ENABLE);
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffbe 	bl	80010ec <lcd_i2c_write>
    for (volatile int i = 0; i < 1000; i++);
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	e002      	b.n	800117c <lcd_write_nibble+0x50>
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3301      	adds	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001182:	dbf8      	blt.n	8001176 <lcd_write_nibble+0x4a>
    lcd_i2c_write(data & ~LCD_ENABLE);
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	f023 0304 	bic.w	r3, r3, #4
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ffad 	bl	80010ec <lcd_i2c_write>
    lcd_i2c_stop();
 8001192:	f7ff ff9b 	bl	80010cc <lcd_i2c_stop>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <lcd_write_byte>:

void lcd_write_byte(uint8_t byte, uint8_t control) {
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	460a      	mov	r2, r1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	4613      	mov	r3, r2
 80011ac:	71bb      	strb	r3, [r7, #6]
    lcd_write_nibble(byte & 0xF0, control);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f023 030f 	bic.w	r3, r3, #15
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	79ba      	ldrb	r2, [r7, #6]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffb6 	bl	800112c <lcd_write_nibble>
    lcd_write_nibble((byte << 4) & 0xF0, control);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	79ba      	ldrb	r2, [r7, #6]
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffae 	bl	800112c <lcd_write_nibble>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <lcd_command>:

void lcd_command(uint8_t cmd) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(cmd, 0x00);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffd9 	bl	800119e <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e002      	b.n	80011f8 <lcd_command+0x20>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011fe:	4293      	cmp	r3, r2
 8001200:	ddf7      	ble.n	80011f2 <lcd_command+0x1a>
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <lcd_data>:

void lcd_data(uint8_t data) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(data, LCD_REGISTER_SELECT);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2101      	movs	r1, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffbf 	bl	800119e <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e002      	b.n	800122c <lcd_data+0x20>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001232:	4293      	cmp	r3, r2
 8001234:	ddf7      	ble.n	8001226 <lcd_data+0x1a>
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <lcd_init>:

void lcd_init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 100000; i++);
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e002      	b.n	8001252 <lcd_init+0x12>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <lcd_init+0x60>)
 8001256:	4293      	cmp	r3, r2
 8001258:	ddf8      	ble.n	800124c <lcd_init+0xc>
    lcd_command(0x33);
 800125a:	2033      	movs	r0, #51	@ 0x33
 800125c:	f7ff ffbc 	bl	80011d8 <lcd_command>
    lcd_command(0x32);
 8001260:	2032      	movs	r0, #50	@ 0x32
 8001262:	f7ff ffb9 	bl	80011d8 <lcd_command>
    lcd_command(0x28);
 8001266:	2028      	movs	r0, #40	@ 0x28
 8001268:	f7ff ffb6 	bl	80011d8 <lcd_command>
    lcd_command(0x0C);
 800126c:	200c      	movs	r0, #12
 800126e:	f7ff ffb3 	bl	80011d8 <lcd_command>
    lcd_command(0x06);
 8001272:	2006      	movs	r0, #6
 8001274:	f7ff ffb0 	bl	80011d8 <lcd_command>
    lcd_command(0x01);
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff ffad 	bl	80011d8 <lcd_command>
    for (volatile int i = 0; i < 50000; i++);
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	e002      	b.n	800128a <lcd_init+0x4a>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001290:	4293      	cmp	r3, r2
 8001292:	ddf7      	ble.n	8001284 <lcd_init+0x44>
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	0001869f 	.word	0x0001869f

080012a4 <lcd_print>:

void lcd_print(char *str) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    while (*str) {
 80012ac:	e006      	b.n	80012bc <lcd_print+0x18>
        lcd_data((uint8_t)(*str++));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ffa8 	bl	800120c <lcd_data>
    while (*str) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f4      	bne.n	80012ae <lcd_print+0xa>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <led_on>:
    {LED_IGNORE_PORT,LED_IGNORE_PIN,0, 0, 0}
};

#define NUM_LEDS (sizeof(leds) / sizeof(leds[0]))

void led_on(GPIO_TypeDef* port, uint8_t pin) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_LEDS; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e043      	b.n	800136a <led_on+0x9a>
		if (leds[i].port == port && leds[i].pin == pin){
 80012e2:	4926      	ldr	r1, [pc, #152]	@ (800137c <led_on+0xac>)
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d135      	bne.n	8001364 <led_on+0x94>
 80012f8:	4920      	ldr	r1, [pc, #128]	@ (800137c <led_on+0xac>)
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	78fa      	ldrb	r2, [r7, #3]
 800130c:	429a      	cmp	r2, r3
 800130e:	d129      	bne.n	8001364 <led_on+0x94>
			if (!leds[i].active){
 8001310:	491a      	ldr	r1, [pc, #104]	@ (800137c <led_on+0xac>)
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	3310      	adds	r3, #16
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d112      	bne.n	800134c <led_on+0x7c>
				leds[i].active = 1;
 8001326:	4915      	ldr	r1, [pc, #84]	@ (800137c <led_on+0xac>)
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	3310      	adds	r3, #16
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
				port->ODR |= (1 << pin);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	615a      	str	r2, [r3, #20]
			}
			leds[i].start_time = millis();
 800134c:	f000 ffe8 	bl	8002320 <millis>
 8001350:	4601      	mov	r1, r0
 8001352:	480a      	ldr	r0, [pc, #40]	@ (800137c <led_on+0xac>)
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4403      	add	r3, r0
 8001360:	3308      	adds	r3, #8
 8001362:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_LEDS; i++){
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d9b8      	bls.n	80012e2 <led_on+0x12>
		}
	}
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000

08001380 <led_off>:

void led_off(GPIO_TypeDef* port, uint8_t pin) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_LEDS; i++){
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e02d      	b.n	80013ee <led_off+0x6e>
		if (leds[i].port == port && leds[i].pin == pin){
 8001392:	491c      	ldr	r1, [pc, #112]	@ (8001404 <led_off+0x84>)
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d11f      	bne.n	80013e8 <led_off+0x68>
 80013a8:	4916      	ldr	r1, [pc, #88]	@ (8001404 <led_off+0x84>)
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3304      	adds	r3, #4
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d113      	bne.n	80013e8 <led_off+0x68>
			port->ODR &= ~(1 << pin);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	78fa      	ldrb	r2, [r7, #3]
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f202 	lsl.w	r2, r1, r2
 80013cc:	43d2      	mvns	r2, r2
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	615a      	str	r2, [r3, #20]
			leds[i].active = 0;
 80013d4:	490b      	ldr	r1, [pc, #44]	@ (8001404 <led_off+0x84>)
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3310      	adds	r3, #16
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_LEDS; i++){
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3301      	adds	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d9ce      	bls.n	8001392 <led_off+0x12>
		}
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000

08001408 <led_toggle>:

void led_toggle(GPIO_TypeDef* port, uint8_t pin) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_LEDS; i++){
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e04e      	b.n	80014b8 <led_toggle+0xb0>
		if (leds[i].port == port && leds[i].pin == pin){
 800141a:	492b      	ldr	r1, [pc, #172]	@ (80014c8 <led_toggle+0xc0>)
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d140      	bne.n	80014b2 <led_toggle+0xaa>
 8001430:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <led_toggle+0xc0>)
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	3304      	adds	r3, #4
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	429a      	cmp	r2, r3
 8001446:	d134      	bne.n	80014b2 <led_toggle+0xaa>
			port->ODR ^= (1 << pin);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	405a      	eors	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	615a      	str	r2, [r3, #20]
			if (leds[i].active == 0){
 800145a:	491b      	ldr	r1, [pc, #108]	@ (80014c8 <led_toggle+0xc0>)
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	3310      	adds	r3, #16
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d116      	bne.n	800149e <led_toggle+0x96>
				leds[i].active = 1;
 8001470:	4915      	ldr	r1, [pc, #84]	@ (80014c8 <led_toggle+0xc0>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	3310      	adds	r3, #16
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
				leds[i].start_time = millis();
 8001484:	f000 ff4c 	bl	8002320 <millis>
 8001488:	4601      	mov	r1, r0
 800148a:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <led_toggle+0xc0>)
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	3308      	adds	r3, #8
 800149a:	6019      	str	r1, [r3, #0]
 800149c:	e009      	b.n	80014b2 <led_toggle+0xaa>
			}
			else {
				leds[i].active = 0;
 800149e:	490a      	ldr	r1, [pc, #40]	@ (80014c8 <led_toggle+0xc0>)
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3310      	adds	r3, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_LEDS; i++){
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d9ad      	bls.n	800141a <led_toggle+0x12>
			}
		}
	}
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000000 	.word	0x20000000

080014cc <led_check>:
			leds[i].duration = delay_ms;
		}
	}
}

void led_check(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS; i++){
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	e04e      	b.n	8001576 <led_check+0xaa>
		if(leds[i].active && leds[i].duration && millis() - leds[i].start_time >= leds[i].duration){
 80014d8:	492b      	ldr	r1, [pc, #172]	@ (8001588 <led_check+0xbc>)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3310      	adds	r3, #16
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d040      	beq.n	8001570 <led_check+0xa4>
 80014ee:	4926      	ldr	r1, [pc, #152]	@ (8001588 <led_check+0xbc>)
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	330c      	adds	r3, #12
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d035      	beq.n	8001570 <led_check+0xa4>
 8001504:	f000 ff0c 	bl	8002320 <millis>
 8001508:	4601      	mov	r1, r0
 800150a:	481f      	ldr	r0, [pc, #124]	@ (8001588 <led_check+0xbc>)
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4403      	add	r3, r0
 8001518:	3308      	adds	r3, #8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1ac9      	subs	r1, r1, r3
 800151e:	481a      	ldr	r0, [pc, #104]	@ (8001588 <led_check+0xbc>)
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	330c      	adds	r3, #12
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4299      	cmp	r1, r3
 8001532:	d31d      	bcc.n	8001570 <led_check+0xa4>
			leds[i].duration = 0;
 8001534:	4914      	ldr	r1, [pc, #80]	@ (8001588 <led_check+0xbc>)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	330c      	adds	r3, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
			led_off(leds[i].port, leds[i].pin);
 8001548:	490f      	ldr	r1, [pc, #60]	@ (8001588 <led_check+0xbc>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	490b      	ldr	r1, [pc, #44]	@ (8001588 <led_check+0xbc>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3304      	adds	r3, #4
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff ff08 	bl	8001380 <led_off>
	for (int i = 0; i < NUM_LEDS; i++){
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3301      	adds	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d9ad      	bls.n	80014d8 <led_check+0xc>
		}
	}
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <__NVIC_EnableIRQ>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	@ (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <spi1_write>:
#define LORA_RST_LOW()   (GPIOA->BSRR = GPIO_BSRR_BR2)
#define LORA_RST_HIGH()  (GPIOA->BSRR = GPIO_BSRR_BS2)



static void spi1_write(uint8_t data) {
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 80015d2:	bf00      	nop
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <spi1_write+0x3c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f9      	beq.n	80015d4 <spi1_write+0xc>
    *(volatile uint8_t*)&SPI1->DR = data;
 80015e0:	4a09      	ldr	r2, [pc, #36]	@ (8001608 <spi1_write+0x40>)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	7013      	strb	r3, [r2, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 80015e6:	bf00      	nop
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <spi1_write+0x3c>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f9      	beq.n	80015e8 <spi1_write+0x20>
    (void)SPI1->DR;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <spi1_write+0x3c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40013000 	.word	0x40013000
 8001608:	4001300c 	.word	0x4001300c

0800160c <spi1_transfer>:

static uint8_t spi1_transfer(uint8_t data) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 8001616:	bf00      	nop
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <spi1_transfer+0x40>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f9      	beq.n	8001618 <spi1_transfer+0xc>
    *(volatile uint8_t*)&SPI1->DR = data;
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <spi1_transfer+0x44>)
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	7013      	strb	r3, [r2, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 800162a:	bf00      	nop
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <spi1_transfer+0x40>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f9      	beq.n	800162c <spi1_transfer+0x20>
    return (uint8_t)SPI1->DR;
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <spi1_transfer+0x40>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40013000 	.word	0x40013000
 8001650:	4001300c 	.word	0x4001300c

08001654 <lora_write_reg>:

static void lora_write_reg(uint8_t addr, uint8_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
    LORA_NSS_LOW();
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <lora_write_reg+0x3c>)
 8001666:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800166a:	619a      	str	r2, [r3, #24]
    spi1_write(addr | 0x80);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffa7 	bl	80015c8 <spi1_write>
    spi1_write(value);
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ffa3 	bl	80015c8 <spi1_write>
    LORA_NSS_HIGH();
 8001682:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <lora_write_reg+0x3c>)
 8001684:	2210      	movs	r2, #16
 8001686:	619a      	str	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020000 	.word	0x40020000

08001694 <lora_read_reg>:

static uint8_t lora_read_reg(uint8_t addr) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
    LORA_NSS_LOW();
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <lora_read_reg+0x3c>)
 80016a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016a4:	619a      	str	r2, [r3, #24]
    spi1_write(addr & 0x7F);
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff8a 	bl	80015c8 <spi1_write>
    uint8_t val = spi1_transfer(0x00);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ffa9 	bl	800160c <spi1_transfer>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
    LORA_NSS_HIGH();
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <lora_read_reg+0x3c>)
 80016c0:	2210      	movs	r2, #16
 80016c2:	619a      	str	r2, [r3, #24]
    return val;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40020000 	.word	0x40020000

080016d4 <SPI1_Init>:

void SPI1_Init(void) {
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80016d8:	4b20      	ldr	r3, [pc, #128]	@ (800175c <SPI1_Init+0x88>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <SPI1_Init+0x88>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <SPI1_Init+0x88>)
 80016e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e8:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <SPI1_Init+0x88>)
 80016ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016ee:	6453      	str	r3, [r2, #68]	@ 0x44

    // SPI1: PA5=SCK, PA6=MISO, PA7=MOSI
    GPIOA->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <SPI1_Init+0x8c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <SPI1_Init+0x8c>)
 80016f6:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80016fa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <SPI1_Init+0x8c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <SPI1_Init+0x8c>)
 8001702:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8001706:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (5 << (5 * 4)) | (5 << (6 * 4)) | (5 << (7 * 4));
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <SPI1_Init+0x8c>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <SPI1_Init+0x8c>)
 800170e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8001712:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001716:	6213      	str	r3, [r2, #32]

    // NSS (PA4) là output điều khiển thủ công
    GPIOA->MODER &= ~(GPIO_MODER_MODE4);
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <SPI1_Init+0x8c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <SPI1_Init+0x8c>)
 800171e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001722:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (GPIO_MODER_MODE4_0);
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <SPI1_Init+0x8c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <SPI1_Init+0x8c>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172e:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4);
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <SPI1_Init+0x8c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <SPI1_Init+0x8c>)
 8001736:	f023 0310 	bic.w	r3, r3, #16
 800173a:	6053      	str	r3, [r2, #4]

    SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BR_1;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <SPI1_Init+0x90>)
 800173e:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8001742:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_SPE;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <SPI1_Init+0x90>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <SPI1_Init+0x90>)
 800174a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40013000 	.word	0x40013000

08001768 <LORA_GPIO_Init>:

void LORA_GPIO_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    // PA2: RST
    GPIOA->MODER &= ~(GPIO_MODER_MODE2);
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001772:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001776:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (GPIO_MODER_MODE2_0);
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2);
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a18      	ldr	r2, [pc, #96]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6053      	str	r3, [r2, #4]

    // PA0: DIO0 - input + EXTI0
    GPIOA->MODER &= ~(GPIO_MODER_MODE0);
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a15      	ldr	r2, [pc, #84]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <LORA_GPIO_Init+0x84>)
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	60d3      	str	r3, [r2, #12]

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <LORA_GPIO_Init+0x88>)
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <LORA_GPIO_Init+0x88>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b2:	6453      	str	r3, [r2, #68]	@ 0x44
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017ba:	f023 030f 	bic.w	r3, r3, #15
 80017be:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017c2:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= EXTI_IMR_MR0;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= EXTI_RTSR_TR0;
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI0_IRQn);
 80017e0:	2006      	movs	r0, #6
 80017e2:	f7ff fed3 	bl	800158c <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40013c00 	.word	0x40013c00

080017fc <lora_init_rx>:

void lora_init_rx(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
    led_on(LED_POWER_PORT, LED_POWER_PIN);
 8001802:	2100      	movs	r1, #0
 8001804:	4837      	ldr	r0, [pc, #220]	@ (80018e4 <lora_init_rx+0xe8>)
 8001806:	f7ff fd63 	bl	80012d0 <led_on>
    LORA_RST_LOW();
 800180a:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <lora_init_rx+0xec>)
 800180c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001810:	619a      	str	r2, [r3, #24]
    timer_delay_ms(10);
 8001812:	200a      	movs	r0, #10
 8001814:	f000 fd90 	bl	8002338 <timer_delay_ms>
    LORA_RST_HIGH();
 8001818:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <lora_init_rx+0xec>)
 800181a:	2204      	movs	r2, #4
 800181c:	619a      	str	r2, [r3, #24]
    timer_delay_ms(10);
 800181e:	200a      	movs	r0, #10
 8001820:	f000 fd8a 	bl	8002338 <timer_delay_ms>
    uint8_t count = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	71fb      	strb	r3, [r7, #7]
    while (lora_read_reg(REG_VERSION) != 0x12 && count < 10) {
 8001828:	e00a      	b.n	8001840 <lora_init_rx+0x44>
        led_on(LED_IGNORE_PORT, LED_IGNORE_PIN);
 800182a:	2103      	movs	r1, #3
 800182c:	482f      	ldr	r0, [pc, #188]	@ (80018ec <lora_init_rx+0xf0>)
 800182e:	f7ff fd4f 	bl	80012d0 <led_on>
        timer_delay_ms(500);
 8001832:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001836:	f000 fd7f 	bl	8002338 <timer_delay_ms>
        count++;
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3301      	adds	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
    while (lora_read_reg(REG_VERSION) != 0x12 && count < 10) {
 8001840:	2042      	movs	r0, #66	@ 0x42
 8001842:	f7ff ff27 	bl	8001694 <lora_read_reg>
 8001846:	4603      	mov	r3, r0
 8001848:	2b12      	cmp	r3, #18
 800184a:	d002      	beq.n	8001852 <lora_init_rx+0x56>
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b09      	cmp	r3, #9
 8001850:	d9eb      	bls.n	800182a <lora_init_rx+0x2e>
    }
    if (count >= 10) {
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b09      	cmp	r3, #9
 8001856:	d906      	bls.n	8001866 <lora_init_rx+0x6a>
        GPIOC->ODR |= (1 << 3);
 8001858:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <lora_init_rx+0xf0>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	4a23      	ldr	r2, [pc, #140]	@ (80018ec <lora_init_rx+0xf0>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6153      	str	r3, [r2, #20]
        return;
 8001864:	e03b      	b.n	80018de <lora_init_rx+0xe2>
    }
    lora_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	2001      	movs	r0, #1
 800186a:	f7ff fef3 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800186e:	2181      	movs	r1, #129	@ 0x81
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff feef 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_FREQ_MSB, 0x6C);
 8001876:	216c      	movs	r1, #108	@ 0x6c
 8001878:	2006      	movs	r0, #6
 800187a:	f7ff feeb 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_FREQ_MID, 0x80);
 800187e:	2180      	movs	r1, #128	@ 0x80
 8001880:	2007      	movs	r0, #7
 8001882:	f7ff fee7 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_FREQ_LSB, 0x00);
 8001886:	2100      	movs	r1, #0
 8001888:	2008      	movs	r0, #8
 800188a:	f7ff fee3 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_PREAMBLE_MSB, 0x00);
 800188e:	2100      	movs	r1, #0
 8001890:	2020      	movs	r0, #32
 8001892:	f7ff fedf 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_PREAMBLE_LSB, 0x08);
 8001896:	2108      	movs	r1, #8
 8001898:	2021      	movs	r0, #33	@ 0x21
 800189a:	f7ff fedb 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_SYNC_WORD, 0x12);
 800189e:	2112      	movs	r1, #18
 80018a0:	2039      	movs	r0, #57	@ 0x39
 80018a2:	f7ff fed7 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_MODEM_CONFIG1, 0x72);
 80018a6:	2172      	movs	r1, #114	@ 0x72
 80018a8:	201d      	movs	r0, #29
 80018aa:	f7ff fed3 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_MODEM_CONFIG2, 0xC0); // SF12
 80018ae:	21c0      	movs	r1, #192	@ 0xc0
 80018b0:	201e      	movs	r0, #30
 80018b2:	f7ff fecf 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_MODEM_CONFIG3, 0x04);
 80018b6:	2104      	movs	r1, #4
 80018b8:	2026      	movs	r0, #38	@ 0x26
 80018ba:	f7ff fecb 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_FIFO_RX_BASE_ADDR, 0x00);
 80018be:	2100      	movs	r1, #0
 80018c0:	200f      	movs	r0, #15
 80018c2:	f7ff fec7 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_DIO_MAPPING1, 0x00);
 80018c6:	2100      	movs	r1, #0
 80018c8:	2040      	movs	r0, #64	@ 0x40
 80018ca:	f7ff fec3 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80018ce:	2185      	movs	r1, #133	@ 0x85
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff febf 	bl	8001654 <lora_write_reg>
    led_on(LED_OK_PORT, LED_OK_PIN);
 80018d6:	2101      	movs	r1, #1
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <lora_init_rx+0xe8>)
 80018da:	f7ff fcf9 	bl	80012d0 <led_on>
}
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020800 	.word	0x40020800

080018f0 <lora_handle_packet_interrupt>:


void lora_handle_packet_interrupt(void) {
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	b0bf      	sub	sp, #252	@ 0xfc
 80018f4:	af06      	add	r7, sp, #24
    char debug[128];
    uint8_t irq_flags = lora_read_reg(REG_IRQ_FLAGS);
 80018f6:	2012      	movs	r0, #18
 80018f8:	f7ff fecc 	bl	8001694 <lora_read_reg>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    snprintf(debug, sizeof(debug), "IRQ Flags: 0x%02X\r\n", irq_flags);
 8001902:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8001906:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800190a:	4aa4      	ldr	r2, [pc, #656]	@ (8001b9c <lora_handle_packet_interrupt+0x2ac>)
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	f001 faed 	bl	8002eec <sniprintf>
    uart2_send_string(debug); // Gửi cờ IRQ qua UART
 8001912:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fd92 	bl	8002440 <uart2_send_string>

    if (irq_flags & 0x40) { // Kiểm tra RxDone
 800191c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8001920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8126 	beq.w	8001b76 <lora_handle_packet_interrupt+0x286>
        uint8_t len = lora_read_reg(REG_RX_NB_BYTES);
 800192a:	2013      	movs	r0, #19
 800192c:	f7ff feb2 	bl	8001694 <lora_read_reg>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
        snprintf(debug, sizeof(debug), "Received %d bytes\r\n", len);
 8001936:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 800193a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800193e:	4a98      	ldr	r2, [pc, #608]	@ (8001ba0 <lora_handle_packet_interrupt+0x2b0>)
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	f001 fad3 	bl	8002eec <sniprintf>
        uart2_send_string(debug);
 8001946:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fd78 	bl	8002440 <uart2_send_string>

        if (len > 32) {
 8001950:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8001954:	2b20      	cmp	r3, #32
 8001956:	d903      	bls.n	8001960 <lora_handle_packet_interrupt+0x70>
            uart2_send_string("Error: Packet too long\r\n");
 8001958:	4892      	ldr	r0, [pc, #584]	@ (8001ba4 <lora_handle_packet_interrupt+0x2b4>)
 800195a:	f000 fd71 	bl	8002440 <uart2_send_string>
 800195e:	e119      	b.n	8001b94 <lora_handle_packet_interrupt+0x2a4>
            return;
        }

        lora_write_reg(REG_FIFO_ADDR_PTR, lora_read_reg(REG_FIFO_RX_CURRENT));
 8001960:	2010      	movs	r0, #16
 8001962:	f7ff fe97 	bl	8001694 <lora_read_reg>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	200d      	movs	r0, #13
 800196c:	f7ff fe72 	bl	8001654 <lora_write_reg>
        uint8_t buffer[32];

        LORA_NSS_LOW();
 8001970:	4b8d      	ldr	r3, [pc, #564]	@ (8001ba8 <lora_handle_packet_interrupt+0x2b8>)
 8001972:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001976:	619a      	str	r2, [r3, #24]
        spi1_write(REG_FIFO & 0x7F);
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fe25 	bl	80015c8 <spi1_write>
        for (uint8_t i = 0; i < len; i++) {
 800197e:	2300      	movs	r3, #0
 8001980:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8001984:	e010      	b.n	80019a8 <lora_handle_packet_interrupt+0xb8>
            buffer[i] = spi1_transfer(0x00);
 8001986:	f897 40df 	ldrb.w	r4, [r7, #223]	@ 0xdf
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fe3e 	bl	800160c <spi1_transfer>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 8001998:	443b      	add	r3, r7
 800199a:	f803 2cdc 	strb.w	r2, [r3, #-220]
        for (uint8_t i = 0; i < len; i++) {
 800199e:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 80019a2:	3301      	adds	r3, #1
 80019a4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80019a8:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 80019ac:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3e8      	bcc.n	8001986 <lora_handle_packet_interrupt+0x96>
        }
        LORA_NSS_HIGH();
 80019b4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba8 <lora_handle_packet_interrupt+0x2b8>)
 80019b6:	2210      	movs	r2, #16
 80019b8:	619a      	str	r2, [r3, #24]

        // Gửi dữ liệu thô qua UART
        uart2_send_string("Raw data: ");
 80019ba:	487c      	ldr	r0, [pc, #496]	@ (8001bac <lora_handle_packet_interrupt+0x2bc>)
 80019bc:	f000 fd40 	bl	8002440 <uart2_send_string>
        for (uint8_t i = 0; i < len; i++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 80019c6:	e015      	b.n	80019f4 <lora_handle_packet_interrupt+0x104>
            snprintf(debug, sizeof(debug), "0x%02X ", buffer[i]);
 80019c8:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 80019cc:	33e0      	adds	r3, #224	@ 0xe0
 80019ce:	443b      	add	r3, r7
 80019d0:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 80019d4:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80019d8:	4a75      	ldr	r2, [pc, #468]	@ (8001bb0 <lora_handle_packet_interrupt+0x2c0>)
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	f001 fa86 	bl	8002eec <sniprintf>
            uart2_send_string(debug);
 80019e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fd2b 	bl	8002440 <uart2_send_string>
        for (uint8_t i = 0; i < len; i++) {
 80019ea:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 80019ee:	3301      	adds	r3, #1
 80019f0:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 80019f4:	f897 20de 	ldrb.w	r2, [r7, #222]	@ 0xde
 80019f8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d3e3      	bcc.n	80019c8 <lora_handle_packet_interrupt+0xd8>
        }
        uart2_send_string("\r\n");
 8001a00:	486c      	ldr	r0, [pc, #432]	@ (8001bb4 <lora_handle_packet_interrupt+0x2c4>)
 8001a02:	f000 fd1d 	bl	8002440 <uart2_send_string>

        lora_write_reg(REG_IRQ_FLAGS, 0xFF); // Xóa cờ ngắt
 8001a06:	21ff      	movs	r1, #255	@ 0xff
 8001a08:	2012      	movs	r0, #18
 8001a0a:	f7ff fe23 	bl	8001654 <lora_write_reg>

        uint8_t crc = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
        for (uint8_t i = 0; i < len - 1; i++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
 8001a1a:	e00f      	b.n	8001a3c <lora_handle_packet_interrupt+0x14c>
            crc ^= buffer[i];
 8001a1c:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8001a20:	33e0      	adds	r3, #224	@ 0xe0
 8001a22:	443b      	add	r3, r7
 8001a24:	f813 2cdc 	ldrb.w	r2, [r3, #-220]
 8001a28:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8001a2c:	4053      	eors	r3, r2
 8001a2e:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
        for (uint8_t i = 0; i < len - 1; i++) {
 8001a32:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8001a36:	3301      	adds	r3, #1
 8001a38:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
 8001a3c:	f897 20dc 	ldrb.w	r2, [r7, #220]	@ 0xdc
 8001a40:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8001a44:	3b01      	subs	r3, #1
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dbe8      	blt.n	8001a1c <lora_handle_packet_interrupt+0x12c>
        }

        if (crc == buffer[len - 1]) {
 8001a4a:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	33e0      	adds	r3, #224	@ 0xe0
 8001a52:	443b      	add	r3, r7
 8001a54:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8001a58:	f897 20dd 	ldrb.w	r2, [r7, #221]	@ 0xdd
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d169      	bne.n	8001b34 <lora_handle_packet_interrupt+0x244>
            led_on(LED_RAW_PORT, LED_RAW_PIN);
 8001a60:	2102      	movs	r1, #2
 8001a62:	4855      	ldr	r0, [pc, #340]	@ (8001bb8 <lora_handle_packet_interrupt+0x2c8>)
 8001a64:	f7ff fc34 	bl	80012d0 <led_on>
            uint8_t dev_id = buffer[0];
 8001a68:	793b      	ldrb	r3, [r7, #4]
 8001a6a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
            uint32_t timestamp = buffer[1] | (buffer[2] << 8) | (buffer[3] << 16) | (buffer[4] << 24);
 8001a6e:	797b      	ldrb	r3, [r7, #5]
 8001a70:	461a      	mov	r2, r3
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	431a      	orrs	r2, r3
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	7a3b      	ldrb	r3, [r7, #8]
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            float lat, lon;
            memcpy(&lat, &buffer[5], 4);
 8001a88:	f8d7 3009 	ldr.w	r3, [r7, #9]
 8001a8c:	653b      	str	r3, [r7, #80]	@ 0x50
            memcpy(&lon, &buffer[9], 4);
 8001a8e:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c

            snprintf(debug, sizeof(debug), "Valid packet: DevID=%d, Timestamp=%lu, Lat=%.6f, Lon=%.6f\r\n",
 8001a94:	f897 60d9 	ldrb.w	r6, [r7, #217]	@ 0xd9
 8001a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd5c 	bl	8000558 <__aeabi_f2d>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	460d      	mov	r5, r1
 8001aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd56 	bl	8000558 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001ab4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ab8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4633      	mov	r3, r6
 8001ac4:	4a3d      	ldr	r2, [pc, #244]	@ (8001bbc <lora_handle_packet_interrupt+0x2cc>)
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	f001 fa10 	bl	8002eec <sniprintf>
                     dev_id, timestamp, lat, lon);
            uart2_send_string(debug);
 8001acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fcb5 	bl	8002440 <uart2_send_string>

            char line1[17], line2[17];
            snprintf(line1, sizeof(line1), "Lat: %.6f", lat);
 8001ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd3d 	bl	8000558 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8001aea:	4a35      	ldr	r2, [pc, #212]	@ (8001bc0 <lora_handle_packet_interrupt+0x2d0>)
 8001aec:	2111      	movs	r1, #17
 8001aee:	f001 f9fd 	bl	8002eec <sniprintf>
            snprintf(line2, sizeof(line2), "Lon: %.6f", lon);
 8001af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd2f 	bl	8000558 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b02:	e9cd 2300 	strd	r2, r3, [sp]
 8001b06:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc4 <lora_handle_packet_interrupt+0x2d4>)
 8001b08:	2111      	movs	r1, #17
 8001b0a:	f001 f9ef 	bl	8002eec <sniprintf>

            lcd_command(0x01); // Xóa LCD
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff fb62 	bl	80011d8 <lcd_command>
            lcd_print(line1);  // Dòng 1
 8001b14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fbc3 	bl	80012a4 <lcd_print>
            lcd_command(0xC0); // Xuống dòng 2
 8001b1e:	20c0      	movs	r0, #192	@ 0xc0
 8001b20:	f7ff fb5a 	bl	80011d8 <lcd_command>
            lcd_print(line2);  // Dòng 2
 8001b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fbbb 	bl	80012a4 <lcd_print>

            buzzer_on();
 8001b2e:	f7ff f8bb 	bl	8000ca8 <buzzer_on>
 8001b32:	e02f      	b.n	8001b94 <lora_handle_packet_interrupt+0x2a4>
        } else {
            led_on(LED_IGNORE_PORT, LED_IGNORE_PIN);
 8001b34:	2103      	movs	r1, #3
 8001b36:	4820      	ldr	r0, [pc, #128]	@ (8001bb8 <lora_handle_packet_interrupt+0x2c8>)
 8001b38:	f7ff fbca 	bl	80012d0 <led_on>
            snprintf(debug, sizeof(debug), "CRC Error: Calculated=0x%02X, Received=0x%02X\r\n",
 8001b3c:	f897 20dd 	ldrb.w	r2, [r7, #221]	@ 0xdd
                     crc, buffer[len - 1]);
 8001b40:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8001b44:	3b01      	subs	r3, #1
 8001b46:	33e0      	adds	r3, #224	@ 0xe0
 8001b48:	443b      	add	r3, r7
 8001b4a:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
            snprintf(debug, sizeof(debug), "CRC Error: Calculated=0x%02X, Received=0x%02X\r\n",
 8001b4e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <lora_handle_packet_interrupt+0x2d8>)
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	f001 f9c7 	bl	8002eec <sniprintf>
            uart2_send_string(debug);
 8001b5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fc6c 	bl	8002440 <uart2_send_string>
            lcd_command(0x01);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff fb35 	bl	80011d8 <lcd_command>
            lcd_print("CRC Loi");
 8001b6e:	4817      	ldr	r0, [pc, #92]	@ (8001bcc <lora_handle_packet_interrupt+0x2dc>)
 8001b70:	f7ff fb98 	bl	80012a4 <lcd_print>
 8001b74:	e00e      	b.n	8001b94 <lora_handle_packet_interrupt+0x2a4>
        }
    } else {
        uart2_send_string("No RxDone\r\n");
 8001b76:	4816      	ldr	r0, [pc, #88]	@ (8001bd0 <lora_handle_packet_interrupt+0x2e0>)
 8001b78:	f000 fc62 	bl	8002440 <uart2_send_string>
        lcd_command(0x01);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff fb2b 	bl	80011d8 <lcd_command>
        lcd_print("Khong RxDone");
 8001b82:	4814      	ldr	r0, [pc, #80]	@ (8001bd4 <lora_handle_packet_interrupt+0x2e4>)
 8001b84:	f7ff fb8e 	bl	80012a4 <lcd_print>
        buzzer_off();
 8001b88:	f7ff f8aa 	bl	8000ce0 <buzzer_off>
        lora_write_reg(REG_IRQ_FLAGS, 0xFF);
 8001b8c:	21ff      	movs	r1, #255	@ 0xff
 8001b8e:	2012      	movs	r0, #18
 8001b90:	f7ff fd60 	bl	8001654 <lora_write_reg>
    }
}
 8001b94:	37e4      	adds	r7, #228	@ 0xe4
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08005190 	.word	0x08005190
 8001ba0:	080051a4 	.word	0x080051a4
 8001ba4:	080051b8 	.word	0x080051b8
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	080051d4 	.word	0x080051d4
 8001bb0:	080051e0 	.word	0x080051e0
 8001bb4:	080051e8 	.word	0x080051e8
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	080051ec 	.word	0x080051ec
 8001bc0:	08005228 	.word	0x08005228
 8001bc4:	08005234 	.word	0x08005234
 8001bc8:	08005240 	.word	0x08005240
 8001bcc:	08005270 	.word	0x08005270
 8001bd0:	08005278 	.word	0x08005278
 8001bd4:	08005284 	.word	0x08005284

08001bd8 <main>:
#include "main.h"
#include "timer.h"
#include "buzzer.h"
#include "uart.h"

int main(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0a2      	sub	sp, #136	@ 0x88
 8001bdc:	af00      	add	r7, sp, #0
    char debug[128];

    uart2_init(); // Khởi tạo UART đầu tiên
 8001bde:	f000 fbc1 	bl	8002364 <uart2_init>
    snprintf(debug, sizeof(debug), "UART2 initialized\r\n");
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	4a49      	ldr	r2, [pc, #292]	@ (8001d0c <main+0x134>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 f97e 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fc23 	bl	8002440 <uart2_send_string>

    gpio_init_all();
 8001bfa:	f7ff f8a3 	bl	8000d44 <gpio_init_all>
    snprintf(debug, sizeof(debug), "GPIO initialized\r\n");
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	4a43      	ldr	r2, [pc, #268]	@ (8001d10 <main+0x138>)
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 f970 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fc15 	bl	8002440 <uart2_send_string>

    i2c2_init(); // Đổi thành i2c1_init() nếu khớp với i2c.c
 8001c16:	f7ff f9b9 	bl	8000f8c <i2c2_init>
    snprintf(debug, sizeof(debug), "I2C initialized\r\n");
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d14 <main+0x13c>)
 8001c20:	2180      	movs	r1, #128	@ 0x80
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 f962 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fc07 	bl	8002440 <uart2_send_string>

    lcd_init();
 8001c32:	f7ff fb05 	bl	8001240 <lcd_init>
    snprintf(debug, sizeof(debug), "LCD initialized\r\n");
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	4a37      	ldr	r2, [pc, #220]	@ (8001d18 <main+0x140>)
 8001c3c:	2180      	movs	r1, #128	@ 0x80
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 f954 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fbf9 	bl	8002440 <uart2_send_string>

    timer_init();
 8001c4e:	f000 fb55 	bl	80022fc <timer_init>
    snprintf(debug, sizeof(debug), "Timer initialized\r\n");
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4a31      	ldr	r2, [pc, #196]	@ (8001d1c <main+0x144>)
 8001c58:	2180      	movs	r1, #128	@ 0x80
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 f946 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fbeb 	bl	8002440 <uart2_send_string>

    button_init();
 8001c6a:	f7fe ffc3 	bl	8000bf4 <button_init>
    snprintf(debug, sizeof(debug), "Buttons initialized\r\n");
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a2b      	ldr	r2, [pc, #172]	@ (8001d20 <main+0x148>)
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	4618      	mov	r0, r3
 8001c78:	f001 f938 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fbdd 	bl	8002440 <uart2_send_string>

    SPI1_Init();
 8001c86:	f7ff fd25 	bl	80016d4 <SPI1_Init>
    snprintf(debug, sizeof(debug), "SPI1 initialized\r\n");
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4a25      	ldr	r2, [pc, #148]	@ (8001d24 <main+0x14c>)
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 f92a 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fbcf 	bl	8002440 <uart2_send_string>

    LORA_GPIO_Init();
 8001ca2:	f7ff fd61 	bl	8001768 <LORA_GPIO_Init>
    snprintf(debug, sizeof(debug), "LoRa GPIO initialized\r\n");
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4a1f      	ldr	r2, [pc, #124]	@ (8001d28 <main+0x150>)
 8001cac:	2180      	movs	r1, #128	@ 0x80
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 f91c 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fbc1 	bl	8002440 <uart2_send_string>

    lora_init_rx();
 8001cbe:	f7ff fd9d 	bl	80017fc <lora_init_rx>
    snprintf(debug, sizeof(debug), "LoRa RX initialized\r\n");
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <main+0x154>)
 8001cc8:	2180      	movs	r1, #128	@ 0x80
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 f90e 	bl	8002eec <sniprintf>
    uart2_send_string(debug);
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fbb3 	bl	8002440 <uart2_send_string>

    while (1) {
        led_check();
 8001cda:	f7ff fbf7 	bl	80014cc <led_check>
        snprintf(debug, sizeof(debug), "LED check loop running\r\n");
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	4a13      	ldr	r2, [pc, #76]	@ (8001d30 <main+0x158>)
 8001ce4:	2180      	movs	r1, #128	@ 0x80
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 f900 	bl	8002eec <sniprintf>
        uart2_send_string(debug);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fba5 	bl	8002440 <uart2_send_string>
        for (volatile int i = 0; i < 1000000; i++);
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	e002      	b.n	8001d02 <main+0x12a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <main+0x15c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	ddf8      	ble.n	8001cfc <main+0x124>
        led_check();
 8001d0a:	e7e6      	b.n	8001cda <main+0x102>
 8001d0c:	08005294 	.word	0x08005294
 8001d10:	080052a8 	.word	0x080052a8
 8001d14:	080052bc 	.word	0x080052bc
 8001d18:	080052d0 	.word	0x080052d0
 8001d1c:	080052e4 	.word	0x080052e4
 8001d20:	080052f8 	.word	0x080052f8
 8001d24:	08005310 	.word	0x08005310
 8001d28:	08005324 	.word	0x08005324
 8001d2c:	0800533c 	.word	0x0800533c
 8001d30:	08005354 	.word	0x08005354
 8001d34:	000f423f 	.word	0x000f423f

08001d38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3c:	f3bf 8f4f 	dsb	sy
}
 8001d40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <__NVIC_SystemReset+0x24>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d4a:	4904      	ldr	r1, [pc, #16]	@ (8001d5c <__NVIC_SystemReset+0x24>)
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_SystemReset+0x28>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d52:	f3bf 8f4f 	dsb	sy
}
 8001d56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <__NVIC_SystemReset+0x20>
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	05fa0004 	.word	0x05fa0004

08001d64 <EXTI0_IRQHandler>:
#include "system.h"
#include "buzzer.h"
#include "uart.h"
#include "led.h"

void EXTI0_IRQHandler(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0)) {
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <EXTI0_IRQHandler+0x34>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00e      	beq.n	8001d92 <EXTI0_IRQHandler+0x2e>
        EXTI->PR |= (1 << 0);
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <EXTI0_IRQHandler+0x34>)
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <EXTI0_IRQHandler+0x34>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6153      	str	r3, [r2, #20]
        uart2_send_string("DIO0 Interrupt triggered\r\n");
 8001d80:	4806      	ldr	r0, [pc, #24]	@ (8001d9c <EXTI0_IRQHandler+0x38>)
 8001d82:	f000 fb5d 	bl	8002440 <uart2_send_string>
        led_toggle(LED_OK_PORT, LED_OK_PIN);
 8001d86:	2101      	movs	r1, #1
 8001d88:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <EXTI0_IRQHandler+0x3c>)
 8001d8a:	f7ff fb3d 	bl	8001408 <led_toggle>
        lora_handle_packet_interrupt();
 8001d8e:	f7ff fdaf 	bl	80018f0 <lora_handle_packet_interrupt>
    }
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40013c00 	.word	0x40013c00
 8001d9c:	08005370 	.word	0x08005370
 8001da0:	40020400 	.word	0x40020400

08001da4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 3)) {
 8001da8:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <EXTI3_IRQHandler+0x24>)
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <EXTI3_IRQHandler+0x20>
        EXTI->PR |= (1 << 3);
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <EXTI3_IRQHandler+0x24>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <EXTI3_IRQHandler+0x24>)
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	6153      	str	r3, [r2, #20]
        NVIC_SystemReset();
 8001dc0:	f7ff ffba 	bl	8001d38 <__NVIC_SystemReset>
    }
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 5)) {
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <EXTI9_5_IRQHandler+0x24>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <EXTI9_5_IRQHandler+0x20>
        EXTI->PR |= (1 << 5);
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <EXTI9_5_IRQHandler+0x24>)
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	4a03      	ldr	r2, [pc, #12]	@ (8001df0 <EXTI9_5_IRQHandler+0x24>)
 8001de2:	f043 0320 	orr.w	r3, r3, #32
 8001de6:	6153      	str	r3, [r2, #20]
        buzzer_off();
 8001de8:	f7fe ff7a 	bl	8000ce0 <buzzer_off>
    }
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 13)) {
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <EXTI15_10_IRQHandler+0x44>)
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d017      	beq.n	8001e34 <EXTI15_10_IRQHandler+0x40>
        EXTI->PR |= (1 << 13);
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <EXTI15_10_IRQHandler+0x44>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <EXTI15_10_IRQHandler+0x44>)
 8001e0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e0e:	6153      	str	r3, [r2, #20]
        system_powered_on ^= 1;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <EXTI15_10_IRQHandler+0x48>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f083 0301 	eor.w	r3, r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <EXTI15_10_IRQHandler+0x48>)
 8001e1e:	701a      	strb	r2, [r3, #0]
        if (system_powered_on)
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <EXTI15_10_IRQHandler+0x48>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <EXTI15_10_IRQHandler+0x3c>
            system_startup();
 8001e2a:	f000 f92d 	bl	8002088 <system_startup>
        else
            system_shutdown();
    }
}
 8001e2e:	e001      	b.n	8001e34 <EXTI15_10_IRQHandler+0x40>
            system_shutdown();
 8001e30:	f000 f930 	bl	8002094 <system_shutdown>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40013c00 	.word	0x40013c00
 8001e3c:	20000238 	.word	0x20000238

08001e40 <NMI_Handler>:

void NMI_Handler(void) {
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
    while (1) {}
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x4>

08001e48 <HardFault_Handler>:
}

void HardFault_Handler(void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
    uart2_send_string("HardFault occurred!\r\n");
 8001e4e:	4813      	ldr	r0, [pc, #76]	@ (8001e9c <HardFault_Handler+0x54>)
 8001e50:	f000 faf6 	bl	8002440 <uart2_send_string>
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HardFault_Handler+0x58>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <HardFault_Handler+0x58>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER |= (0x1 << (13 * 2));
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HardFault_Handler+0x5c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HardFault_Handler+0x5c>)
 8001e66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e6a:	6013      	str	r3, [r2, #0]
    GPIOC->OTYPER &= ~(1 << 13);
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HardFault_Handler+0x5c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea4 <HardFault_Handler+0x5c>)
 8001e72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e76:	6053      	str	r3, [r2, #4]
    while (1) {
        GPIOC->ODR ^= (1 << 13);
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HardFault_Handler+0x5c>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HardFault_Handler+0x5c>)
 8001e7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e82:	6153      	str	r3, [r2, #20]
        for (volatile uint32_t i = 0; i < 1000000; i++);
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	e002      	b.n	8001e90 <HardFault_Handler+0x48>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <HardFault_Handler+0x60>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d9f8      	bls.n	8001e8a <HardFault_Handler+0x42>
        GPIOC->ODR ^= (1 << 13);
 8001e98:	e7ee      	b.n	8001e78 <HardFault_Handler+0x30>
 8001e9a:	bf00      	nop
 8001e9c:	0800538c 	.word	0x0800538c
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	000f423f 	.word	0x000f423f

08001eac <MemManage_Handler>:
    }
}

void MemManage_Handler(void) {
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
    while (1) {}
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <MemManage_Handler+0x4>

08001eb4 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
    while (1) {}
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
    while (1) {}
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec4 <SVC_Handler>:
}

void SVC_Handler(void) {}
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <PendSV_Handler>:

void PendSV_Handler(void) {}
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <SysTick_Handler>:

#include "timer.h"
void SysTick_Handler(void) {
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
    timer_systick_callback();
 8001ef2:	f000 f9e9 	bl	80022c8 <timer_systick_callback>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  return 1;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_kill>:

int _kill(int pid, int sig)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f14:	f001 f8b6 	bl	8003084 <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2216      	movs	r2, #22
 8001f1c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_exit>:

void _exit (int status)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffe7 	bl	8001f0a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <_exit+0x12>

08001f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00a      	b.n	8001f68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f52:	f3af 8000 	nop.w
 8001f56:	4601      	mov	r1, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60ba      	str	r2, [r7, #8]
 8001f5e:	b2ca      	uxtb	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbf0      	blt.n	8001f52 <_read+0x12>
  }

  return len;
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e009      	b.n	8001fa0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf1      	blt.n	8001f8c <_write+0x12>
  }
  return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_close>:

int _close(int file)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fda:	605a      	str	r2, [r3, #4]
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_isatty>:

int _isatty(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f001 f81a 	bl	8003084 <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20020000 	.word	0x20020000
 800207c:	00000400 	.word	0x00000400
 8002080:	20000244 	.word	0x20000244
 8002084:	200003a0 	.word	0x200003a0

08002088 <system_startup>:
#include "lora.h"
#include "lcd.h"

// TODO: bổ sung các header nếu bạn có led.h, buzzer.h...

void system_startup(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    gpio_init_all();
 800208c:	f7fe fe5a 	bl	8000d44 <gpio_init_all>
    // TODO: spi_init(), i2c_init() nếu chưa init
//    lcd_init();
//    lcd_clear();
//    lcd_print("Receiver DA BAT");
    // TODO: led_on();
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <system_shutdown>:

void system_shutdown(void) {
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

    // TODO: led_off(LED_GREEN); // Tắt LED trạng thái
    // TODO: buzzer_off();       // Tắt buzzer

    // Tắt clock ngoại vi không cần thiết
    RCC->APB2ENR &= ~RCC_APB2ENR_SPI1EN;
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <system_shutdown+0x48>)
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <system_shutdown+0x48>)
 800209e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020a2:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->APB1ENR &= ~RCC_APB1ENR_I2C1EN;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <system_shutdown+0x48>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <system_shutdown+0x48>)
 80020aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40

    // Đưa các GPIO output không dùng về analog để giảm rò rỉ dòng
    // LED (PB0, PB1), buzzer (PB10)
    GPIOB->MODER &= ~((0x3 << (0 * 2)) | (0x3 << (1 * 2)) | (0x3 << (10 * 2)));
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <system_shutdown+0x4c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <system_shutdown+0x4c>)
 80020b6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80020ba:	f023 030f 	bic.w	r3, r3, #15
 80020be:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((0x3 << (0 * 2)) | (0x3 << (1 * 2)) | (0x3 << (10 * 2))); // Analog mode
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <system_shutdown+0x4c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <system_shutdown+0x4c>)
 80020c6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80020ca:	f043 030f 	orr.w	r3, r3, #15
 80020ce:	6013      	str	r3, [r2, #0]

}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400

080020e4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
  void SystemInit(void) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
      /* FPU settings */
      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
          SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <SystemInit+0x58>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	4a13      	ldr	r2, [pc, #76]	@ (800213c <SystemInit+0x58>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      #endif

      /* Configure HSI 16MHz */
      RCC->CR |= RCC_CR_HSION;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <SystemInit+0x5c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a10      	ldr	r2, [pc, #64]	@ (8002140 <SystemInit+0x5c>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6013      	str	r3, [r2, #0]
      while (!(RCC->CR & RCC_CR_HSIRDY)); // Chờ HSI sẵn sàng
 8002104:	bf00      	nop
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <SystemInit+0x5c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f9      	beq.n	8002106 <SystemInit+0x22>
      RCC->CFGR &= ~RCC_CFGR_SW; // Xóa bit chọn nguồn clock
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <SystemInit+0x5c>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SystemInit+0x5c>)
 8002118:	f023 0303 	bic.w	r3, r3, #3
 800211c:	6093      	str	r3, [r2, #8]
      RCC->CFGR |= RCC_CFGR_SW_HSI; // Chọn HSI
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <SystemInit+0x5c>)
 8002120:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <SystemInit+0x5c>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	6093      	str	r3, [r2, #8]
      while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Chờ chuyển sang HSI
 8002126:	bf00      	nop
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SystemInit+0x5c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <SystemInit+0x44>
  #if defined(USER_VECT_TAB_ADDRESS)
      SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
  #endif

      /* Update SystemCoreClock */
      SystemCoreClockUpdate();
 8002134:	f000 f806 	bl	8002144 <SystemCoreClockUpdate>
  }
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	e000ed00 	.word	0xe000ed00
 8002140:	40023800 	.word	0x40023800

08002144 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800214a:	4b34      	ldr	r3, [pc, #208]	@ (800221c <SystemCoreClockUpdate+0xd8>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b08      	cmp	r3, #8
 8002158:	d011      	beq.n	800217e <SystemCoreClockUpdate+0x3a>
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d844      	bhi.n	80021ea <SystemCoreClockUpdate+0xa6>
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <SystemCoreClockUpdate+0x2a>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d004      	beq.n	8002176 <SystemCoreClockUpdate+0x32>
 800216c:	e03d      	b.n	80021ea <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800216e:	4b2c      	ldr	r3, [pc, #176]	@ (8002220 <SystemCoreClockUpdate+0xdc>)
 8002170:	4a2c      	ldr	r2, [pc, #176]	@ (8002224 <SystemCoreClockUpdate+0xe0>)
 8002172:	601a      	str	r2, [r3, #0]
      break;
 8002174:	e03d      	b.n	80021f2 <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002176:	4b2a      	ldr	r3, [pc, #168]	@ (8002220 <SystemCoreClockUpdate+0xdc>)
 8002178:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <SystemCoreClockUpdate+0xe4>)
 800217a:	601a      	str	r2, [r3, #0]
      break;
 800217c:	e039      	b.n	80021f2 <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800217e:	4b27      	ldr	r3, [pc, #156]	@ (800221c <SystemCoreClockUpdate+0xd8>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0d9b      	lsrs	r3, r3, #22
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800218a:	4b24      	ldr	r3, [pc, #144]	@ (800221c <SystemCoreClockUpdate+0xd8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002192:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800219a:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <SystemCoreClockUpdate+0xe4>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <SystemCoreClockUpdate+0xd8>)
 80021a4:	6852      	ldr	r2, [r2, #4]
 80021a6:	0992      	lsrs	r2, r2, #6
 80021a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00b      	b.n	80021cc <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80021b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <SystemCoreClockUpdate+0xe0>)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	4a17      	ldr	r2, [pc, #92]	@ (800221c <SystemCoreClockUpdate+0xd8>)
 80021be:	6852      	ldr	r2, [r2, #4]
 80021c0:	0992      	lsrs	r2, r2, #6
 80021c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <SystemCoreClockUpdate+0xd8>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <SystemCoreClockUpdate+0xdc>)
 80021e6:	6013      	str	r3, [r2, #0]
      break;
 80021e8:	e003      	b.n	80021f2 <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <SystemCoreClockUpdate+0xdc>)
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <SystemCoreClockUpdate+0xe0>)
 80021ee:	601a      	str	r2, [r3, #0]
      break;
 80021f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <SystemCoreClockUpdate+0xd8>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <SystemCoreClockUpdate+0xe8>)
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <SystemCoreClockUpdate+0xdc>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <SystemCoreClockUpdate+0xdc>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40023800 	.word	0x40023800
 8002220:	20000050 	.word	0x20000050
 8002224:	00f42400 	.word	0x00f42400
 8002228:	007a1200 	.word	0x007a1200
 800222c:	080053a4 	.word	0x080053a4

08002230 <__NVIC_SetPriority>:
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db0a      	blt.n	800225a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	490c      	ldr	r1, [pc, #48]	@ (800227c <__NVIC_SetPriority+0x4c>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	440b      	add	r3, r1
 8002254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002258:	e00a      	b.n	8002270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4908      	ldr	r1, [pc, #32]	@ (8002280 <__NVIC_SetPriority+0x50>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3b04      	subs	r3, #4
 8002268:	0112      	lsls	r2, r2, #4
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	440b      	add	r3, r1
 800226e:	761a      	strb	r2, [r3, #24]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ffc2 	bl	8002230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <timer_systick_callback>:
#include "timer.h"

static volatile uint32_t system_millis = 0;
static volatile uint32_t blocking_delay = 0;

void timer_systick_callback(void) {
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
    system_millis++;
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <timer_systick_callback+0x2c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <timer_systick_callback+0x2c>)
 80022d4:	6013      	str	r3, [r2, #0]
    if (blocking_delay > 0) blocking_delay--;
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <timer_systick_callback+0x30>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <timer_systick_callback+0x20>
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <timer_systick_callback+0x30>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <timer_systick_callback+0x30>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000248 	.word	0x20000248
 80022f8:	2000024c 	.word	0x2000024c

080022fc <timer_init>:

void timer_init(void) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
    // Cấu hình SysTick để ngắt mỗi 1ms
    SysTick_Config(SystemCoreClock / 1000);
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <timer_init+0x1c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a05      	ldr	r2, [pc, #20]	@ (800231c <timer_init+0x20>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ffb9 	bl	8002284 <SysTick_Config>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000050 	.word	0x20000050
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <millis>:

uint32_t millis(void) {
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
    return system_millis;
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <millis+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000248 	.word	0x20000248

08002338 <timer_delay_ms>:

void timer_delay_ms(uint32_t ms) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    blocking_delay = ms;
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <timer_delay_ms+0x28>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
    while (blocking_delay > 0);
 8002346:	bf00      	nop
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <timer_delay_ms+0x28>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1fb      	bne.n	8002348 <timer_delay_ms+0x10>
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000024c 	.word	0x2000024c

08002364 <uart2_init>:
#include "stm32f4xx.h"

void uart2_init(void) {
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002368:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <uart2_init+0x98>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	4a23      	ldr	r2, [pc, #140]	@ (80023fc <uart2_init+0x98>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <uart2_init+0x98>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	4a20      	ldr	r2, [pc, #128]	@ (80023fc <uart2_init+0x98>)
 800237a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800237e:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~(0x3 << (2 * 2));
 8002380:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <uart2_init+0x9c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1e      	ldr	r2, [pc, #120]	@ (8002400 <uart2_init+0x9c>)
 8002386:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800238a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x2 << (2 * 2));
 800238c:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <uart2_init+0x9c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1b      	ldr	r2, [pc, #108]	@ (8002400 <uart2_init+0x9c>)
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x7 << (2 * 4)); // AF7 cho PA2 (TX)
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <uart2_init+0x9c>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a18      	ldr	r2, [pc, #96]	@ (8002400 <uart2_init+0x9c>)
 800239e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a2:	6213      	str	r3, [r2, #32]

    GPIOA->MODER &= ~(0x3 << (3 * 2));
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <uart2_init+0x9c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a15      	ldr	r2, [pc, #84]	@ (8002400 <uart2_init+0x9c>)
 80023aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80023ae:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x2 << (3 * 2));
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <uart2_init+0x9c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <uart2_init+0x9c>)
 80023b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ba:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x7 << (3 * 4)); // AF7 cho PA3 (RX)
 80023bc:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <uart2_init+0x9c>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002400 <uart2_init+0x9c>)
 80023c2:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80023c6:	6213      	str	r3, [r2, #32]

    USART2->BRR = SystemCoreClock / 115200; // Dùng SystemCoreClock
 80023c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <uart2_init+0xa0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002408 <uart2_init+0xa4>)
 80023ce:	490f      	ldr	r1, [pc, #60]	@ (800240c <uart2_init+0xa8>)
 80023d0:	fba1 1303 	umull	r1, r3, r1, r3
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	6093      	str	r3, [r2, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE; // Bật TX, RX
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <uart2_init+0xa4>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <uart2_init+0xa4>)
 80023de:	f043 030c 	orr.w	r3, r3, #12
 80023e2:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_UE; // Bật USART
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <uart2_init+0xa4>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a07      	ldr	r2, [pc, #28]	@ (8002408 <uart2_init+0xa4>)
 80023ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020000 	.word	0x40020000
 8002404:	20000050 	.word	0x20000050
 8002408:	40004400 	.word	0x40004400
 800240c:	91a2b3c5 	.word	0x91a2b3c5

08002410 <uart2_send_char>:

void uart2_send_char(char c) {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 800241a:	bf00      	nop
 800241c:	4b07      	ldr	r3, [pc, #28]	@ (800243c <uart2_send_char+0x2c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f9      	beq.n	800241c <uart2_send_char+0xc>
    USART2->DR = c;
 8002428:	4a04      	ldr	r2, [pc, #16]	@ (800243c <uart2_send_char+0x2c>)
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	6053      	str	r3, [r2, #4]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40004400 	.word	0x40004400

08002440 <uart2_send_string>:

void uart2_send_string(const char* str) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002448:	e006      	b.n	8002458 <uart2_send_string+0x18>
        uart2_send_char(*str++);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffdc 	bl	8002410 <uart2_send_char>
    while (*str) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f4      	bne.n	800244a <uart2_send_string+0xa>
    }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002470:	f7ff fe38 	bl	80020e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	@ (80024ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249a:	f000 fdf9 	bl	8003090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7ff fb9b 	bl	8001bd8 <main>
  bx  lr
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80024b0:	0800573c 	.word	0x0800573c
  ldr r2, =_sbss
 80024b4:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80024b8:	2000039c 	.word	0x2000039c

080024bc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>

080024be <__cvt>:
 80024be:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024c2:	ec57 6b10 	vmov	r6, r7, d0
 80024c6:	2f00      	cmp	r7, #0
 80024c8:	460c      	mov	r4, r1
 80024ca:	4619      	mov	r1, r3
 80024cc:	463b      	mov	r3, r7
 80024ce:	bfbb      	ittet	lt
 80024d0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80024d4:	461f      	movlt	r7, r3
 80024d6:	2300      	movge	r3, #0
 80024d8:	232d      	movlt	r3, #45	@ 0x2d
 80024da:	700b      	strb	r3, [r1, #0]
 80024dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80024de:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80024e2:	4691      	mov	r9, r2
 80024e4:	f023 0820 	bic.w	r8, r3, #32
 80024e8:	bfbc      	itt	lt
 80024ea:	4632      	movlt	r2, r6
 80024ec:	4616      	movlt	r6, r2
 80024ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80024f2:	d005      	beq.n	8002500 <__cvt+0x42>
 80024f4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80024f8:	d100      	bne.n	80024fc <__cvt+0x3e>
 80024fa:	3401      	adds	r4, #1
 80024fc:	2102      	movs	r1, #2
 80024fe:	e000      	b.n	8002502 <__cvt+0x44>
 8002500:	2103      	movs	r1, #3
 8002502:	ab03      	add	r3, sp, #12
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	ab02      	add	r3, sp, #8
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	ec47 6b10 	vmov	d0, r6, r7
 800250e:	4653      	mov	r3, sl
 8002510:	4622      	mov	r2, r4
 8002512:	f000 fe6d 	bl	80031f0 <_dtoa_r>
 8002516:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800251a:	4605      	mov	r5, r0
 800251c:	d119      	bne.n	8002552 <__cvt+0x94>
 800251e:	f019 0f01 	tst.w	r9, #1
 8002522:	d00e      	beq.n	8002542 <__cvt+0x84>
 8002524:	eb00 0904 	add.w	r9, r0, r4
 8002528:	2200      	movs	r2, #0
 800252a:	2300      	movs	r3, #0
 800252c:	4630      	mov	r0, r6
 800252e:	4639      	mov	r1, r7
 8002530:	f7fe fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8002534:	b108      	cbz	r0, 800253a <__cvt+0x7c>
 8002536:	f8cd 900c 	str.w	r9, [sp, #12]
 800253a:	2230      	movs	r2, #48	@ 0x30
 800253c:	9b03      	ldr	r3, [sp, #12]
 800253e:	454b      	cmp	r3, r9
 8002540:	d31e      	bcc.n	8002580 <__cvt+0xc2>
 8002542:	9b03      	ldr	r3, [sp, #12]
 8002544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002546:	1b5b      	subs	r3, r3, r5
 8002548:	4628      	mov	r0, r5
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	b004      	add	sp, #16
 800254e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002552:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002556:	eb00 0904 	add.w	r9, r0, r4
 800255a:	d1e5      	bne.n	8002528 <__cvt+0x6a>
 800255c:	7803      	ldrb	r3, [r0, #0]
 800255e:	2b30      	cmp	r3, #48	@ 0x30
 8002560:	d10a      	bne.n	8002578 <__cvt+0xba>
 8002562:	2200      	movs	r2, #0
 8002564:	2300      	movs	r3, #0
 8002566:	4630      	mov	r0, r6
 8002568:	4639      	mov	r1, r7
 800256a:	f7fe fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800256e:	b918      	cbnz	r0, 8002578 <__cvt+0xba>
 8002570:	f1c4 0401 	rsb	r4, r4, #1
 8002574:	f8ca 4000 	str.w	r4, [sl]
 8002578:	f8da 3000 	ldr.w	r3, [sl]
 800257c:	4499      	add	r9, r3
 800257e:	e7d3      	b.n	8002528 <__cvt+0x6a>
 8002580:	1c59      	adds	r1, r3, #1
 8002582:	9103      	str	r1, [sp, #12]
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e7d9      	b.n	800253c <__cvt+0x7e>

08002588 <__exponent>:
 8002588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800258a:	2900      	cmp	r1, #0
 800258c:	bfba      	itte	lt
 800258e:	4249      	neglt	r1, r1
 8002590:	232d      	movlt	r3, #45	@ 0x2d
 8002592:	232b      	movge	r3, #43	@ 0x2b
 8002594:	2909      	cmp	r1, #9
 8002596:	7002      	strb	r2, [r0, #0]
 8002598:	7043      	strb	r3, [r0, #1]
 800259a:	dd29      	ble.n	80025f0 <__exponent+0x68>
 800259c:	f10d 0307 	add.w	r3, sp, #7
 80025a0:	461d      	mov	r5, r3
 80025a2:	270a      	movs	r7, #10
 80025a4:	461a      	mov	r2, r3
 80025a6:	fbb1 f6f7 	udiv	r6, r1, r7
 80025aa:	fb07 1416 	mls	r4, r7, r6, r1
 80025ae:	3430      	adds	r4, #48	@ 0x30
 80025b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80025b4:	460c      	mov	r4, r1
 80025b6:	2c63      	cmp	r4, #99	@ 0x63
 80025b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80025bc:	4631      	mov	r1, r6
 80025be:	dcf1      	bgt.n	80025a4 <__exponent+0x1c>
 80025c0:	3130      	adds	r1, #48	@ 0x30
 80025c2:	1e94      	subs	r4, r2, #2
 80025c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80025c8:	1c41      	adds	r1, r0, #1
 80025ca:	4623      	mov	r3, r4
 80025cc:	42ab      	cmp	r3, r5
 80025ce:	d30a      	bcc.n	80025e6 <__exponent+0x5e>
 80025d0:	f10d 0309 	add.w	r3, sp, #9
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	42ac      	cmp	r4, r5
 80025d8:	bf88      	it	hi
 80025da:	2300      	movhi	r3, #0
 80025dc:	3302      	adds	r3, #2
 80025de:	4403      	add	r3, r0
 80025e0:	1a18      	subs	r0, r3, r0
 80025e2:	b003      	add	sp, #12
 80025e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80025ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80025ee:	e7ed      	b.n	80025cc <__exponent+0x44>
 80025f0:	2330      	movs	r3, #48	@ 0x30
 80025f2:	3130      	adds	r1, #48	@ 0x30
 80025f4:	7083      	strb	r3, [r0, #2]
 80025f6:	70c1      	strb	r1, [r0, #3]
 80025f8:	1d03      	adds	r3, r0, #4
 80025fa:	e7f1      	b.n	80025e0 <__exponent+0x58>

080025fc <_printf_float>:
 80025fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002600:	b08d      	sub	sp, #52	@ 0x34
 8002602:	460c      	mov	r4, r1
 8002604:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002608:	4616      	mov	r6, r2
 800260a:	461f      	mov	r7, r3
 800260c:	4605      	mov	r5, r0
 800260e:	f000 fcef 	bl	8002ff0 <_localeconv_r>
 8002612:	6803      	ldr	r3, [r0, #0]
 8002614:	9304      	str	r3, [sp, #16]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd fe32 	bl	8000280 <strlen>
 800261c:	2300      	movs	r3, #0
 800261e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002620:	f8d8 3000 	ldr.w	r3, [r8]
 8002624:	9005      	str	r0, [sp, #20]
 8002626:	3307      	adds	r3, #7
 8002628:	f023 0307 	bic.w	r3, r3, #7
 800262c:	f103 0208 	add.w	r2, r3, #8
 8002630:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002634:	f8d4 b000 	ldr.w	fp, [r4]
 8002638:	f8c8 2000 	str.w	r2, [r8]
 800263c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002640:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002644:	9307      	str	r3, [sp, #28]
 8002646:	f8cd 8018 	str.w	r8, [sp, #24]
 800264a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800264e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002652:	4b9c      	ldr	r3, [pc, #624]	@ (80028c4 <_printf_float+0x2c8>)
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	f7fe fa70 	bl	8000b3c <__aeabi_dcmpun>
 800265c:	bb70      	cbnz	r0, 80026bc <_printf_float+0xc0>
 800265e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002662:	4b98      	ldr	r3, [pc, #608]	@ (80028c4 <_printf_float+0x2c8>)
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	f7fe fa4a 	bl	8000b00 <__aeabi_dcmple>
 800266c:	bb30      	cbnz	r0, 80026bc <_printf_float+0xc0>
 800266e:	2200      	movs	r2, #0
 8002670:	2300      	movs	r3, #0
 8002672:	4640      	mov	r0, r8
 8002674:	4649      	mov	r1, r9
 8002676:	f7fe fa39 	bl	8000aec <__aeabi_dcmplt>
 800267a:	b110      	cbz	r0, 8002682 <_printf_float+0x86>
 800267c:	232d      	movs	r3, #45	@ 0x2d
 800267e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002682:	4a91      	ldr	r2, [pc, #580]	@ (80028c8 <_printf_float+0x2cc>)
 8002684:	4b91      	ldr	r3, [pc, #580]	@ (80028cc <_printf_float+0x2d0>)
 8002686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800268a:	bf8c      	ite	hi
 800268c:	4690      	movhi	r8, r2
 800268e:	4698      	movls	r8, r3
 8002690:	2303      	movs	r3, #3
 8002692:	6123      	str	r3, [r4, #16]
 8002694:	f02b 0304 	bic.w	r3, fp, #4
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	f04f 0900 	mov.w	r9, #0
 800269e:	9700      	str	r7, [sp, #0]
 80026a0:	4633      	mov	r3, r6
 80026a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80026a4:	4621      	mov	r1, r4
 80026a6:	4628      	mov	r0, r5
 80026a8:	f000 f9d2 	bl	8002a50 <_printf_common>
 80026ac:	3001      	adds	r0, #1
 80026ae:	f040 808d 	bne.w	80027cc <_printf_float+0x1d0>
 80026b2:	f04f 30ff 	mov.w	r0, #4294967295
 80026b6:	b00d      	add	sp, #52	@ 0x34
 80026b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026bc:	4642      	mov	r2, r8
 80026be:	464b      	mov	r3, r9
 80026c0:	4640      	mov	r0, r8
 80026c2:	4649      	mov	r1, r9
 80026c4:	f7fe fa3a 	bl	8000b3c <__aeabi_dcmpun>
 80026c8:	b140      	cbz	r0, 80026dc <_printf_float+0xe0>
 80026ca:	464b      	mov	r3, r9
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bfbc      	itt	lt
 80026d0:	232d      	movlt	r3, #45	@ 0x2d
 80026d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80026d6:	4a7e      	ldr	r2, [pc, #504]	@ (80028d0 <_printf_float+0x2d4>)
 80026d8:	4b7e      	ldr	r3, [pc, #504]	@ (80028d4 <_printf_float+0x2d8>)
 80026da:	e7d4      	b.n	8002686 <_printf_float+0x8a>
 80026dc:	6863      	ldr	r3, [r4, #4]
 80026de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80026e2:	9206      	str	r2, [sp, #24]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	d13b      	bne.n	8002760 <_printf_float+0x164>
 80026e8:	2306      	movs	r3, #6
 80026ea:	6063      	str	r3, [r4, #4]
 80026ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80026f0:	2300      	movs	r3, #0
 80026f2:	6022      	str	r2, [r4, #0]
 80026f4:	9303      	str	r3, [sp, #12]
 80026f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80026f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80026fc:	ab09      	add	r3, sp, #36	@ 0x24
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6861      	ldr	r1, [r4, #4]
 8002702:	ec49 8b10 	vmov	d0, r8, r9
 8002706:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800270a:	4628      	mov	r0, r5
 800270c:	f7ff fed7 	bl	80024be <__cvt>
 8002710:	9b06      	ldr	r3, [sp, #24]
 8002712:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002714:	2b47      	cmp	r3, #71	@ 0x47
 8002716:	4680      	mov	r8, r0
 8002718:	d129      	bne.n	800276e <_printf_float+0x172>
 800271a:	1cc8      	adds	r0, r1, #3
 800271c:	db02      	blt.n	8002724 <_printf_float+0x128>
 800271e:	6863      	ldr	r3, [r4, #4]
 8002720:	4299      	cmp	r1, r3
 8002722:	dd41      	ble.n	80027a8 <_printf_float+0x1ac>
 8002724:	f1aa 0a02 	sub.w	sl, sl, #2
 8002728:	fa5f fa8a 	uxtb.w	sl, sl
 800272c:	3901      	subs	r1, #1
 800272e:	4652      	mov	r2, sl
 8002730:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002734:	9109      	str	r1, [sp, #36]	@ 0x24
 8002736:	f7ff ff27 	bl	8002588 <__exponent>
 800273a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800273c:	1813      	adds	r3, r2, r0
 800273e:	2a01      	cmp	r2, #1
 8002740:	4681      	mov	r9, r0
 8002742:	6123      	str	r3, [r4, #16]
 8002744:	dc02      	bgt.n	800274c <_printf_float+0x150>
 8002746:	6822      	ldr	r2, [r4, #0]
 8002748:	07d2      	lsls	r2, r2, #31
 800274a:	d501      	bpl.n	8002750 <_printf_float+0x154>
 800274c:	3301      	adds	r3, #1
 800274e:	6123      	str	r3, [r4, #16]
 8002750:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0a2      	beq.n	800269e <_printf_float+0xa2>
 8002758:	232d      	movs	r3, #45	@ 0x2d
 800275a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800275e:	e79e      	b.n	800269e <_printf_float+0xa2>
 8002760:	9a06      	ldr	r2, [sp, #24]
 8002762:	2a47      	cmp	r2, #71	@ 0x47
 8002764:	d1c2      	bne.n	80026ec <_printf_float+0xf0>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1c0      	bne.n	80026ec <_printf_float+0xf0>
 800276a:	2301      	movs	r3, #1
 800276c:	e7bd      	b.n	80026ea <_printf_float+0xee>
 800276e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002772:	d9db      	bls.n	800272c <_printf_float+0x130>
 8002774:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002778:	d118      	bne.n	80027ac <_printf_float+0x1b0>
 800277a:	2900      	cmp	r1, #0
 800277c:	6863      	ldr	r3, [r4, #4]
 800277e:	dd0b      	ble.n	8002798 <_printf_float+0x19c>
 8002780:	6121      	str	r1, [r4, #16]
 8002782:	b913      	cbnz	r3, 800278a <_printf_float+0x18e>
 8002784:	6822      	ldr	r2, [r4, #0]
 8002786:	07d0      	lsls	r0, r2, #31
 8002788:	d502      	bpl.n	8002790 <_printf_float+0x194>
 800278a:	3301      	adds	r3, #1
 800278c:	440b      	add	r3, r1
 800278e:	6123      	str	r3, [r4, #16]
 8002790:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002792:	f04f 0900 	mov.w	r9, #0
 8002796:	e7db      	b.n	8002750 <_printf_float+0x154>
 8002798:	b913      	cbnz	r3, 80027a0 <_printf_float+0x1a4>
 800279a:	6822      	ldr	r2, [r4, #0]
 800279c:	07d2      	lsls	r2, r2, #31
 800279e:	d501      	bpl.n	80027a4 <_printf_float+0x1a8>
 80027a0:	3302      	adds	r3, #2
 80027a2:	e7f4      	b.n	800278e <_printf_float+0x192>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e7f2      	b.n	800278e <_printf_float+0x192>
 80027a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80027ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80027ae:	4299      	cmp	r1, r3
 80027b0:	db05      	blt.n	80027be <_printf_float+0x1c2>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	6121      	str	r1, [r4, #16]
 80027b6:	07d8      	lsls	r0, r3, #31
 80027b8:	d5ea      	bpl.n	8002790 <_printf_float+0x194>
 80027ba:	1c4b      	adds	r3, r1, #1
 80027bc:	e7e7      	b.n	800278e <_printf_float+0x192>
 80027be:	2900      	cmp	r1, #0
 80027c0:	bfd4      	ite	le
 80027c2:	f1c1 0202 	rsble	r2, r1, #2
 80027c6:	2201      	movgt	r2, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	e7e0      	b.n	800278e <_printf_float+0x192>
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	055a      	lsls	r2, r3, #21
 80027d0:	d407      	bmi.n	80027e2 <_printf_float+0x1e6>
 80027d2:	6923      	ldr	r3, [r4, #16]
 80027d4:	4642      	mov	r2, r8
 80027d6:	4631      	mov	r1, r6
 80027d8:	4628      	mov	r0, r5
 80027da:	47b8      	blx	r7
 80027dc:	3001      	adds	r0, #1
 80027de:	d12b      	bne.n	8002838 <_printf_float+0x23c>
 80027e0:	e767      	b.n	80026b2 <_printf_float+0xb6>
 80027e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80027e6:	f240 80dd 	bls.w	80029a4 <_printf_float+0x3a8>
 80027ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80027ee:	2200      	movs	r2, #0
 80027f0:	2300      	movs	r3, #0
 80027f2:	f7fe f971 	bl	8000ad8 <__aeabi_dcmpeq>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d033      	beq.n	8002862 <_printf_float+0x266>
 80027fa:	4a37      	ldr	r2, [pc, #220]	@ (80028d8 <_printf_float+0x2dc>)
 80027fc:	2301      	movs	r3, #1
 80027fe:	4631      	mov	r1, r6
 8002800:	4628      	mov	r0, r5
 8002802:	47b8      	blx	r7
 8002804:	3001      	adds	r0, #1
 8002806:	f43f af54 	beq.w	80026b2 <_printf_float+0xb6>
 800280a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800280e:	4543      	cmp	r3, r8
 8002810:	db02      	blt.n	8002818 <_printf_float+0x21c>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	07d8      	lsls	r0, r3, #31
 8002816:	d50f      	bpl.n	8002838 <_printf_float+0x23c>
 8002818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800281c:	4631      	mov	r1, r6
 800281e:	4628      	mov	r0, r5
 8002820:	47b8      	blx	r7
 8002822:	3001      	adds	r0, #1
 8002824:	f43f af45 	beq.w	80026b2 <_printf_float+0xb6>
 8002828:	f04f 0900 	mov.w	r9, #0
 800282c:	f108 38ff 	add.w	r8, r8, #4294967295
 8002830:	f104 0a1a 	add.w	sl, r4, #26
 8002834:	45c8      	cmp	r8, r9
 8002836:	dc09      	bgt.n	800284c <_printf_float+0x250>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	079b      	lsls	r3, r3, #30
 800283c:	f100 8103 	bmi.w	8002a46 <_printf_float+0x44a>
 8002840:	68e0      	ldr	r0, [r4, #12]
 8002842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002844:	4298      	cmp	r0, r3
 8002846:	bfb8      	it	lt
 8002848:	4618      	movlt	r0, r3
 800284a:	e734      	b.n	80026b6 <_printf_float+0xba>
 800284c:	2301      	movs	r3, #1
 800284e:	4652      	mov	r2, sl
 8002850:	4631      	mov	r1, r6
 8002852:	4628      	mov	r0, r5
 8002854:	47b8      	blx	r7
 8002856:	3001      	adds	r0, #1
 8002858:	f43f af2b 	beq.w	80026b2 <_printf_float+0xb6>
 800285c:	f109 0901 	add.w	r9, r9, #1
 8002860:	e7e8      	b.n	8002834 <_printf_float+0x238>
 8002862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002864:	2b00      	cmp	r3, #0
 8002866:	dc39      	bgt.n	80028dc <_printf_float+0x2e0>
 8002868:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <_printf_float+0x2dc>)
 800286a:	2301      	movs	r3, #1
 800286c:	4631      	mov	r1, r6
 800286e:	4628      	mov	r0, r5
 8002870:	47b8      	blx	r7
 8002872:	3001      	adds	r0, #1
 8002874:	f43f af1d 	beq.w	80026b2 <_printf_float+0xb6>
 8002878:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800287c:	ea59 0303 	orrs.w	r3, r9, r3
 8002880:	d102      	bne.n	8002888 <_printf_float+0x28c>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	07d9      	lsls	r1, r3, #31
 8002886:	d5d7      	bpl.n	8002838 <_printf_float+0x23c>
 8002888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800288c:	4631      	mov	r1, r6
 800288e:	4628      	mov	r0, r5
 8002890:	47b8      	blx	r7
 8002892:	3001      	adds	r0, #1
 8002894:	f43f af0d 	beq.w	80026b2 <_printf_float+0xb6>
 8002898:	f04f 0a00 	mov.w	sl, #0
 800289c:	f104 0b1a 	add.w	fp, r4, #26
 80028a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028a2:	425b      	negs	r3, r3
 80028a4:	4553      	cmp	r3, sl
 80028a6:	dc01      	bgt.n	80028ac <_printf_float+0x2b0>
 80028a8:	464b      	mov	r3, r9
 80028aa:	e793      	b.n	80027d4 <_printf_float+0x1d8>
 80028ac:	2301      	movs	r3, #1
 80028ae:	465a      	mov	r2, fp
 80028b0:	4631      	mov	r1, r6
 80028b2:	4628      	mov	r0, r5
 80028b4:	47b8      	blx	r7
 80028b6:	3001      	adds	r0, #1
 80028b8:	f43f aefb 	beq.w	80026b2 <_printf_float+0xb6>
 80028bc:	f10a 0a01 	add.w	sl, sl, #1
 80028c0:	e7ee      	b.n	80028a0 <_printf_float+0x2a4>
 80028c2:	bf00      	nop
 80028c4:	7fefffff 	.word	0x7fefffff
 80028c8:	080053b8 	.word	0x080053b8
 80028cc:	080053b4 	.word	0x080053b4
 80028d0:	080053c0 	.word	0x080053c0
 80028d4:	080053bc 	.word	0x080053bc
 80028d8:	080053c4 	.word	0x080053c4
 80028dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80028e2:	4553      	cmp	r3, sl
 80028e4:	bfa8      	it	ge
 80028e6:	4653      	movge	r3, sl
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	4699      	mov	r9, r3
 80028ec:	dc36      	bgt.n	800295c <_printf_float+0x360>
 80028ee:	f04f 0b00 	mov.w	fp, #0
 80028f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028f6:	f104 021a 	add.w	r2, r4, #26
 80028fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028fc:	9306      	str	r3, [sp, #24]
 80028fe:	eba3 0309 	sub.w	r3, r3, r9
 8002902:	455b      	cmp	r3, fp
 8002904:	dc31      	bgt.n	800296a <_printf_float+0x36e>
 8002906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002908:	459a      	cmp	sl, r3
 800290a:	dc3a      	bgt.n	8002982 <_printf_float+0x386>
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	07da      	lsls	r2, r3, #31
 8002910:	d437      	bmi.n	8002982 <_printf_float+0x386>
 8002912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002914:	ebaa 0903 	sub.w	r9, sl, r3
 8002918:	9b06      	ldr	r3, [sp, #24]
 800291a:	ebaa 0303 	sub.w	r3, sl, r3
 800291e:	4599      	cmp	r9, r3
 8002920:	bfa8      	it	ge
 8002922:	4699      	movge	r9, r3
 8002924:	f1b9 0f00 	cmp.w	r9, #0
 8002928:	dc33      	bgt.n	8002992 <_printf_float+0x396>
 800292a:	f04f 0800 	mov.w	r8, #0
 800292e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002932:	f104 0b1a 	add.w	fp, r4, #26
 8002936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002938:	ebaa 0303 	sub.w	r3, sl, r3
 800293c:	eba3 0309 	sub.w	r3, r3, r9
 8002940:	4543      	cmp	r3, r8
 8002942:	f77f af79 	ble.w	8002838 <_printf_float+0x23c>
 8002946:	2301      	movs	r3, #1
 8002948:	465a      	mov	r2, fp
 800294a:	4631      	mov	r1, r6
 800294c:	4628      	mov	r0, r5
 800294e:	47b8      	blx	r7
 8002950:	3001      	adds	r0, #1
 8002952:	f43f aeae 	beq.w	80026b2 <_printf_float+0xb6>
 8002956:	f108 0801 	add.w	r8, r8, #1
 800295a:	e7ec      	b.n	8002936 <_printf_float+0x33a>
 800295c:	4642      	mov	r2, r8
 800295e:	4631      	mov	r1, r6
 8002960:	4628      	mov	r0, r5
 8002962:	47b8      	blx	r7
 8002964:	3001      	adds	r0, #1
 8002966:	d1c2      	bne.n	80028ee <_printf_float+0x2f2>
 8002968:	e6a3      	b.n	80026b2 <_printf_float+0xb6>
 800296a:	2301      	movs	r3, #1
 800296c:	4631      	mov	r1, r6
 800296e:	4628      	mov	r0, r5
 8002970:	9206      	str	r2, [sp, #24]
 8002972:	47b8      	blx	r7
 8002974:	3001      	adds	r0, #1
 8002976:	f43f ae9c 	beq.w	80026b2 <_printf_float+0xb6>
 800297a:	9a06      	ldr	r2, [sp, #24]
 800297c:	f10b 0b01 	add.w	fp, fp, #1
 8002980:	e7bb      	b.n	80028fa <_printf_float+0x2fe>
 8002982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002986:	4631      	mov	r1, r6
 8002988:	4628      	mov	r0, r5
 800298a:	47b8      	blx	r7
 800298c:	3001      	adds	r0, #1
 800298e:	d1c0      	bne.n	8002912 <_printf_float+0x316>
 8002990:	e68f      	b.n	80026b2 <_printf_float+0xb6>
 8002992:	9a06      	ldr	r2, [sp, #24]
 8002994:	464b      	mov	r3, r9
 8002996:	4442      	add	r2, r8
 8002998:	4631      	mov	r1, r6
 800299a:	4628      	mov	r0, r5
 800299c:	47b8      	blx	r7
 800299e:	3001      	adds	r0, #1
 80029a0:	d1c3      	bne.n	800292a <_printf_float+0x32e>
 80029a2:	e686      	b.n	80026b2 <_printf_float+0xb6>
 80029a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80029a8:	f1ba 0f01 	cmp.w	sl, #1
 80029ac:	dc01      	bgt.n	80029b2 <_printf_float+0x3b6>
 80029ae:	07db      	lsls	r3, r3, #31
 80029b0:	d536      	bpl.n	8002a20 <_printf_float+0x424>
 80029b2:	2301      	movs	r3, #1
 80029b4:	4642      	mov	r2, r8
 80029b6:	4631      	mov	r1, r6
 80029b8:	4628      	mov	r0, r5
 80029ba:	47b8      	blx	r7
 80029bc:	3001      	adds	r0, #1
 80029be:	f43f ae78 	beq.w	80026b2 <_printf_float+0xb6>
 80029c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80029c6:	4631      	mov	r1, r6
 80029c8:	4628      	mov	r0, r5
 80029ca:	47b8      	blx	r7
 80029cc:	3001      	adds	r0, #1
 80029ce:	f43f ae70 	beq.w	80026b2 <_printf_float+0xb6>
 80029d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80029d6:	2200      	movs	r2, #0
 80029d8:	2300      	movs	r3, #0
 80029da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80029de:	f7fe f87b 	bl	8000ad8 <__aeabi_dcmpeq>
 80029e2:	b9c0      	cbnz	r0, 8002a16 <_printf_float+0x41a>
 80029e4:	4653      	mov	r3, sl
 80029e6:	f108 0201 	add.w	r2, r8, #1
 80029ea:	4631      	mov	r1, r6
 80029ec:	4628      	mov	r0, r5
 80029ee:	47b8      	blx	r7
 80029f0:	3001      	adds	r0, #1
 80029f2:	d10c      	bne.n	8002a0e <_printf_float+0x412>
 80029f4:	e65d      	b.n	80026b2 <_printf_float+0xb6>
 80029f6:	2301      	movs	r3, #1
 80029f8:	465a      	mov	r2, fp
 80029fa:	4631      	mov	r1, r6
 80029fc:	4628      	mov	r0, r5
 80029fe:	47b8      	blx	r7
 8002a00:	3001      	adds	r0, #1
 8002a02:	f43f ae56 	beq.w	80026b2 <_printf_float+0xb6>
 8002a06:	f108 0801 	add.w	r8, r8, #1
 8002a0a:	45d0      	cmp	r8, sl
 8002a0c:	dbf3      	blt.n	80029f6 <_printf_float+0x3fa>
 8002a0e:	464b      	mov	r3, r9
 8002a10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002a14:	e6df      	b.n	80027d6 <_printf_float+0x1da>
 8002a16:	f04f 0800 	mov.w	r8, #0
 8002a1a:	f104 0b1a 	add.w	fp, r4, #26
 8002a1e:	e7f4      	b.n	8002a0a <_printf_float+0x40e>
 8002a20:	2301      	movs	r3, #1
 8002a22:	4642      	mov	r2, r8
 8002a24:	e7e1      	b.n	80029ea <_printf_float+0x3ee>
 8002a26:	2301      	movs	r3, #1
 8002a28:	464a      	mov	r2, r9
 8002a2a:	4631      	mov	r1, r6
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	47b8      	blx	r7
 8002a30:	3001      	adds	r0, #1
 8002a32:	f43f ae3e 	beq.w	80026b2 <_printf_float+0xb6>
 8002a36:	f108 0801 	add.w	r8, r8, #1
 8002a3a:	68e3      	ldr	r3, [r4, #12]
 8002a3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002a3e:	1a5b      	subs	r3, r3, r1
 8002a40:	4543      	cmp	r3, r8
 8002a42:	dcf0      	bgt.n	8002a26 <_printf_float+0x42a>
 8002a44:	e6fc      	b.n	8002840 <_printf_float+0x244>
 8002a46:	f04f 0800 	mov.w	r8, #0
 8002a4a:	f104 0919 	add.w	r9, r4, #25
 8002a4e:	e7f4      	b.n	8002a3a <_printf_float+0x43e>

08002a50 <_printf_common>:
 8002a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a54:	4616      	mov	r6, r2
 8002a56:	4698      	mov	r8, r3
 8002a58:	688a      	ldr	r2, [r1, #8]
 8002a5a:	690b      	ldr	r3, [r1, #16]
 8002a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bfb8      	it	lt
 8002a64:	4613      	movlt	r3, r2
 8002a66:	6033      	str	r3, [r6, #0]
 8002a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a6c:	4607      	mov	r7, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	b10a      	cbz	r2, 8002a76 <_printf_common+0x26>
 8002a72:	3301      	adds	r3, #1
 8002a74:	6033      	str	r3, [r6, #0]
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	0699      	lsls	r1, r3, #26
 8002a7a:	bf42      	ittt	mi
 8002a7c:	6833      	ldrmi	r3, [r6, #0]
 8002a7e:	3302      	addmi	r3, #2
 8002a80:	6033      	strmi	r3, [r6, #0]
 8002a82:	6825      	ldr	r5, [r4, #0]
 8002a84:	f015 0506 	ands.w	r5, r5, #6
 8002a88:	d106      	bne.n	8002a98 <_printf_common+0x48>
 8002a8a:	f104 0a19 	add.w	sl, r4, #25
 8002a8e:	68e3      	ldr	r3, [r4, #12]
 8002a90:	6832      	ldr	r2, [r6, #0]
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	42ab      	cmp	r3, r5
 8002a96:	dc26      	bgt.n	8002ae6 <_printf_common+0x96>
 8002a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	3b00      	subs	r3, #0
 8002aa0:	bf18      	it	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	0692      	lsls	r2, r2, #26
 8002aa6:	d42b      	bmi.n	8002b00 <_printf_common+0xb0>
 8002aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002aac:	4641      	mov	r1, r8
 8002aae:	4638      	mov	r0, r7
 8002ab0:	47c8      	blx	r9
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	d01e      	beq.n	8002af4 <_printf_common+0xa4>
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	6922      	ldr	r2, [r4, #16]
 8002aba:	f003 0306 	and.w	r3, r3, #6
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf02      	ittt	eq
 8002ac2:	68e5      	ldreq	r5, [r4, #12]
 8002ac4:	6833      	ldreq	r3, [r6, #0]
 8002ac6:	1aed      	subeq	r5, r5, r3
 8002ac8:	68a3      	ldr	r3, [r4, #8]
 8002aca:	bf0c      	ite	eq
 8002acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ad0:	2500      	movne	r5, #0
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	bfc4      	itt	gt
 8002ad6:	1a9b      	subgt	r3, r3, r2
 8002ad8:	18ed      	addgt	r5, r5, r3
 8002ada:	2600      	movs	r6, #0
 8002adc:	341a      	adds	r4, #26
 8002ade:	42b5      	cmp	r5, r6
 8002ae0:	d11a      	bne.n	8002b18 <_printf_common+0xc8>
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	e008      	b.n	8002af8 <_printf_common+0xa8>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4652      	mov	r2, sl
 8002aea:	4641      	mov	r1, r8
 8002aec:	4638      	mov	r0, r7
 8002aee:	47c8      	blx	r9
 8002af0:	3001      	adds	r0, #1
 8002af2:	d103      	bne.n	8002afc <_printf_common+0xac>
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002afc:	3501      	adds	r5, #1
 8002afe:	e7c6      	b.n	8002a8e <_printf_common+0x3e>
 8002b00:	18e1      	adds	r1, r4, r3
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	2030      	movs	r0, #48	@ 0x30
 8002b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b0a:	4422      	add	r2, r4
 8002b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b14:	3302      	adds	r3, #2
 8002b16:	e7c7      	b.n	8002aa8 <_printf_common+0x58>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	4638      	mov	r0, r7
 8002b20:	47c8      	blx	r9
 8002b22:	3001      	adds	r0, #1
 8002b24:	d0e6      	beq.n	8002af4 <_printf_common+0xa4>
 8002b26:	3601      	adds	r6, #1
 8002b28:	e7d9      	b.n	8002ade <_printf_common+0x8e>
	...

08002b2c <_printf_i>:
 8002b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b30:	7e0f      	ldrb	r7, [r1, #24]
 8002b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b34:	2f78      	cmp	r7, #120	@ 0x78
 8002b36:	4691      	mov	r9, r2
 8002b38:	4680      	mov	r8, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	469a      	mov	sl, r3
 8002b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b42:	d807      	bhi.n	8002b54 <_printf_i+0x28>
 8002b44:	2f62      	cmp	r7, #98	@ 0x62
 8002b46:	d80a      	bhi.n	8002b5e <_printf_i+0x32>
 8002b48:	2f00      	cmp	r7, #0
 8002b4a:	f000 80d1 	beq.w	8002cf0 <_printf_i+0x1c4>
 8002b4e:	2f58      	cmp	r7, #88	@ 0x58
 8002b50:	f000 80b8 	beq.w	8002cc4 <_printf_i+0x198>
 8002b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b5c:	e03a      	b.n	8002bd4 <_printf_i+0xa8>
 8002b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b62:	2b15      	cmp	r3, #21
 8002b64:	d8f6      	bhi.n	8002b54 <_printf_i+0x28>
 8002b66:	a101      	add	r1, pc, #4	@ (adr r1, 8002b6c <_printf_i+0x40>)
 8002b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b6c:	08002bc5 	.word	0x08002bc5
 8002b70:	08002bd9 	.word	0x08002bd9
 8002b74:	08002b55 	.word	0x08002b55
 8002b78:	08002b55 	.word	0x08002b55
 8002b7c:	08002b55 	.word	0x08002b55
 8002b80:	08002b55 	.word	0x08002b55
 8002b84:	08002bd9 	.word	0x08002bd9
 8002b88:	08002b55 	.word	0x08002b55
 8002b8c:	08002b55 	.word	0x08002b55
 8002b90:	08002b55 	.word	0x08002b55
 8002b94:	08002b55 	.word	0x08002b55
 8002b98:	08002cd7 	.word	0x08002cd7
 8002b9c:	08002c03 	.word	0x08002c03
 8002ba0:	08002c91 	.word	0x08002c91
 8002ba4:	08002b55 	.word	0x08002b55
 8002ba8:	08002b55 	.word	0x08002b55
 8002bac:	08002cf9 	.word	0x08002cf9
 8002bb0:	08002b55 	.word	0x08002b55
 8002bb4:	08002c03 	.word	0x08002c03
 8002bb8:	08002b55 	.word	0x08002b55
 8002bbc:	08002b55 	.word	0x08002b55
 8002bc0:	08002c99 	.word	0x08002c99
 8002bc4:	6833      	ldr	r3, [r6, #0]
 8002bc6:	1d1a      	adds	r2, r3, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6032      	str	r2, [r6, #0]
 8002bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e09c      	b.n	8002d12 <_printf_i+0x1e6>
 8002bd8:	6833      	ldr	r3, [r6, #0]
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	1d19      	adds	r1, r3, #4
 8002bde:	6031      	str	r1, [r6, #0]
 8002be0:	0606      	lsls	r6, r0, #24
 8002be2:	d501      	bpl.n	8002be8 <_printf_i+0xbc>
 8002be4:	681d      	ldr	r5, [r3, #0]
 8002be6:	e003      	b.n	8002bf0 <_printf_i+0xc4>
 8002be8:	0645      	lsls	r5, r0, #25
 8002bea:	d5fb      	bpl.n	8002be4 <_printf_i+0xb8>
 8002bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	da03      	bge.n	8002bfc <_printf_i+0xd0>
 8002bf4:	232d      	movs	r3, #45	@ 0x2d
 8002bf6:	426d      	negs	r5, r5
 8002bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bfc:	4858      	ldr	r0, [pc, #352]	@ (8002d60 <_printf_i+0x234>)
 8002bfe:	230a      	movs	r3, #10
 8002c00:	e011      	b.n	8002c26 <_printf_i+0xfa>
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	6833      	ldr	r3, [r6, #0]
 8002c06:	0608      	lsls	r0, r1, #24
 8002c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c0c:	d402      	bmi.n	8002c14 <_printf_i+0xe8>
 8002c0e:	0649      	lsls	r1, r1, #25
 8002c10:	bf48      	it	mi
 8002c12:	b2ad      	uxthmi	r5, r5
 8002c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c16:	4852      	ldr	r0, [pc, #328]	@ (8002d60 <_printf_i+0x234>)
 8002c18:	6033      	str	r3, [r6, #0]
 8002c1a:	bf14      	ite	ne
 8002c1c:	230a      	movne	r3, #10
 8002c1e:	2308      	moveq	r3, #8
 8002c20:	2100      	movs	r1, #0
 8002c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c26:	6866      	ldr	r6, [r4, #4]
 8002c28:	60a6      	str	r6, [r4, #8]
 8002c2a:	2e00      	cmp	r6, #0
 8002c2c:	db05      	blt.n	8002c3a <_printf_i+0x10e>
 8002c2e:	6821      	ldr	r1, [r4, #0]
 8002c30:	432e      	orrs	r6, r5
 8002c32:	f021 0104 	bic.w	r1, r1, #4
 8002c36:	6021      	str	r1, [r4, #0]
 8002c38:	d04b      	beq.n	8002cd2 <_printf_i+0x1a6>
 8002c3a:	4616      	mov	r6, r2
 8002c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c40:	fb03 5711 	mls	r7, r3, r1, r5
 8002c44:	5dc7      	ldrb	r7, [r0, r7]
 8002c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c4a:	462f      	mov	r7, r5
 8002c4c:	42bb      	cmp	r3, r7
 8002c4e:	460d      	mov	r5, r1
 8002c50:	d9f4      	bls.n	8002c3c <_printf_i+0x110>
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d10b      	bne.n	8002c6e <_printf_i+0x142>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	07df      	lsls	r7, r3, #31
 8002c5a:	d508      	bpl.n	8002c6e <_printf_i+0x142>
 8002c5c:	6923      	ldr	r3, [r4, #16]
 8002c5e:	6861      	ldr	r1, [r4, #4]
 8002c60:	4299      	cmp	r1, r3
 8002c62:	bfde      	ittt	le
 8002c64:	2330      	movle	r3, #48	@ 0x30
 8002c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c6e:	1b92      	subs	r2, r2, r6
 8002c70:	6122      	str	r2, [r4, #16]
 8002c72:	f8cd a000 	str.w	sl, [sp]
 8002c76:	464b      	mov	r3, r9
 8002c78:	aa03      	add	r2, sp, #12
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	4640      	mov	r0, r8
 8002c7e:	f7ff fee7 	bl	8002a50 <_printf_common>
 8002c82:	3001      	adds	r0, #1
 8002c84:	d14a      	bne.n	8002d1c <_printf_i+0x1f0>
 8002c86:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8a:	b004      	add	sp, #16
 8002c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	f043 0320 	orr.w	r3, r3, #32
 8002c96:	6023      	str	r3, [r4, #0]
 8002c98:	4832      	ldr	r0, [pc, #200]	@ (8002d64 <_printf_i+0x238>)
 8002c9a:	2778      	movs	r7, #120	@ 0x78
 8002c9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	6831      	ldr	r1, [r6, #0]
 8002ca4:	061f      	lsls	r7, r3, #24
 8002ca6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002caa:	d402      	bmi.n	8002cb2 <_printf_i+0x186>
 8002cac:	065f      	lsls	r7, r3, #25
 8002cae:	bf48      	it	mi
 8002cb0:	b2ad      	uxthmi	r5, r5
 8002cb2:	6031      	str	r1, [r6, #0]
 8002cb4:	07d9      	lsls	r1, r3, #31
 8002cb6:	bf44      	itt	mi
 8002cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8002cbc:	6023      	strmi	r3, [r4, #0]
 8002cbe:	b11d      	cbz	r5, 8002cc8 <_printf_i+0x19c>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	e7ad      	b.n	8002c20 <_printf_i+0xf4>
 8002cc4:	4826      	ldr	r0, [pc, #152]	@ (8002d60 <_printf_i+0x234>)
 8002cc6:	e7e9      	b.n	8002c9c <_printf_i+0x170>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	f023 0320 	bic.w	r3, r3, #32
 8002cce:	6023      	str	r3, [r4, #0]
 8002cd0:	e7f6      	b.n	8002cc0 <_printf_i+0x194>
 8002cd2:	4616      	mov	r6, r2
 8002cd4:	e7bd      	b.n	8002c52 <_printf_i+0x126>
 8002cd6:	6833      	ldr	r3, [r6, #0]
 8002cd8:	6825      	ldr	r5, [r4, #0]
 8002cda:	6961      	ldr	r1, [r4, #20]
 8002cdc:	1d18      	adds	r0, r3, #4
 8002cde:	6030      	str	r0, [r6, #0]
 8002ce0:	062e      	lsls	r6, r5, #24
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	d501      	bpl.n	8002cea <_printf_i+0x1be>
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <_printf_i+0x1c4>
 8002cea:	0668      	lsls	r0, r5, #25
 8002cec:	d5fb      	bpl.n	8002ce6 <_printf_i+0x1ba>
 8002cee:	8019      	strh	r1, [r3, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	4616      	mov	r6, r2
 8002cf6:	e7bc      	b.n	8002c72 <_printf_i+0x146>
 8002cf8:	6833      	ldr	r3, [r6, #0]
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	6032      	str	r2, [r6, #0]
 8002cfe:	681e      	ldr	r6, [r3, #0]
 8002d00:	6862      	ldr	r2, [r4, #4]
 8002d02:	2100      	movs	r1, #0
 8002d04:	4630      	mov	r0, r6
 8002d06:	f7fd fa6b 	bl	80001e0 <memchr>
 8002d0a:	b108      	cbz	r0, 8002d10 <_printf_i+0x1e4>
 8002d0c:	1b80      	subs	r0, r0, r6
 8002d0e:	6060      	str	r0, [r4, #4]
 8002d10:	6863      	ldr	r3, [r4, #4]
 8002d12:	6123      	str	r3, [r4, #16]
 8002d14:	2300      	movs	r3, #0
 8002d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d1a:	e7aa      	b.n	8002c72 <_printf_i+0x146>
 8002d1c:	6923      	ldr	r3, [r4, #16]
 8002d1e:	4632      	mov	r2, r6
 8002d20:	4649      	mov	r1, r9
 8002d22:	4640      	mov	r0, r8
 8002d24:	47d0      	blx	sl
 8002d26:	3001      	adds	r0, #1
 8002d28:	d0ad      	beq.n	8002c86 <_printf_i+0x15a>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	079b      	lsls	r3, r3, #30
 8002d2e:	d413      	bmi.n	8002d58 <_printf_i+0x22c>
 8002d30:	68e0      	ldr	r0, [r4, #12]
 8002d32:	9b03      	ldr	r3, [sp, #12]
 8002d34:	4298      	cmp	r0, r3
 8002d36:	bfb8      	it	lt
 8002d38:	4618      	movlt	r0, r3
 8002d3a:	e7a6      	b.n	8002c8a <_printf_i+0x15e>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4632      	mov	r2, r6
 8002d40:	4649      	mov	r1, r9
 8002d42:	4640      	mov	r0, r8
 8002d44:	47d0      	blx	sl
 8002d46:	3001      	adds	r0, #1
 8002d48:	d09d      	beq.n	8002c86 <_printf_i+0x15a>
 8002d4a:	3501      	adds	r5, #1
 8002d4c:	68e3      	ldr	r3, [r4, #12]
 8002d4e:	9903      	ldr	r1, [sp, #12]
 8002d50:	1a5b      	subs	r3, r3, r1
 8002d52:	42ab      	cmp	r3, r5
 8002d54:	dcf2      	bgt.n	8002d3c <_printf_i+0x210>
 8002d56:	e7eb      	b.n	8002d30 <_printf_i+0x204>
 8002d58:	2500      	movs	r5, #0
 8002d5a:	f104 0619 	add.w	r6, r4, #25
 8002d5e:	e7f5      	b.n	8002d4c <_printf_i+0x220>
 8002d60:	080053c6 	.word	0x080053c6
 8002d64:	080053d7 	.word	0x080053d7

08002d68 <std>:
 8002d68:	2300      	movs	r3, #0
 8002d6a:	b510      	push	{r4, lr}
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8002d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d76:	6083      	str	r3, [r0, #8]
 8002d78:	8181      	strh	r1, [r0, #12]
 8002d7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d7c:	81c2      	strh	r2, [r0, #14]
 8002d7e:	6183      	str	r3, [r0, #24]
 8002d80:	4619      	mov	r1, r3
 8002d82:	2208      	movs	r2, #8
 8002d84:	305c      	adds	r0, #92	@ 0x5c
 8002d86:	f000 f92a 	bl	8002fde <memset>
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <std+0x58>)
 8002d8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <std+0x5c>)
 8002d90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <std+0x60>)
 8002d94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <std+0x64>)
 8002d98:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <std+0x68>)
 8002d9c:	6224      	str	r4, [r4, #32]
 8002d9e:	429c      	cmp	r4, r3
 8002da0:	d006      	beq.n	8002db0 <std+0x48>
 8002da2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002da6:	4294      	cmp	r4, r2
 8002da8:	d002      	beq.n	8002db0 <std+0x48>
 8002daa:	33d0      	adds	r3, #208	@ 0xd0
 8002dac:	429c      	cmp	r4, r3
 8002dae:	d105      	bne.n	8002dbc <std+0x54>
 8002db0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002db8:	f000 b98e 	b.w	80030d8 <__retarget_lock_init_recursive>
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	bf00      	nop
 8002dc0:	08002f59 	.word	0x08002f59
 8002dc4:	08002f7b 	.word	0x08002f7b
 8002dc8:	08002fb3 	.word	0x08002fb3
 8002dcc:	08002fd7 	.word	0x08002fd7
 8002dd0:	20000250 	.word	0x20000250

08002dd4 <stdio_exit_handler>:
 8002dd4:	4a02      	ldr	r2, [pc, #8]	@ (8002de0 <stdio_exit_handler+0xc>)
 8002dd6:	4903      	ldr	r1, [pc, #12]	@ (8002de4 <stdio_exit_handler+0x10>)
 8002dd8:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <stdio_exit_handler+0x14>)
 8002dda:	f000 b869 	b.w	8002eb0 <_fwalk_sglue>
 8002dde:	bf00      	nop
 8002de0:	20000054 	.word	0x20000054
 8002de4:	08004a3d 	.word	0x08004a3d
 8002de8:	20000064 	.word	0x20000064

08002dec <cleanup_stdio>:
 8002dec:	6841      	ldr	r1, [r0, #4]
 8002dee:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <cleanup_stdio+0x34>)
 8002df0:	4299      	cmp	r1, r3
 8002df2:	b510      	push	{r4, lr}
 8002df4:	4604      	mov	r4, r0
 8002df6:	d001      	beq.n	8002dfc <cleanup_stdio+0x10>
 8002df8:	f001 fe20 	bl	8004a3c <_fflush_r>
 8002dfc:	68a1      	ldr	r1, [r4, #8]
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <cleanup_stdio+0x38>)
 8002e00:	4299      	cmp	r1, r3
 8002e02:	d002      	beq.n	8002e0a <cleanup_stdio+0x1e>
 8002e04:	4620      	mov	r0, r4
 8002e06:	f001 fe19 	bl	8004a3c <_fflush_r>
 8002e0a:	68e1      	ldr	r1, [r4, #12]
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <cleanup_stdio+0x3c>)
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d004      	beq.n	8002e1c <cleanup_stdio+0x30>
 8002e12:	4620      	mov	r0, r4
 8002e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e18:	f001 be10 	b.w	8004a3c <_fflush_r>
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000250 	.word	0x20000250
 8002e24:	200002b8 	.word	0x200002b8
 8002e28:	20000320 	.word	0x20000320

08002e2c <global_stdio_init.part.0>:
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <global_stdio_init.part.0+0x30>)
 8002e30:	4c0b      	ldr	r4, [pc, #44]	@ (8002e60 <global_stdio_init.part.0+0x34>)
 8002e32:	4a0c      	ldr	r2, [pc, #48]	@ (8002e64 <global_stdio_init.part.0+0x38>)
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	4620      	mov	r0, r4
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	f7ff ff94 	bl	8002d68 <std>
 8002e40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e44:	2201      	movs	r2, #1
 8002e46:	2109      	movs	r1, #9
 8002e48:	f7ff ff8e 	bl	8002d68 <std>
 8002e4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e50:	2202      	movs	r2, #2
 8002e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e56:	2112      	movs	r1, #18
 8002e58:	f7ff bf86 	b.w	8002d68 <std>
 8002e5c:	20000388 	.word	0x20000388
 8002e60:	20000250 	.word	0x20000250
 8002e64:	08002dd5 	.word	0x08002dd5

08002e68 <__sfp_lock_acquire>:
 8002e68:	4801      	ldr	r0, [pc, #4]	@ (8002e70 <__sfp_lock_acquire+0x8>)
 8002e6a:	f000 b936 	b.w	80030da <__retarget_lock_acquire_recursive>
 8002e6e:	bf00      	nop
 8002e70:	20000391 	.word	0x20000391

08002e74 <__sfp_lock_release>:
 8002e74:	4801      	ldr	r0, [pc, #4]	@ (8002e7c <__sfp_lock_release+0x8>)
 8002e76:	f000 b931 	b.w	80030dc <__retarget_lock_release_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	20000391 	.word	0x20000391

08002e80 <__sinit>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
 8002e84:	f7ff fff0 	bl	8002e68 <__sfp_lock_acquire>
 8002e88:	6a23      	ldr	r3, [r4, #32]
 8002e8a:	b11b      	cbz	r3, 8002e94 <__sinit+0x14>
 8002e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e90:	f7ff bff0 	b.w	8002e74 <__sfp_lock_release>
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <__sinit+0x28>)
 8002e96:	6223      	str	r3, [r4, #32]
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <__sinit+0x2c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f5      	bne.n	8002e8c <__sinit+0xc>
 8002ea0:	f7ff ffc4 	bl	8002e2c <global_stdio_init.part.0>
 8002ea4:	e7f2      	b.n	8002e8c <__sinit+0xc>
 8002ea6:	bf00      	nop
 8002ea8:	08002ded 	.word	0x08002ded
 8002eac:	20000388 	.word	0x20000388

08002eb0 <_fwalk_sglue>:
 8002eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	4688      	mov	r8, r1
 8002eb8:	4614      	mov	r4, r2
 8002eba:	2600      	movs	r6, #0
 8002ebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8002ec4:	d505      	bpl.n	8002ed2 <_fwalk_sglue+0x22>
 8002ec6:	6824      	ldr	r4, [r4, #0]
 8002ec8:	2c00      	cmp	r4, #0
 8002eca:	d1f7      	bne.n	8002ebc <_fwalk_sglue+0xc>
 8002ecc:	4630      	mov	r0, r6
 8002ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ed2:	89ab      	ldrh	r3, [r5, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d907      	bls.n	8002ee8 <_fwalk_sglue+0x38>
 8002ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002edc:	3301      	adds	r3, #1
 8002ede:	d003      	beq.n	8002ee8 <_fwalk_sglue+0x38>
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	47c0      	blx	r8
 8002ee6:	4306      	orrs	r6, r0
 8002ee8:	3568      	adds	r5, #104	@ 0x68
 8002eea:	e7e9      	b.n	8002ec0 <_fwalk_sglue+0x10>

08002eec <sniprintf>:
 8002eec:	b40c      	push	{r2, r3}
 8002eee:	b530      	push	{r4, r5, lr}
 8002ef0:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <sniprintf+0x68>)
 8002ef2:	1e0c      	subs	r4, r1, #0
 8002ef4:	681d      	ldr	r5, [r3, #0]
 8002ef6:	b09d      	sub	sp, #116	@ 0x74
 8002ef8:	da08      	bge.n	8002f0c <sniprintf+0x20>
 8002efa:	238b      	movs	r3, #139	@ 0x8b
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295
 8002f02:	b01d      	add	sp, #116	@ 0x74
 8002f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f08:	b002      	add	sp, #8
 8002f0a:	4770      	bx	lr
 8002f0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002f1a:	bf14      	ite	ne
 8002f1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002f20:	4623      	moveq	r3, r4
 8002f22:	9304      	str	r3, [sp, #16]
 8002f24:	9307      	str	r3, [sp, #28]
 8002f26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f2a:	9002      	str	r0, [sp, #8]
 8002f2c:	9006      	str	r0, [sp, #24]
 8002f2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002f34:	ab21      	add	r3, sp, #132	@ 0x84
 8002f36:	a902      	add	r1, sp, #8
 8002f38:	4628      	mov	r0, r5
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	f001 fbfe 	bl	800473c <_svfiprintf_r>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	bfbc      	itt	lt
 8002f44:	238b      	movlt	r3, #139	@ 0x8b
 8002f46:	602b      	strlt	r3, [r5, #0]
 8002f48:	2c00      	cmp	r4, #0
 8002f4a:	d0da      	beq.n	8002f02 <sniprintf+0x16>
 8002f4c:	9b02      	ldr	r3, [sp, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e7d6      	b.n	8002f02 <sniprintf+0x16>
 8002f54:	20000060 	.word	0x20000060

08002f58 <__sread>:
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f60:	f000 f86c 	bl	800303c <_read_r>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	bfab      	itete	ge
 8002f68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8002f6c:	181b      	addge	r3, r3, r0
 8002f6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f72:	bfac      	ite	ge
 8002f74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f76:	81a3      	strhlt	r3, [r4, #12]
 8002f78:	bd10      	pop	{r4, pc}

08002f7a <__swrite>:
 8002f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7e:	461f      	mov	r7, r3
 8002f80:	898b      	ldrh	r3, [r1, #12]
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	4605      	mov	r5, r0
 8002f86:	460c      	mov	r4, r1
 8002f88:	4616      	mov	r6, r2
 8002f8a:	d505      	bpl.n	8002f98 <__swrite+0x1e>
 8002f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f90:	2302      	movs	r3, #2
 8002f92:	2200      	movs	r2, #0
 8002f94:	f000 f840 	bl	8003018 <_lseek_r>
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fa2:	81a3      	strh	r3, [r4, #12]
 8002fa4:	4632      	mov	r2, r6
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	4628      	mov	r0, r5
 8002faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fae:	f000 b857 	b.w	8003060 <_write_r>

08002fb2 <__sseek>:
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fba:	f000 f82d 	bl	8003018 <_lseek_r>
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	bf15      	itete	ne
 8002fc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fce:	81a3      	strheq	r3, [r4, #12]
 8002fd0:	bf18      	it	ne
 8002fd2:	81a3      	strhne	r3, [r4, #12]
 8002fd4:	bd10      	pop	{r4, pc}

08002fd6 <__sclose>:
 8002fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fda:	f000 b80d 	b.w	8002ff8 <_close_r>

08002fde <memset>:
 8002fde:	4402      	add	r2, r0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d100      	bne.n	8002fe8 <memset+0xa>
 8002fe6:	4770      	bx	lr
 8002fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8002fec:	e7f9      	b.n	8002fe2 <memset+0x4>
	...

08002ff0 <_localeconv_r>:
 8002ff0:	4800      	ldr	r0, [pc, #0]	@ (8002ff4 <_localeconv_r+0x4>)
 8002ff2:	4770      	bx	lr
 8002ff4:	200001a0 	.word	0x200001a0

08002ff8 <_close_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4d06      	ldr	r5, [pc, #24]	@ (8003014 <_close_r+0x1c>)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	4604      	mov	r4, r0
 8003000:	4608      	mov	r0, r1
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	f7fe ffd5 	bl	8001fb2 <_close>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d102      	bne.n	8003012 <_close_r+0x1a>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	b103      	cbz	r3, 8003012 <_close_r+0x1a>
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	2000038c 	.word	0x2000038c

08003018 <_lseek_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4d07      	ldr	r5, [pc, #28]	@ (8003038 <_lseek_r+0x20>)
 800301c:	4604      	mov	r4, r0
 800301e:	4608      	mov	r0, r1
 8003020:	4611      	mov	r1, r2
 8003022:	2200      	movs	r2, #0
 8003024:	602a      	str	r2, [r5, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	f7fe ffea 	bl	8002000 <_lseek>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d102      	bne.n	8003036 <_lseek_r+0x1e>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	b103      	cbz	r3, 8003036 <_lseek_r+0x1e>
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	bd38      	pop	{r3, r4, r5, pc}
 8003038:	2000038c 	.word	0x2000038c

0800303c <_read_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	4d07      	ldr	r5, [pc, #28]	@ (800305c <_read_r+0x20>)
 8003040:	4604      	mov	r4, r0
 8003042:	4608      	mov	r0, r1
 8003044:	4611      	mov	r1, r2
 8003046:	2200      	movs	r2, #0
 8003048:	602a      	str	r2, [r5, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f7fe ff78 	bl	8001f40 <_read>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d102      	bne.n	800305a <_read_r+0x1e>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b103      	cbz	r3, 800305a <_read_r+0x1e>
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	bd38      	pop	{r3, r4, r5, pc}
 800305c:	2000038c 	.word	0x2000038c

08003060 <_write_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4d07      	ldr	r5, [pc, #28]	@ (8003080 <_write_r+0x20>)
 8003064:	4604      	mov	r4, r0
 8003066:	4608      	mov	r0, r1
 8003068:	4611      	mov	r1, r2
 800306a:	2200      	movs	r2, #0
 800306c:	602a      	str	r2, [r5, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	f7fe ff83 	bl	8001f7a <_write>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d102      	bne.n	800307e <_write_r+0x1e>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	b103      	cbz	r3, 800307e <_write_r+0x1e>
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	2000038c 	.word	0x2000038c

08003084 <__errno>:
 8003084:	4b01      	ldr	r3, [pc, #4]	@ (800308c <__errno+0x8>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000060 	.word	0x20000060

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	4d0d      	ldr	r5, [pc, #52]	@ (80030c8 <__libc_init_array+0x38>)
 8003094:	4c0d      	ldr	r4, [pc, #52]	@ (80030cc <__libc_init_array+0x3c>)
 8003096:	1b64      	subs	r4, r4, r5
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	2600      	movs	r6, #0
 800309c:	42a6      	cmp	r6, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	4d0b      	ldr	r5, [pc, #44]	@ (80030d0 <__libc_init_array+0x40>)
 80030a2:	4c0c      	ldr	r4, [pc, #48]	@ (80030d4 <__libc_init_array+0x44>)
 80030a4:	f002 f868 	bl	8005178 <_init>
 80030a8:	1b64      	subs	r4, r4, r5
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2600      	movs	r6, #0
 80030ae:	42a6      	cmp	r6, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b8:	4798      	blx	r3
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c2:	4798      	blx	r3
 80030c4:	3601      	adds	r6, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	08005734 	.word	0x08005734
 80030cc:	08005734 	.word	0x08005734
 80030d0:	08005734 	.word	0x08005734
 80030d4:	08005738 	.word	0x08005738

080030d8 <__retarget_lock_init_recursive>:
 80030d8:	4770      	bx	lr

080030da <__retarget_lock_acquire_recursive>:
 80030da:	4770      	bx	lr

080030dc <__retarget_lock_release_recursive>:
 80030dc:	4770      	bx	lr

080030de <quorem>:
 80030de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e2:	6903      	ldr	r3, [r0, #16]
 80030e4:	690c      	ldr	r4, [r1, #16]
 80030e6:	42a3      	cmp	r3, r4
 80030e8:	4607      	mov	r7, r0
 80030ea:	db7e      	blt.n	80031ea <quorem+0x10c>
 80030ec:	3c01      	subs	r4, #1
 80030ee:	f101 0814 	add.w	r8, r1, #20
 80030f2:	00a3      	lsls	r3, r4, #2
 80030f4:	f100 0514 	add.w	r5, r0, #20
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003108:	3301      	adds	r3, #1
 800310a:	429a      	cmp	r2, r3
 800310c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003110:	fbb2 f6f3 	udiv	r6, r2, r3
 8003114:	d32e      	bcc.n	8003174 <quorem+0x96>
 8003116:	f04f 0a00 	mov.w	sl, #0
 800311a:	46c4      	mov	ip, r8
 800311c:	46ae      	mov	lr, r5
 800311e:	46d3      	mov	fp, sl
 8003120:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003124:	b298      	uxth	r0, r3
 8003126:	fb06 a000 	mla	r0, r6, r0, sl
 800312a:	0c02      	lsrs	r2, r0, #16
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	fb06 2303 	mla	r3, r6, r3, r2
 8003132:	f8de 2000 	ldr.w	r2, [lr]
 8003136:	b280      	uxth	r0, r0
 8003138:	b292      	uxth	r2, r2
 800313a:	1a12      	subs	r2, r2, r0
 800313c:	445a      	add	r2, fp
 800313e:	f8de 0000 	ldr.w	r0, [lr]
 8003142:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003146:	b29b      	uxth	r3, r3
 8003148:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800314c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003150:	b292      	uxth	r2, r2
 8003152:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003156:	45e1      	cmp	r9, ip
 8003158:	f84e 2b04 	str.w	r2, [lr], #4
 800315c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003160:	d2de      	bcs.n	8003120 <quorem+0x42>
 8003162:	9b00      	ldr	r3, [sp, #0]
 8003164:	58eb      	ldr	r3, [r5, r3]
 8003166:	b92b      	cbnz	r3, 8003174 <quorem+0x96>
 8003168:	9b01      	ldr	r3, [sp, #4]
 800316a:	3b04      	subs	r3, #4
 800316c:	429d      	cmp	r5, r3
 800316e:	461a      	mov	r2, r3
 8003170:	d32f      	bcc.n	80031d2 <quorem+0xf4>
 8003172:	613c      	str	r4, [r7, #16]
 8003174:	4638      	mov	r0, r7
 8003176:	f001 f97d 	bl	8004474 <__mcmp>
 800317a:	2800      	cmp	r0, #0
 800317c:	db25      	blt.n	80031ca <quorem+0xec>
 800317e:	4629      	mov	r1, r5
 8003180:	2000      	movs	r0, #0
 8003182:	f858 2b04 	ldr.w	r2, [r8], #4
 8003186:	f8d1 c000 	ldr.w	ip, [r1]
 800318a:	fa1f fe82 	uxth.w	lr, r2
 800318e:	fa1f f38c 	uxth.w	r3, ip
 8003192:	eba3 030e 	sub.w	r3, r3, lr
 8003196:	4403      	add	r3, r0
 8003198:	0c12      	lsrs	r2, r2, #16
 800319a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800319e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031a8:	45c1      	cmp	r9, r8
 80031aa:	f841 3b04 	str.w	r3, [r1], #4
 80031ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80031b2:	d2e6      	bcs.n	8003182 <quorem+0xa4>
 80031b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031bc:	b922      	cbnz	r2, 80031c8 <quorem+0xea>
 80031be:	3b04      	subs	r3, #4
 80031c0:	429d      	cmp	r5, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	d30b      	bcc.n	80031de <quorem+0x100>
 80031c6:	613c      	str	r4, [r7, #16]
 80031c8:	3601      	adds	r6, #1
 80031ca:	4630      	mov	r0, r6
 80031cc:	b003      	add	sp, #12
 80031ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	3b04      	subs	r3, #4
 80031d6:	2a00      	cmp	r2, #0
 80031d8:	d1cb      	bne.n	8003172 <quorem+0x94>
 80031da:	3c01      	subs	r4, #1
 80031dc:	e7c6      	b.n	800316c <quorem+0x8e>
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	3b04      	subs	r3, #4
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d1ef      	bne.n	80031c6 <quorem+0xe8>
 80031e6:	3c01      	subs	r4, #1
 80031e8:	e7ea      	b.n	80031c0 <quorem+0xe2>
 80031ea:	2000      	movs	r0, #0
 80031ec:	e7ee      	b.n	80031cc <quorem+0xee>
	...

080031f0 <_dtoa_r>:
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	69c7      	ldr	r7, [r0, #28]
 80031f6:	b097      	sub	sp, #92	@ 0x5c
 80031f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80031fc:	ec55 4b10 	vmov	r4, r5, d0
 8003200:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003202:	9107      	str	r1, [sp, #28]
 8003204:	4681      	mov	r9, r0
 8003206:	920c      	str	r2, [sp, #48]	@ 0x30
 8003208:	9311      	str	r3, [sp, #68]	@ 0x44
 800320a:	b97f      	cbnz	r7, 800322c <_dtoa_r+0x3c>
 800320c:	2010      	movs	r0, #16
 800320e:	f000 fe09 	bl	8003e24 <malloc>
 8003212:	4602      	mov	r2, r0
 8003214:	f8c9 001c 	str.w	r0, [r9, #28]
 8003218:	b920      	cbnz	r0, 8003224 <_dtoa_r+0x34>
 800321a:	4ba9      	ldr	r3, [pc, #676]	@ (80034c0 <_dtoa_r+0x2d0>)
 800321c:	21ef      	movs	r1, #239	@ 0xef
 800321e:	48a9      	ldr	r0, [pc, #676]	@ (80034c4 <_dtoa_r+0x2d4>)
 8003220:	f001 fc6c 	bl	8004afc <__assert_func>
 8003224:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003228:	6007      	str	r7, [r0, #0]
 800322a:	60c7      	str	r7, [r0, #12]
 800322c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	b159      	cbz	r1, 800324c <_dtoa_r+0x5c>
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	604a      	str	r2, [r1, #4]
 8003238:	2301      	movs	r3, #1
 800323a:	4093      	lsls	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
 800323e:	4648      	mov	r0, r9
 8003240:	f000 fee6 	bl	8004010 <_Bfree>
 8003244:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	1e2b      	subs	r3, r5, #0
 800324e:	bfb9      	ittee	lt
 8003250:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003254:	9305      	strlt	r3, [sp, #20]
 8003256:	2300      	movge	r3, #0
 8003258:	6033      	strge	r3, [r6, #0]
 800325a:	9f05      	ldr	r7, [sp, #20]
 800325c:	4b9a      	ldr	r3, [pc, #616]	@ (80034c8 <_dtoa_r+0x2d8>)
 800325e:	bfbc      	itt	lt
 8003260:	2201      	movlt	r2, #1
 8003262:	6032      	strlt	r2, [r6, #0]
 8003264:	43bb      	bics	r3, r7
 8003266:	d112      	bne.n	800328e <_dtoa_r+0x9e>
 8003268:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800326a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003274:	4323      	orrs	r3, r4
 8003276:	f000 855a 	beq.w	8003d2e <_dtoa_r+0xb3e>
 800327a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800327c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80034dc <_dtoa_r+0x2ec>
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 855c 	beq.w	8003d3e <_dtoa_r+0xb4e>
 8003286:	f10a 0303 	add.w	r3, sl, #3
 800328a:	f000 bd56 	b.w	8003d3a <_dtoa_r+0xb4a>
 800328e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003292:	2200      	movs	r2, #0
 8003294:	ec51 0b17 	vmov	r0, r1, d7
 8003298:	2300      	movs	r3, #0
 800329a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800329e:	f7fd fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80032a2:	4680      	mov	r8, r0
 80032a4:	b158      	cbz	r0, 80032be <_dtoa_r+0xce>
 80032a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80032a8:	2301      	movs	r3, #1
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80032ae:	b113      	cbz	r3, 80032b6 <_dtoa_r+0xc6>
 80032b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80032b2:	4b86      	ldr	r3, [pc, #536]	@ (80034cc <_dtoa_r+0x2dc>)
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80034e0 <_dtoa_r+0x2f0>
 80032ba:	f000 bd40 	b.w	8003d3e <_dtoa_r+0xb4e>
 80032be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80032c2:	aa14      	add	r2, sp, #80	@ 0x50
 80032c4:	a915      	add	r1, sp, #84	@ 0x54
 80032c6:	4648      	mov	r0, r9
 80032c8:	f001 f984 	bl	80045d4 <__d2b>
 80032cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80032d0:	9002      	str	r0, [sp, #8]
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d078      	beq.n	80033c8 <_dtoa_r+0x1d8>
 80032d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80032d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80032dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80032e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80032ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80032f0:	4619      	mov	r1, r3
 80032f2:	2200      	movs	r2, #0
 80032f4:	4b76      	ldr	r3, [pc, #472]	@ (80034d0 <_dtoa_r+0x2e0>)
 80032f6:	f7fc ffcf 	bl	8000298 <__aeabi_dsub>
 80032fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80034a8 <_dtoa_r+0x2b8>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fd f982 	bl	8000608 <__aeabi_dmul>
 8003304:	a36a      	add	r3, pc, #424	@ (adr r3, 80034b0 <_dtoa_r+0x2c0>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fc ffc7 	bl	800029c <__adddf3>
 800330e:	4604      	mov	r4, r0
 8003310:	4630      	mov	r0, r6
 8003312:	460d      	mov	r5, r1
 8003314:	f7fd f90e 	bl	8000534 <__aeabi_i2d>
 8003318:	a367      	add	r3, pc, #412	@ (adr r3, 80034b8 <_dtoa_r+0x2c8>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fd f973 	bl	8000608 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fc ffb7 	bl	800029c <__adddf3>
 800332e:	4604      	mov	r4, r0
 8003330:	460d      	mov	r5, r1
 8003332:	f7fd fc19 	bl	8000b68 <__aeabi_d2iz>
 8003336:	2200      	movs	r2, #0
 8003338:	4607      	mov	r7, r0
 800333a:	2300      	movs	r3, #0
 800333c:	4620      	mov	r0, r4
 800333e:	4629      	mov	r1, r5
 8003340:	f7fd fbd4 	bl	8000aec <__aeabi_dcmplt>
 8003344:	b140      	cbz	r0, 8003358 <_dtoa_r+0x168>
 8003346:	4638      	mov	r0, r7
 8003348:	f7fd f8f4 	bl	8000534 <__aeabi_i2d>
 800334c:	4622      	mov	r2, r4
 800334e:	462b      	mov	r3, r5
 8003350:	f7fd fbc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003354:	b900      	cbnz	r0, 8003358 <_dtoa_r+0x168>
 8003356:	3f01      	subs	r7, #1
 8003358:	2f16      	cmp	r7, #22
 800335a:	d852      	bhi.n	8003402 <_dtoa_r+0x212>
 800335c:	4b5d      	ldr	r3, [pc, #372]	@ (80034d4 <_dtoa_r+0x2e4>)
 800335e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800336a:	f7fd fbbf 	bl	8000aec <__aeabi_dcmplt>
 800336e:	2800      	cmp	r0, #0
 8003370:	d049      	beq.n	8003406 <_dtoa_r+0x216>
 8003372:	3f01      	subs	r7, #1
 8003374:	2300      	movs	r3, #0
 8003376:	9310      	str	r3, [sp, #64]	@ 0x40
 8003378:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800337a:	1b9b      	subs	r3, r3, r6
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	bf45      	ittet	mi
 8003380:	f1c3 0301 	rsbmi	r3, r3, #1
 8003384:	9300      	strmi	r3, [sp, #0]
 8003386:	2300      	movpl	r3, #0
 8003388:	2300      	movmi	r3, #0
 800338a:	9206      	str	r2, [sp, #24]
 800338c:	bf54      	ite	pl
 800338e:	9300      	strpl	r3, [sp, #0]
 8003390:	9306      	strmi	r3, [sp, #24]
 8003392:	2f00      	cmp	r7, #0
 8003394:	db39      	blt.n	800340a <_dtoa_r+0x21a>
 8003396:	9b06      	ldr	r3, [sp, #24]
 8003398:	970d      	str	r7, [sp, #52]	@ 0x34
 800339a:	443b      	add	r3, r7
 800339c:	9306      	str	r3, [sp, #24]
 800339e:	2300      	movs	r3, #0
 80033a0:	9308      	str	r3, [sp, #32]
 80033a2:	9b07      	ldr	r3, [sp, #28]
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	d863      	bhi.n	8003470 <_dtoa_r+0x280>
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	bfc4      	itt	gt
 80033ac:	3b04      	subgt	r3, #4
 80033ae:	9307      	strgt	r3, [sp, #28]
 80033b0:	9b07      	ldr	r3, [sp, #28]
 80033b2:	f1a3 0302 	sub.w	r3, r3, #2
 80033b6:	bfcc      	ite	gt
 80033b8:	2400      	movgt	r4, #0
 80033ba:	2401      	movle	r4, #1
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d863      	bhi.n	8003488 <_dtoa_r+0x298>
 80033c0:	e8df f003 	tbb	[pc, r3]
 80033c4:	2b375452 	.word	0x2b375452
 80033c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80033cc:	441e      	add	r6, r3
 80033ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	bfc1      	itttt	gt
 80033d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80033da:	409f      	lslgt	r7, r3
 80033dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80033e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80033e4:	bfd6      	itet	le
 80033e6:	f1c3 0320 	rsble	r3, r3, #32
 80033ea:	ea47 0003 	orrgt.w	r0, r7, r3
 80033ee:	fa04 f003 	lslle.w	r0, r4, r3
 80033f2:	f7fd f88f 	bl	8000514 <__aeabi_ui2d>
 80033f6:	2201      	movs	r2, #1
 80033f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80033fc:	3e01      	subs	r6, #1
 80033fe:	9212      	str	r2, [sp, #72]	@ 0x48
 8003400:	e776      	b.n	80032f0 <_dtoa_r+0x100>
 8003402:	2301      	movs	r3, #1
 8003404:	e7b7      	b.n	8003376 <_dtoa_r+0x186>
 8003406:	9010      	str	r0, [sp, #64]	@ 0x40
 8003408:	e7b6      	b.n	8003378 <_dtoa_r+0x188>
 800340a:	9b00      	ldr	r3, [sp, #0]
 800340c:	1bdb      	subs	r3, r3, r7
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	427b      	negs	r3, r7
 8003412:	9308      	str	r3, [sp, #32]
 8003414:	2300      	movs	r3, #0
 8003416:	930d      	str	r3, [sp, #52]	@ 0x34
 8003418:	e7c3      	b.n	80033a2 <_dtoa_r+0x1b2>
 800341a:	2301      	movs	r3, #1
 800341c:	9309      	str	r3, [sp, #36]	@ 0x24
 800341e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003420:	eb07 0b03 	add.w	fp, r7, r3
 8003424:	f10b 0301 	add.w	r3, fp, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	bfb8      	it	lt
 800342e:	2301      	movlt	r3, #1
 8003430:	e006      	b.n	8003440 <_dtoa_r+0x250>
 8003432:	2301      	movs	r3, #1
 8003434:	9309      	str	r3, [sp, #36]	@ 0x24
 8003436:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	dd28      	ble.n	800348e <_dtoa_r+0x29e>
 800343c:	469b      	mov	fp, r3
 800343e:	9303      	str	r3, [sp, #12]
 8003440:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003444:	2100      	movs	r1, #0
 8003446:	2204      	movs	r2, #4
 8003448:	f102 0514 	add.w	r5, r2, #20
 800344c:	429d      	cmp	r5, r3
 800344e:	d926      	bls.n	800349e <_dtoa_r+0x2ae>
 8003450:	6041      	str	r1, [r0, #4]
 8003452:	4648      	mov	r0, r9
 8003454:	f000 fd9c 	bl	8003f90 <_Balloc>
 8003458:	4682      	mov	sl, r0
 800345a:	2800      	cmp	r0, #0
 800345c:	d142      	bne.n	80034e4 <_dtoa_r+0x2f4>
 800345e:	4b1e      	ldr	r3, [pc, #120]	@ (80034d8 <_dtoa_r+0x2e8>)
 8003460:	4602      	mov	r2, r0
 8003462:	f240 11af 	movw	r1, #431	@ 0x1af
 8003466:	e6da      	b.n	800321e <_dtoa_r+0x2e>
 8003468:	2300      	movs	r3, #0
 800346a:	e7e3      	b.n	8003434 <_dtoa_r+0x244>
 800346c:	2300      	movs	r3, #0
 800346e:	e7d5      	b.n	800341c <_dtoa_r+0x22c>
 8003470:	2401      	movs	r4, #1
 8003472:	2300      	movs	r3, #0
 8003474:	9307      	str	r3, [sp, #28]
 8003476:	9409      	str	r4, [sp, #36]	@ 0x24
 8003478:	f04f 3bff 	mov.w	fp, #4294967295
 800347c:	2200      	movs	r2, #0
 800347e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003482:	2312      	movs	r3, #18
 8003484:	920c      	str	r2, [sp, #48]	@ 0x30
 8003486:	e7db      	b.n	8003440 <_dtoa_r+0x250>
 8003488:	2301      	movs	r3, #1
 800348a:	9309      	str	r3, [sp, #36]	@ 0x24
 800348c:	e7f4      	b.n	8003478 <_dtoa_r+0x288>
 800348e:	f04f 0b01 	mov.w	fp, #1
 8003492:	f8cd b00c 	str.w	fp, [sp, #12]
 8003496:	465b      	mov	r3, fp
 8003498:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800349c:	e7d0      	b.n	8003440 <_dtoa_r+0x250>
 800349e:	3101      	adds	r1, #1
 80034a0:	0052      	lsls	r2, r2, #1
 80034a2:	e7d1      	b.n	8003448 <_dtoa_r+0x258>
 80034a4:	f3af 8000 	nop.w
 80034a8:	636f4361 	.word	0x636f4361
 80034ac:	3fd287a7 	.word	0x3fd287a7
 80034b0:	8b60c8b3 	.word	0x8b60c8b3
 80034b4:	3fc68a28 	.word	0x3fc68a28
 80034b8:	509f79fb 	.word	0x509f79fb
 80034bc:	3fd34413 	.word	0x3fd34413
 80034c0:	080053f5 	.word	0x080053f5
 80034c4:	0800540c 	.word	0x0800540c
 80034c8:	7ff00000 	.word	0x7ff00000
 80034cc:	080053c5 	.word	0x080053c5
 80034d0:	3ff80000 	.word	0x3ff80000
 80034d4:	08005560 	.word	0x08005560
 80034d8:	08005464 	.word	0x08005464
 80034dc:	080053f1 	.word	0x080053f1
 80034e0:	080053c4 	.word	0x080053c4
 80034e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80034e8:	6018      	str	r0, [r3, #0]
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	2b0e      	cmp	r3, #14
 80034ee:	f200 80a1 	bhi.w	8003634 <_dtoa_r+0x444>
 80034f2:	2c00      	cmp	r4, #0
 80034f4:	f000 809e 	beq.w	8003634 <_dtoa_r+0x444>
 80034f8:	2f00      	cmp	r7, #0
 80034fa:	dd33      	ble.n	8003564 <_dtoa_r+0x374>
 80034fc:	4b9c      	ldr	r3, [pc, #624]	@ (8003770 <_dtoa_r+0x580>)
 80034fe:	f007 020f 	and.w	r2, r7, #15
 8003502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003506:	ed93 7b00 	vldr	d7, [r3]
 800350a:	05f8      	lsls	r0, r7, #23
 800350c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003510:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003514:	d516      	bpl.n	8003544 <_dtoa_r+0x354>
 8003516:	4b97      	ldr	r3, [pc, #604]	@ (8003774 <_dtoa_r+0x584>)
 8003518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800351c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003520:	f7fd f99c 	bl	800085c <__aeabi_ddiv>
 8003524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003528:	f004 040f 	and.w	r4, r4, #15
 800352c:	2603      	movs	r6, #3
 800352e:	4d91      	ldr	r5, [pc, #580]	@ (8003774 <_dtoa_r+0x584>)
 8003530:	b954      	cbnz	r4, 8003548 <_dtoa_r+0x358>
 8003532:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800353a:	f7fd f98f 	bl	800085c <__aeabi_ddiv>
 800353e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003542:	e028      	b.n	8003596 <_dtoa_r+0x3a6>
 8003544:	2602      	movs	r6, #2
 8003546:	e7f2      	b.n	800352e <_dtoa_r+0x33e>
 8003548:	07e1      	lsls	r1, r4, #31
 800354a:	d508      	bpl.n	800355e <_dtoa_r+0x36e>
 800354c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003550:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003554:	f7fd f858 	bl	8000608 <__aeabi_dmul>
 8003558:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800355c:	3601      	adds	r6, #1
 800355e:	1064      	asrs	r4, r4, #1
 8003560:	3508      	adds	r5, #8
 8003562:	e7e5      	b.n	8003530 <_dtoa_r+0x340>
 8003564:	f000 80af 	beq.w	80036c6 <_dtoa_r+0x4d6>
 8003568:	427c      	negs	r4, r7
 800356a:	4b81      	ldr	r3, [pc, #516]	@ (8003770 <_dtoa_r+0x580>)
 800356c:	4d81      	ldr	r5, [pc, #516]	@ (8003774 <_dtoa_r+0x584>)
 800356e:	f004 020f 	and.w	r2, r4, #15
 8003572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800357e:	f7fd f843 	bl	8000608 <__aeabi_dmul>
 8003582:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003586:	1124      	asrs	r4, r4, #4
 8003588:	2300      	movs	r3, #0
 800358a:	2602      	movs	r6, #2
 800358c:	2c00      	cmp	r4, #0
 800358e:	f040 808f 	bne.w	80036b0 <_dtoa_r+0x4c0>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1d3      	bne.n	800353e <_dtoa_r+0x34e>
 8003596:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003598:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8094 	beq.w	80036ca <_dtoa_r+0x4da>
 80035a2:	4b75      	ldr	r3, [pc, #468]	@ (8003778 <_dtoa_r+0x588>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	4620      	mov	r0, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	f7fd fa9f 	bl	8000aec <__aeabi_dcmplt>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	f000 808b 	beq.w	80036ca <_dtoa_r+0x4da>
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8087 	beq.w	80036ca <_dtoa_r+0x4da>
 80035bc:	f1bb 0f00 	cmp.w	fp, #0
 80035c0:	dd34      	ble.n	800362c <_dtoa_r+0x43c>
 80035c2:	4620      	mov	r0, r4
 80035c4:	4b6d      	ldr	r3, [pc, #436]	@ (800377c <_dtoa_r+0x58c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	4629      	mov	r1, r5
 80035ca:	f7fd f81d 	bl	8000608 <__aeabi_dmul>
 80035ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035d2:	f107 38ff 	add.w	r8, r7, #4294967295
 80035d6:	3601      	adds	r6, #1
 80035d8:	465c      	mov	r4, fp
 80035da:	4630      	mov	r0, r6
 80035dc:	f7fc ffaa 	bl	8000534 <__aeabi_i2d>
 80035e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035e4:	f7fd f810 	bl	8000608 <__aeabi_dmul>
 80035e8:	4b65      	ldr	r3, [pc, #404]	@ (8003780 <_dtoa_r+0x590>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	f7fc fe56 	bl	800029c <__adddf3>
 80035f0:	4605      	mov	r5, r0
 80035f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80035f6:	2c00      	cmp	r4, #0
 80035f8:	d16a      	bne.n	80036d0 <_dtoa_r+0x4e0>
 80035fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035fe:	4b61      	ldr	r3, [pc, #388]	@ (8003784 <_dtoa_r+0x594>)
 8003600:	2200      	movs	r2, #0
 8003602:	f7fc fe49 	bl	8000298 <__aeabi_dsub>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800360e:	462a      	mov	r2, r5
 8003610:	4633      	mov	r3, r6
 8003612:	f7fd fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8003616:	2800      	cmp	r0, #0
 8003618:	f040 8298 	bne.w	8003b4c <_dtoa_r+0x95c>
 800361c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003620:	462a      	mov	r2, r5
 8003622:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003626:	f7fd fa61 	bl	8000aec <__aeabi_dcmplt>
 800362a:	bb38      	cbnz	r0, 800367c <_dtoa_r+0x48c>
 800362c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8003630:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003634:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003636:	2b00      	cmp	r3, #0
 8003638:	f2c0 8157 	blt.w	80038ea <_dtoa_r+0x6fa>
 800363c:	2f0e      	cmp	r7, #14
 800363e:	f300 8154 	bgt.w	80038ea <_dtoa_r+0x6fa>
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <_dtoa_r+0x580>)
 8003644:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003648:	ed93 7b00 	vldr	d7, [r3]
 800364c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800364e:	2b00      	cmp	r3, #0
 8003650:	ed8d 7b00 	vstr	d7, [sp]
 8003654:	f280 80e5 	bge.w	8003822 <_dtoa_r+0x632>
 8003658:	9b03      	ldr	r3, [sp, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f300 80e1 	bgt.w	8003822 <_dtoa_r+0x632>
 8003660:	d10c      	bne.n	800367c <_dtoa_r+0x48c>
 8003662:	4b48      	ldr	r3, [pc, #288]	@ (8003784 <_dtoa_r+0x594>)
 8003664:	2200      	movs	r2, #0
 8003666:	ec51 0b17 	vmov	r0, r1, d7
 800366a:	f7fc ffcd 	bl	8000608 <__aeabi_dmul>
 800366e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003672:	f7fd fa4f 	bl	8000b14 <__aeabi_dcmpge>
 8003676:	2800      	cmp	r0, #0
 8003678:	f000 8266 	beq.w	8003b48 <_dtoa_r+0x958>
 800367c:	2400      	movs	r4, #0
 800367e:	4625      	mov	r5, r4
 8003680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003682:	4656      	mov	r6, sl
 8003684:	ea6f 0803 	mvn.w	r8, r3
 8003688:	2700      	movs	r7, #0
 800368a:	4621      	mov	r1, r4
 800368c:	4648      	mov	r0, r9
 800368e:	f000 fcbf 	bl	8004010 <_Bfree>
 8003692:	2d00      	cmp	r5, #0
 8003694:	f000 80bd 	beq.w	8003812 <_dtoa_r+0x622>
 8003698:	b12f      	cbz	r7, 80036a6 <_dtoa_r+0x4b6>
 800369a:	42af      	cmp	r7, r5
 800369c:	d003      	beq.n	80036a6 <_dtoa_r+0x4b6>
 800369e:	4639      	mov	r1, r7
 80036a0:	4648      	mov	r0, r9
 80036a2:	f000 fcb5 	bl	8004010 <_Bfree>
 80036a6:	4629      	mov	r1, r5
 80036a8:	4648      	mov	r0, r9
 80036aa:	f000 fcb1 	bl	8004010 <_Bfree>
 80036ae:	e0b0      	b.n	8003812 <_dtoa_r+0x622>
 80036b0:	07e2      	lsls	r2, r4, #31
 80036b2:	d505      	bpl.n	80036c0 <_dtoa_r+0x4d0>
 80036b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80036b8:	f7fc ffa6 	bl	8000608 <__aeabi_dmul>
 80036bc:	3601      	adds	r6, #1
 80036be:	2301      	movs	r3, #1
 80036c0:	1064      	asrs	r4, r4, #1
 80036c2:	3508      	adds	r5, #8
 80036c4:	e762      	b.n	800358c <_dtoa_r+0x39c>
 80036c6:	2602      	movs	r6, #2
 80036c8:	e765      	b.n	8003596 <_dtoa_r+0x3a6>
 80036ca:	9c03      	ldr	r4, [sp, #12]
 80036cc:	46b8      	mov	r8, r7
 80036ce:	e784      	b.n	80035da <_dtoa_r+0x3ea>
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <_dtoa_r+0x580>)
 80036d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80036d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80036d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80036dc:	4454      	add	r4, sl
 80036de:	2900      	cmp	r1, #0
 80036e0:	d054      	beq.n	800378c <_dtoa_r+0x59c>
 80036e2:	4929      	ldr	r1, [pc, #164]	@ (8003788 <_dtoa_r+0x598>)
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fd f8b9 	bl	800085c <__aeabi_ddiv>
 80036ea:	4633      	mov	r3, r6
 80036ec:	462a      	mov	r2, r5
 80036ee:	f7fc fdd3 	bl	8000298 <__aeabi_dsub>
 80036f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80036f6:	4656      	mov	r6, sl
 80036f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036fc:	f7fd fa34 	bl	8000b68 <__aeabi_d2iz>
 8003700:	4605      	mov	r5, r0
 8003702:	f7fc ff17 	bl	8000534 <__aeabi_i2d>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800370e:	f7fc fdc3 	bl	8000298 <__aeabi_dsub>
 8003712:	3530      	adds	r5, #48	@ 0x30
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800371c:	f806 5b01 	strb.w	r5, [r6], #1
 8003720:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003724:	f7fd f9e2 	bl	8000aec <__aeabi_dcmplt>
 8003728:	2800      	cmp	r0, #0
 800372a:	d172      	bne.n	8003812 <_dtoa_r+0x622>
 800372c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003730:	4911      	ldr	r1, [pc, #68]	@ (8003778 <_dtoa_r+0x588>)
 8003732:	2000      	movs	r0, #0
 8003734:	f7fc fdb0 	bl	8000298 <__aeabi_dsub>
 8003738:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800373c:	f7fd f9d6 	bl	8000aec <__aeabi_dcmplt>
 8003740:	2800      	cmp	r0, #0
 8003742:	f040 80b4 	bne.w	80038ae <_dtoa_r+0x6be>
 8003746:	42a6      	cmp	r6, r4
 8003748:	f43f af70 	beq.w	800362c <_dtoa_r+0x43c>
 800374c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003750:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <_dtoa_r+0x58c>)
 8003752:	2200      	movs	r2, #0
 8003754:	f7fc ff58 	bl	8000608 <__aeabi_dmul>
 8003758:	4b08      	ldr	r3, [pc, #32]	@ (800377c <_dtoa_r+0x58c>)
 800375a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800375e:	2200      	movs	r2, #0
 8003760:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003764:	f7fc ff50 	bl	8000608 <__aeabi_dmul>
 8003768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800376c:	e7c4      	b.n	80036f8 <_dtoa_r+0x508>
 800376e:	bf00      	nop
 8003770:	08005560 	.word	0x08005560
 8003774:	08005538 	.word	0x08005538
 8003778:	3ff00000 	.word	0x3ff00000
 800377c:	40240000 	.word	0x40240000
 8003780:	401c0000 	.word	0x401c0000
 8003784:	40140000 	.word	0x40140000
 8003788:	3fe00000 	.word	0x3fe00000
 800378c:	4631      	mov	r1, r6
 800378e:	4628      	mov	r0, r5
 8003790:	f7fc ff3a 	bl	8000608 <__aeabi_dmul>
 8003794:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003798:	9413      	str	r4, [sp, #76]	@ 0x4c
 800379a:	4656      	mov	r6, sl
 800379c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037a0:	f7fd f9e2 	bl	8000b68 <__aeabi_d2iz>
 80037a4:	4605      	mov	r5, r0
 80037a6:	f7fc fec5 	bl	8000534 <__aeabi_i2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037b2:	f7fc fd71 	bl	8000298 <__aeabi_dsub>
 80037b6:	3530      	adds	r5, #48	@ 0x30
 80037b8:	f806 5b01 	strb.w	r5, [r6], #1
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	d124      	bne.n	8003816 <_dtoa_r+0x626>
 80037cc:	4baf      	ldr	r3, [pc, #700]	@ (8003a8c <_dtoa_r+0x89c>)
 80037ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80037d2:	f7fc fd63 	bl	800029c <__adddf3>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037de:	f7fd f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d163      	bne.n	80038ae <_dtoa_r+0x6be>
 80037e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80037ea:	49a8      	ldr	r1, [pc, #672]	@ (8003a8c <_dtoa_r+0x89c>)
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7fc fd53 	bl	8000298 <__aeabi_dsub>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037fa:	f7fd f977 	bl	8000aec <__aeabi_dcmplt>
 80037fe:	2800      	cmp	r0, #0
 8003800:	f43f af14 	beq.w	800362c <_dtoa_r+0x43c>
 8003804:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003806:	1e73      	subs	r3, r6, #1
 8003808:	9313      	str	r3, [sp, #76]	@ 0x4c
 800380a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800380e:	2b30      	cmp	r3, #48	@ 0x30
 8003810:	d0f8      	beq.n	8003804 <_dtoa_r+0x614>
 8003812:	4647      	mov	r7, r8
 8003814:	e03b      	b.n	800388e <_dtoa_r+0x69e>
 8003816:	4b9e      	ldr	r3, [pc, #632]	@ (8003a90 <_dtoa_r+0x8a0>)
 8003818:	f7fc fef6 	bl	8000608 <__aeabi_dmul>
 800381c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003820:	e7bc      	b.n	800379c <_dtoa_r+0x5ac>
 8003822:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003826:	4656      	mov	r6, sl
 8003828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fd f814 	bl	800085c <__aeabi_ddiv>
 8003834:	f7fd f998 	bl	8000b68 <__aeabi_d2iz>
 8003838:	4680      	mov	r8, r0
 800383a:	f7fc fe7b 	bl	8000534 <__aeabi_i2d>
 800383e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003842:	f7fc fee1 	bl	8000608 <__aeabi_dmul>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4620      	mov	r0, r4
 800384c:	4629      	mov	r1, r5
 800384e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003852:	f7fc fd21 	bl	8000298 <__aeabi_dsub>
 8003856:	f806 4b01 	strb.w	r4, [r6], #1
 800385a:	9d03      	ldr	r5, [sp, #12]
 800385c:	eba6 040a 	sub.w	r4, r6, sl
 8003860:	42a5      	cmp	r5, r4
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	d133      	bne.n	80038d0 <_dtoa_r+0x6e0>
 8003868:	f7fc fd18 	bl	800029c <__adddf3>
 800386c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003870:	4604      	mov	r4, r0
 8003872:	460d      	mov	r5, r1
 8003874:	f7fd f958 	bl	8000b28 <__aeabi_dcmpgt>
 8003878:	b9c0      	cbnz	r0, 80038ac <_dtoa_r+0x6bc>
 800387a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800387e:	4620      	mov	r0, r4
 8003880:	4629      	mov	r1, r5
 8003882:	f7fd f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8003886:	b110      	cbz	r0, 800388e <_dtoa_r+0x69e>
 8003888:	f018 0f01 	tst.w	r8, #1
 800388c:	d10e      	bne.n	80038ac <_dtoa_r+0x6bc>
 800388e:	9902      	ldr	r1, [sp, #8]
 8003890:	4648      	mov	r0, r9
 8003892:	f000 fbbd 	bl	8004010 <_Bfree>
 8003896:	2300      	movs	r3, #0
 8003898:	7033      	strb	r3, [r6, #0]
 800389a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800389c:	3701      	adds	r7, #1
 800389e:	601f      	str	r7, [r3, #0]
 80038a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 824b 	beq.w	8003d3e <_dtoa_r+0xb4e>
 80038a8:	601e      	str	r6, [r3, #0]
 80038aa:	e248      	b.n	8003d3e <_dtoa_r+0xb4e>
 80038ac:	46b8      	mov	r8, r7
 80038ae:	4633      	mov	r3, r6
 80038b0:	461e      	mov	r6, r3
 80038b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038b6:	2a39      	cmp	r2, #57	@ 0x39
 80038b8:	d106      	bne.n	80038c8 <_dtoa_r+0x6d8>
 80038ba:	459a      	cmp	sl, r3
 80038bc:	d1f8      	bne.n	80038b0 <_dtoa_r+0x6c0>
 80038be:	2230      	movs	r2, #48	@ 0x30
 80038c0:	f108 0801 	add.w	r8, r8, #1
 80038c4:	f88a 2000 	strb.w	r2, [sl]
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	3201      	adds	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e7a0      	b.n	8003812 <_dtoa_r+0x622>
 80038d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a90 <_dtoa_r+0x8a0>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	f7fc fe98 	bl	8000608 <__aeabi_dmul>
 80038d8:	2200      	movs	r2, #0
 80038da:	2300      	movs	r3, #0
 80038dc:	4604      	mov	r4, r0
 80038de:	460d      	mov	r5, r1
 80038e0:	f7fd f8fa 	bl	8000ad8 <__aeabi_dcmpeq>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d09f      	beq.n	8003828 <_dtoa_r+0x638>
 80038e8:	e7d1      	b.n	800388e <_dtoa_r+0x69e>
 80038ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038ec:	2a00      	cmp	r2, #0
 80038ee:	f000 80ea 	beq.w	8003ac6 <_dtoa_r+0x8d6>
 80038f2:	9a07      	ldr	r2, [sp, #28]
 80038f4:	2a01      	cmp	r2, #1
 80038f6:	f300 80cd 	bgt.w	8003a94 <_dtoa_r+0x8a4>
 80038fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	f000 80c1 	beq.w	8003a84 <_dtoa_r+0x894>
 8003902:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003906:	9c08      	ldr	r4, [sp, #32]
 8003908:	9e00      	ldr	r6, [sp, #0]
 800390a:	9a00      	ldr	r2, [sp, #0]
 800390c:	441a      	add	r2, r3
 800390e:	9200      	str	r2, [sp, #0]
 8003910:	9a06      	ldr	r2, [sp, #24]
 8003912:	2101      	movs	r1, #1
 8003914:	441a      	add	r2, r3
 8003916:	4648      	mov	r0, r9
 8003918:	9206      	str	r2, [sp, #24]
 800391a:	f000 fc2d 	bl	8004178 <__i2b>
 800391e:	4605      	mov	r5, r0
 8003920:	b166      	cbz	r6, 800393c <_dtoa_r+0x74c>
 8003922:	9b06      	ldr	r3, [sp, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	dd09      	ble.n	800393c <_dtoa_r+0x74c>
 8003928:	42b3      	cmp	r3, r6
 800392a:	9a00      	ldr	r2, [sp, #0]
 800392c:	bfa8      	it	ge
 800392e:	4633      	movge	r3, r6
 8003930:	1ad2      	subs	r2, r2, r3
 8003932:	9200      	str	r2, [sp, #0]
 8003934:	9a06      	ldr	r2, [sp, #24]
 8003936:	1af6      	subs	r6, r6, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	9306      	str	r3, [sp, #24]
 800393c:	9b08      	ldr	r3, [sp, #32]
 800393e:	b30b      	cbz	r3, 8003984 <_dtoa_r+0x794>
 8003940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80c6 	beq.w	8003ad4 <_dtoa_r+0x8e4>
 8003948:	2c00      	cmp	r4, #0
 800394a:	f000 80c0 	beq.w	8003ace <_dtoa_r+0x8de>
 800394e:	4629      	mov	r1, r5
 8003950:	4622      	mov	r2, r4
 8003952:	4648      	mov	r0, r9
 8003954:	f000 fcc8 	bl	80042e8 <__pow5mult>
 8003958:	9a02      	ldr	r2, [sp, #8]
 800395a:	4601      	mov	r1, r0
 800395c:	4605      	mov	r5, r0
 800395e:	4648      	mov	r0, r9
 8003960:	f000 fc20 	bl	80041a4 <__multiply>
 8003964:	9902      	ldr	r1, [sp, #8]
 8003966:	4680      	mov	r8, r0
 8003968:	4648      	mov	r0, r9
 800396a:	f000 fb51 	bl	8004010 <_Bfree>
 800396e:	9b08      	ldr	r3, [sp, #32]
 8003970:	1b1b      	subs	r3, r3, r4
 8003972:	9308      	str	r3, [sp, #32]
 8003974:	f000 80b1 	beq.w	8003ada <_dtoa_r+0x8ea>
 8003978:	9a08      	ldr	r2, [sp, #32]
 800397a:	4641      	mov	r1, r8
 800397c:	4648      	mov	r0, r9
 800397e:	f000 fcb3 	bl	80042e8 <__pow5mult>
 8003982:	9002      	str	r0, [sp, #8]
 8003984:	2101      	movs	r1, #1
 8003986:	4648      	mov	r0, r9
 8003988:	f000 fbf6 	bl	8004178 <__i2b>
 800398c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800398e:	4604      	mov	r4, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 81d8 	beq.w	8003d46 <_dtoa_r+0xb56>
 8003996:	461a      	mov	r2, r3
 8003998:	4601      	mov	r1, r0
 800399a:	4648      	mov	r0, r9
 800399c:	f000 fca4 	bl	80042e8 <__pow5mult>
 80039a0:	9b07      	ldr	r3, [sp, #28]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	4604      	mov	r4, r0
 80039a6:	f300 809f 	bgt.w	8003ae8 <_dtoa_r+0x8f8>
 80039aa:	9b04      	ldr	r3, [sp, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 8097 	bne.w	8003ae0 <_dtoa_r+0x8f0>
 80039b2:	9b05      	ldr	r3, [sp, #20]
 80039b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 8093 	bne.w	8003ae4 <_dtoa_r+0x8f4>
 80039be:	9b05      	ldr	r3, [sp, #20]
 80039c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039c4:	0d1b      	lsrs	r3, r3, #20
 80039c6:	051b      	lsls	r3, r3, #20
 80039c8:	b133      	cbz	r3, 80039d8 <_dtoa_r+0x7e8>
 80039ca:	9b00      	ldr	r3, [sp, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	9b06      	ldr	r3, [sp, #24]
 80039d2:	3301      	adds	r3, #1
 80039d4:	9306      	str	r3, [sp, #24]
 80039d6:	2301      	movs	r3, #1
 80039d8:	9308      	str	r3, [sp, #32]
 80039da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 81b8 	beq.w	8003d52 <_dtoa_r+0xb62>
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80039e8:	6918      	ldr	r0, [r3, #16]
 80039ea:	f000 fb79 	bl	80040e0 <__hi0bits>
 80039ee:	f1c0 0020 	rsb	r0, r0, #32
 80039f2:	9b06      	ldr	r3, [sp, #24]
 80039f4:	4418      	add	r0, r3
 80039f6:	f010 001f 	ands.w	r0, r0, #31
 80039fa:	f000 8082 	beq.w	8003b02 <_dtoa_r+0x912>
 80039fe:	f1c0 0320 	rsb	r3, r0, #32
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	dd73      	ble.n	8003aee <_dtoa_r+0x8fe>
 8003a06:	9b00      	ldr	r3, [sp, #0]
 8003a08:	f1c0 001c 	rsb	r0, r0, #28
 8003a0c:	4403      	add	r3, r0
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	9b06      	ldr	r3, [sp, #24]
 8003a12:	4403      	add	r3, r0
 8003a14:	4406      	add	r6, r0
 8003a16:	9306      	str	r3, [sp, #24]
 8003a18:	9b00      	ldr	r3, [sp, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dd05      	ble.n	8003a2a <_dtoa_r+0x83a>
 8003a1e:	9902      	ldr	r1, [sp, #8]
 8003a20:	461a      	mov	r2, r3
 8003a22:	4648      	mov	r0, r9
 8003a24:	f000 fcba 	bl	800439c <__lshift>
 8003a28:	9002      	str	r0, [sp, #8]
 8003a2a:	9b06      	ldr	r3, [sp, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	dd05      	ble.n	8003a3c <_dtoa_r+0x84c>
 8003a30:	4621      	mov	r1, r4
 8003a32:	461a      	mov	r2, r3
 8003a34:	4648      	mov	r0, r9
 8003a36:	f000 fcb1 	bl	800439c <__lshift>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d061      	beq.n	8003b06 <_dtoa_r+0x916>
 8003a42:	9802      	ldr	r0, [sp, #8]
 8003a44:	4621      	mov	r1, r4
 8003a46:	f000 fd15 	bl	8004474 <__mcmp>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	da5b      	bge.n	8003b06 <_dtoa_r+0x916>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9902      	ldr	r1, [sp, #8]
 8003a52:	220a      	movs	r2, #10
 8003a54:	4648      	mov	r0, r9
 8003a56:	f000 fafd 	bl	8004054 <__multadd>
 8003a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a5c:	9002      	str	r0, [sp, #8]
 8003a5e:	f107 38ff 	add.w	r8, r7, #4294967295
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8177 	beq.w	8003d56 <_dtoa_r+0xb66>
 8003a68:	4629      	mov	r1, r5
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	220a      	movs	r2, #10
 8003a6e:	4648      	mov	r0, r9
 8003a70:	f000 faf0 	bl	8004054 <__multadd>
 8003a74:	f1bb 0f00 	cmp.w	fp, #0
 8003a78:	4605      	mov	r5, r0
 8003a7a:	dc6f      	bgt.n	8003b5c <_dtoa_r+0x96c>
 8003a7c:	9b07      	ldr	r3, [sp, #28]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	dc49      	bgt.n	8003b16 <_dtoa_r+0x926>
 8003a82:	e06b      	b.n	8003b5c <_dtoa_r+0x96c>
 8003a84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003a8a:	e73c      	b.n	8003906 <_dtoa_r+0x716>
 8003a8c:	3fe00000 	.word	0x3fe00000
 8003a90:	40240000 	.word	0x40240000
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	1e5c      	subs	r4, r3, #1
 8003a98:	9b08      	ldr	r3, [sp, #32]
 8003a9a:	42a3      	cmp	r3, r4
 8003a9c:	db09      	blt.n	8003ab2 <_dtoa_r+0x8c2>
 8003a9e:	1b1c      	subs	r4, r3, r4
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f6bf af30 	bge.w	8003908 <_dtoa_r+0x718>
 8003aa8:	9b00      	ldr	r3, [sp, #0]
 8003aaa:	9a03      	ldr	r2, [sp, #12]
 8003aac:	1a9e      	subs	r6, r3, r2
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e72b      	b.n	800390a <_dtoa_r+0x71a>
 8003ab2:	9b08      	ldr	r3, [sp, #32]
 8003ab4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003ab6:	9408      	str	r4, [sp, #32]
 8003ab8:	1ae3      	subs	r3, r4, r3
 8003aba:	441a      	add	r2, r3
 8003abc:	9e00      	ldr	r6, [sp, #0]
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	920d      	str	r2, [sp, #52]	@ 0x34
 8003ac2:	2400      	movs	r4, #0
 8003ac4:	e721      	b.n	800390a <_dtoa_r+0x71a>
 8003ac6:	9c08      	ldr	r4, [sp, #32]
 8003ac8:	9e00      	ldr	r6, [sp, #0]
 8003aca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003acc:	e728      	b.n	8003920 <_dtoa_r+0x730>
 8003ace:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003ad2:	e751      	b.n	8003978 <_dtoa_r+0x788>
 8003ad4:	9a08      	ldr	r2, [sp, #32]
 8003ad6:	9902      	ldr	r1, [sp, #8]
 8003ad8:	e750      	b.n	800397c <_dtoa_r+0x78c>
 8003ada:	f8cd 8008 	str.w	r8, [sp, #8]
 8003ade:	e751      	b.n	8003984 <_dtoa_r+0x794>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e779      	b.n	80039d8 <_dtoa_r+0x7e8>
 8003ae4:	9b04      	ldr	r3, [sp, #16]
 8003ae6:	e777      	b.n	80039d8 <_dtoa_r+0x7e8>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9308      	str	r3, [sp, #32]
 8003aec:	e779      	b.n	80039e2 <_dtoa_r+0x7f2>
 8003aee:	d093      	beq.n	8003a18 <_dtoa_r+0x828>
 8003af0:	9a00      	ldr	r2, [sp, #0]
 8003af2:	331c      	adds	r3, #28
 8003af4:	441a      	add	r2, r3
 8003af6:	9200      	str	r2, [sp, #0]
 8003af8:	9a06      	ldr	r2, [sp, #24]
 8003afa:	441a      	add	r2, r3
 8003afc:	441e      	add	r6, r3
 8003afe:	9206      	str	r2, [sp, #24]
 8003b00:	e78a      	b.n	8003a18 <_dtoa_r+0x828>
 8003b02:	4603      	mov	r3, r0
 8003b04:	e7f4      	b.n	8003af0 <_dtoa_r+0x900>
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	46b8      	mov	r8, r7
 8003b0c:	dc20      	bgt.n	8003b50 <_dtoa_r+0x960>
 8003b0e:	469b      	mov	fp, r3
 8003b10:	9b07      	ldr	r3, [sp, #28]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	dd1e      	ble.n	8003b54 <_dtoa_r+0x964>
 8003b16:	f1bb 0f00 	cmp.w	fp, #0
 8003b1a:	f47f adb1 	bne.w	8003680 <_dtoa_r+0x490>
 8003b1e:	4621      	mov	r1, r4
 8003b20:	465b      	mov	r3, fp
 8003b22:	2205      	movs	r2, #5
 8003b24:	4648      	mov	r0, r9
 8003b26:	f000 fa95 	bl	8004054 <__multadd>
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	9802      	ldr	r0, [sp, #8]
 8003b30:	f000 fca0 	bl	8004474 <__mcmp>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	f77f ada3 	ble.w	8003680 <_dtoa_r+0x490>
 8003b3a:	4656      	mov	r6, sl
 8003b3c:	2331      	movs	r3, #49	@ 0x31
 8003b3e:	f806 3b01 	strb.w	r3, [r6], #1
 8003b42:	f108 0801 	add.w	r8, r8, #1
 8003b46:	e59f      	b.n	8003688 <_dtoa_r+0x498>
 8003b48:	9c03      	ldr	r4, [sp, #12]
 8003b4a:	46b8      	mov	r8, r7
 8003b4c:	4625      	mov	r5, r4
 8003b4e:	e7f4      	b.n	8003b3a <_dtoa_r+0x94a>
 8003b50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8101 	beq.w	8003d5e <_dtoa_r+0xb6e>
 8003b5c:	2e00      	cmp	r6, #0
 8003b5e:	dd05      	ble.n	8003b6c <_dtoa_r+0x97c>
 8003b60:	4629      	mov	r1, r5
 8003b62:	4632      	mov	r2, r6
 8003b64:	4648      	mov	r0, r9
 8003b66:	f000 fc19 	bl	800439c <__lshift>
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	9b08      	ldr	r3, [sp, #32]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d05c      	beq.n	8003c2c <_dtoa_r+0xa3c>
 8003b72:	6869      	ldr	r1, [r5, #4]
 8003b74:	4648      	mov	r0, r9
 8003b76:	f000 fa0b 	bl	8003f90 <_Balloc>
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	b928      	cbnz	r0, 8003b8a <_dtoa_r+0x99a>
 8003b7e:	4b82      	ldr	r3, [pc, #520]	@ (8003d88 <_dtoa_r+0xb98>)
 8003b80:	4602      	mov	r2, r0
 8003b82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003b86:	f7ff bb4a 	b.w	800321e <_dtoa_r+0x2e>
 8003b8a:	692a      	ldr	r2, [r5, #16]
 8003b8c:	3202      	adds	r2, #2
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	f105 010c 	add.w	r1, r5, #12
 8003b94:	300c      	adds	r0, #12
 8003b96:	f000 ffa3 	bl	8004ae0 <memcpy>
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4631      	mov	r1, r6
 8003b9e:	4648      	mov	r0, r9
 8003ba0:	f000 fbfc 	bl	800439c <__lshift>
 8003ba4:	f10a 0301 	add.w	r3, sl, #1
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	eb0a 030b 	add.w	r3, sl, fp
 8003bae:	9308      	str	r3, [sp, #32]
 8003bb0:	9b04      	ldr	r3, [sp, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	462f      	mov	r7, r5
 8003bb8:	9306      	str	r3, [sp, #24]
 8003bba:	4605      	mov	r5, r0
 8003bbc:	9b00      	ldr	r3, [sp, #0]
 8003bbe:	9802      	ldr	r0, [sp, #8]
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	f103 3bff 	add.w	fp, r3, #4294967295
 8003bc6:	f7ff fa8a 	bl	80030de <quorem>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	3330      	adds	r3, #48	@ 0x30
 8003bce:	9003      	str	r0, [sp, #12]
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	9802      	ldr	r0, [sp, #8]
 8003bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bd6:	f000 fc4d 	bl	8004474 <__mcmp>
 8003bda:	462a      	mov	r2, r5
 8003bdc:	9004      	str	r0, [sp, #16]
 8003bde:	4621      	mov	r1, r4
 8003be0:	4648      	mov	r0, r9
 8003be2:	f000 fc63 	bl	80044ac <__mdiff>
 8003be6:	68c2      	ldr	r2, [r0, #12]
 8003be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bea:	4606      	mov	r6, r0
 8003bec:	bb02      	cbnz	r2, 8003c30 <_dtoa_r+0xa40>
 8003bee:	4601      	mov	r1, r0
 8003bf0:	9802      	ldr	r0, [sp, #8]
 8003bf2:	f000 fc3f 	bl	8004474 <__mcmp>
 8003bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4648      	mov	r0, r9
 8003bfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8003c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c02:	f000 fa05 	bl	8004010 <_Bfree>
 8003c06:	9b07      	ldr	r3, [sp, #28]
 8003c08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003c0a:	9e00      	ldr	r6, [sp, #0]
 8003c0c:	ea42 0103 	orr.w	r1, r2, r3
 8003c10:	9b06      	ldr	r3, [sp, #24]
 8003c12:	4319      	orrs	r1, r3
 8003c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c16:	d10d      	bne.n	8003c34 <_dtoa_r+0xa44>
 8003c18:	2b39      	cmp	r3, #57	@ 0x39
 8003c1a:	d027      	beq.n	8003c6c <_dtoa_r+0xa7c>
 8003c1c:	9a04      	ldr	r2, [sp, #16]
 8003c1e:	2a00      	cmp	r2, #0
 8003c20:	dd01      	ble.n	8003c26 <_dtoa_r+0xa36>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	3331      	adds	r3, #49	@ 0x31
 8003c26:	f88b 3000 	strb.w	r3, [fp]
 8003c2a:	e52e      	b.n	800368a <_dtoa_r+0x49a>
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	e7b9      	b.n	8003ba4 <_dtoa_r+0x9b4>
 8003c30:	2201      	movs	r2, #1
 8003c32:	e7e2      	b.n	8003bfa <_dtoa_r+0xa0a>
 8003c34:	9904      	ldr	r1, [sp, #16]
 8003c36:	2900      	cmp	r1, #0
 8003c38:	db04      	blt.n	8003c44 <_dtoa_r+0xa54>
 8003c3a:	9807      	ldr	r0, [sp, #28]
 8003c3c:	4301      	orrs	r1, r0
 8003c3e:	9806      	ldr	r0, [sp, #24]
 8003c40:	4301      	orrs	r1, r0
 8003c42:	d120      	bne.n	8003c86 <_dtoa_r+0xa96>
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	ddee      	ble.n	8003c26 <_dtoa_r+0xa36>
 8003c48:	9902      	ldr	r1, [sp, #8]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4648      	mov	r0, r9
 8003c50:	f000 fba4 	bl	800439c <__lshift>
 8003c54:	4621      	mov	r1, r4
 8003c56:	9002      	str	r0, [sp, #8]
 8003c58:	f000 fc0c 	bl	8004474 <__mcmp>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	9b00      	ldr	r3, [sp, #0]
 8003c60:	dc02      	bgt.n	8003c68 <_dtoa_r+0xa78>
 8003c62:	d1e0      	bne.n	8003c26 <_dtoa_r+0xa36>
 8003c64:	07da      	lsls	r2, r3, #31
 8003c66:	d5de      	bpl.n	8003c26 <_dtoa_r+0xa36>
 8003c68:	2b39      	cmp	r3, #57	@ 0x39
 8003c6a:	d1da      	bne.n	8003c22 <_dtoa_r+0xa32>
 8003c6c:	2339      	movs	r3, #57	@ 0x39
 8003c6e:	f88b 3000 	strb.w	r3, [fp]
 8003c72:	4633      	mov	r3, r6
 8003c74:	461e      	mov	r6, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003c7c:	2a39      	cmp	r2, #57	@ 0x39
 8003c7e:	d04e      	beq.n	8003d1e <_dtoa_r+0xb2e>
 8003c80:	3201      	adds	r2, #1
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	e501      	b.n	800368a <_dtoa_r+0x49a>
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	dd03      	ble.n	8003c92 <_dtoa_r+0xaa2>
 8003c8a:	2b39      	cmp	r3, #57	@ 0x39
 8003c8c:	d0ee      	beq.n	8003c6c <_dtoa_r+0xa7c>
 8003c8e:	3301      	adds	r3, #1
 8003c90:	e7c9      	b.n	8003c26 <_dtoa_r+0xa36>
 8003c92:	9a00      	ldr	r2, [sp, #0]
 8003c94:	9908      	ldr	r1, [sp, #32]
 8003c96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003c9a:	428a      	cmp	r2, r1
 8003c9c:	d028      	beq.n	8003cf0 <_dtoa_r+0xb00>
 8003c9e:	9902      	ldr	r1, [sp, #8]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	220a      	movs	r2, #10
 8003ca4:	4648      	mov	r0, r9
 8003ca6:	f000 f9d5 	bl	8004054 <__multadd>
 8003caa:	42af      	cmp	r7, r5
 8003cac:	9002      	str	r0, [sp, #8]
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f04f 020a 	mov.w	r2, #10
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	4648      	mov	r0, r9
 8003cba:	d107      	bne.n	8003ccc <_dtoa_r+0xadc>
 8003cbc:	f000 f9ca 	bl	8004054 <__multadd>
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	9b00      	ldr	r3, [sp, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	e777      	b.n	8003bbc <_dtoa_r+0x9cc>
 8003ccc:	f000 f9c2 	bl	8004054 <__multadd>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4607      	mov	r7, r0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	220a      	movs	r2, #10
 8003cd8:	4648      	mov	r0, r9
 8003cda:	f000 f9bb 	bl	8004054 <__multadd>
 8003cde:	4605      	mov	r5, r0
 8003ce0:	e7f0      	b.n	8003cc4 <_dtoa_r+0xad4>
 8003ce2:	f1bb 0f00 	cmp.w	fp, #0
 8003ce6:	bfcc      	ite	gt
 8003ce8:	465e      	movgt	r6, fp
 8003cea:	2601      	movle	r6, #1
 8003cec:	4456      	add	r6, sl
 8003cee:	2700      	movs	r7, #0
 8003cf0:	9902      	ldr	r1, [sp, #8]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4648      	mov	r0, r9
 8003cf8:	f000 fb50 	bl	800439c <__lshift>
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	9002      	str	r0, [sp, #8]
 8003d00:	f000 fbb8 	bl	8004474 <__mcmp>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	dcb4      	bgt.n	8003c72 <_dtoa_r+0xa82>
 8003d08:	d102      	bne.n	8003d10 <_dtoa_r+0xb20>
 8003d0a:	9b00      	ldr	r3, [sp, #0]
 8003d0c:	07db      	lsls	r3, r3, #31
 8003d0e:	d4b0      	bmi.n	8003c72 <_dtoa_r+0xa82>
 8003d10:	4633      	mov	r3, r6
 8003d12:	461e      	mov	r6, r3
 8003d14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d18:	2a30      	cmp	r2, #48	@ 0x30
 8003d1a:	d0fa      	beq.n	8003d12 <_dtoa_r+0xb22>
 8003d1c:	e4b5      	b.n	800368a <_dtoa_r+0x49a>
 8003d1e:	459a      	cmp	sl, r3
 8003d20:	d1a8      	bne.n	8003c74 <_dtoa_r+0xa84>
 8003d22:	2331      	movs	r3, #49	@ 0x31
 8003d24:	f108 0801 	add.w	r8, r8, #1
 8003d28:	f88a 3000 	strb.w	r3, [sl]
 8003d2c:	e4ad      	b.n	800368a <_dtoa_r+0x49a>
 8003d2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003d8c <_dtoa_r+0xb9c>
 8003d34:	b11b      	cbz	r3, 8003d3e <_dtoa_r+0xb4e>
 8003d36:	f10a 0308 	add.w	r3, sl, #8
 8003d3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4650      	mov	r0, sl
 8003d40:	b017      	add	sp, #92	@ 0x5c
 8003d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d46:	9b07      	ldr	r3, [sp, #28]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	f77f ae2e 	ble.w	80039aa <_dtoa_r+0x7ba>
 8003d4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d50:	9308      	str	r3, [sp, #32]
 8003d52:	2001      	movs	r0, #1
 8003d54:	e64d      	b.n	80039f2 <_dtoa_r+0x802>
 8003d56:	f1bb 0f00 	cmp.w	fp, #0
 8003d5a:	f77f aed9 	ble.w	8003b10 <_dtoa_r+0x920>
 8003d5e:	4656      	mov	r6, sl
 8003d60:	9802      	ldr	r0, [sp, #8]
 8003d62:	4621      	mov	r1, r4
 8003d64:	f7ff f9bb 	bl	80030de <quorem>
 8003d68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003d6c:	f806 3b01 	strb.w	r3, [r6], #1
 8003d70:	eba6 020a 	sub.w	r2, r6, sl
 8003d74:	4593      	cmp	fp, r2
 8003d76:	ddb4      	ble.n	8003ce2 <_dtoa_r+0xaf2>
 8003d78:	9902      	ldr	r1, [sp, #8]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	220a      	movs	r2, #10
 8003d7e:	4648      	mov	r0, r9
 8003d80:	f000 f968 	bl	8004054 <__multadd>
 8003d84:	9002      	str	r0, [sp, #8]
 8003d86:	e7eb      	b.n	8003d60 <_dtoa_r+0xb70>
 8003d88:	08005464 	.word	0x08005464
 8003d8c:	080053e8 	.word	0x080053e8

08003d90 <_free_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4605      	mov	r5, r0
 8003d94:	2900      	cmp	r1, #0
 8003d96:	d041      	beq.n	8003e1c <_free_r+0x8c>
 8003d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9c:	1f0c      	subs	r4, r1, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfb8      	it	lt
 8003da2:	18e4      	addlt	r4, r4, r3
 8003da4:	f000 f8e8 	bl	8003f78 <__malloc_lock>
 8003da8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e20 <_free_r+0x90>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	b933      	cbnz	r3, 8003dbc <_free_r+0x2c>
 8003dae:	6063      	str	r3, [r4, #4]
 8003db0:	6014      	str	r4, [r2, #0]
 8003db2:	4628      	mov	r0, r5
 8003db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003db8:	f000 b8e4 	b.w	8003f84 <__malloc_unlock>
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d908      	bls.n	8003dd2 <_free_r+0x42>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1821      	adds	r1, r4, r0
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	bf01      	itttt	eq
 8003dc8:	6819      	ldreq	r1, [r3, #0]
 8003dca:	685b      	ldreq	r3, [r3, #4]
 8003dcc:	1809      	addeq	r1, r1, r0
 8003dce:	6021      	streq	r1, [r4, #0]
 8003dd0:	e7ed      	b.n	8003dae <_free_r+0x1e>
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	b10b      	cbz	r3, 8003ddc <_free_r+0x4c>
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d9fa      	bls.n	8003dd2 <_free_r+0x42>
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	1850      	adds	r0, r2, r1
 8003de0:	42a0      	cmp	r0, r4
 8003de2:	d10b      	bne.n	8003dfc <_free_r+0x6c>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	4401      	add	r1, r0
 8003de8:	1850      	adds	r0, r2, r1
 8003dea:	4283      	cmp	r3, r0
 8003dec:	6011      	str	r1, [r2, #0]
 8003dee:	d1e0      	bne.n	8003db2 <_free_r+0x22>
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	6053      	str	r3, [r2, #4]
 8003df6:	4408      	add	r0, r1
 8003df8:	6010      	str	r0, [r2, #0]
 8003dfa:	e7da      	b.n	8003db2 <_free_r+0x22>
 8003dfc:	d902      	bls.n	8003e04 <_free_r+0x74>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	e7d6      	b.n	8003db2 <_free_r+0x22>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	1821      	adds	r1, r4, r0
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	bf04      	itt	eq
 8003e0c:	6819      	ldreq	r1, [r3, #0]
 8003e0e:	685b      	ldreq	r3, [r3, #4]
 8003e10:	6063      	str	r3, [r4, #4]
 8003e12:	bf04      	itt	eq
 8003e14:	1809      	addeq	r1, r1, r0
 8003e16:	6021      	streq	r1, [r4, #0]
 8003e18:	6054      	str	r4, [r2, #4]
 8003e1a:	e7ca      	b.n	8003db2 <_free_r+0x22>
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000398 	.word	0x20000398

08003e24 <malloc>:
 8003e24:	4b02      	ldr	r3, [pc, #8]	@ (8003e30 <malloc+0xc>)
 8003e26:	4601      	mov	r1, r0
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f000 b825 	b.w	8003e78 <_malloc_r>
 8003e2e:	bf00      	nop
 8003e30:	20000060 	.word	0x20000060

08003e34 <sbrk_aligned>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4e0f      	ldr	r6, [pc, #60]	@ (8003e74 <sbrk_aligned+0x40>)
 8003e38:	460c      	mov	r4, r1
 8003e3a:	6831      	ldr	r1, [r6, #0]
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	b911      	cbnz	r1, 8003e46 <sbrk_aligned+0x12>
 8003e40:	f000 fe3e 	bl	8004ac0 <_sbrk_r>
 8003e44:	6030      	str	r0, [r6, #0]
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 fe39 	bl	8004ac0 <_sbrk_r>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d103      	bne.n	8003e5a <sbrk_aligned+0x26>
 8003e52:	f04f 34ff 	mov.w	r4, #4294967295
 8003e56:	4620      	mov	r0, r4
 8003e58:	bd70      	pop	{r4, r5, r6, pc}
 8003e5a:	1cc4      	adds	r4, r0, #3
 8003e5c:	f024 0403 	bic.w	r4, r4, #3
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d0f8      	beq.n	8003e56 <sbrk_aligned+0x22>
 8003e64:	1a21      	subs	r1, r4, r0
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 fe2a 	bl	8004ac0 <_sbrk_r>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d1f2      	bne.n	8003e56 <sbrk_aligned+0x22>
 8003e70:	e7ef      	b.n	8003e52 <sbrk_aligned+0x1e>
 8003e72:	bf00      	nop
 8003e74:	20000394 	.word	0x20000394

08003e78 <_malloc_r>:
 8003e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e7c:	1ccd      	adds	r5, r1, #3
 8003e7e:	f025 0503 	bic.w	r5, r5, #3
 8003e82:	3508      	adds	r5, #8
 8003e84:	2d0c      	cmp	r5, #12
 8003e86:	bf38      	it	cc
 8003e88:	250c      	movcc	r5, #12
 8003e8a:	2d00      	cmp	r5, #0
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	db01      	blt.n	8003e94 <_malloc_r+0x1c>
 8003e90:	42a9      	cmp	r1, r5
 8003e92:	d904      	bls.n	8003e9e <_malloc_r+0x26>
 8003e94:	230c      	movs	r3, #12
 8003e96:	6033      	str	r3, [r6, #0]
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f74 <_malloc_r+0xfc>
 8003ea2:	f000 f869 	bl	8003f78 <__malloc_lock>
 8003ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eaa:	461c      	mov	r4, r3
 8003eac:	bb44      	cbnz	r4, 8003f00 <_malloc_r+0x88>
 8003eae:	4629      	mov	r1, r5
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f7ff ffbf 	bl	8003e34 <sbrk_aligned>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	4604      	mov	r4, r0
 8003eba:	d158      	bne.n	8003f6e <_malloc_r+0xf6>
 8003ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8003ec0:	4627      	mov	r7, r4
 8003ec2:	2f00      	cmp	r7, #0
 8003ec4:	d143      	bne.n	8003f4e <_malloc_r+0xd6>
 8003ec6:	2c00      	cmp	r4, #0
 8003ec8:	d04b      	beq.n	8003f62 <_malloc_r+0xea>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	4639      	mov	r1, r7
 8003ece:	4630      	mov	r0, r6
 8003ed0:	eb04 0903 	add.w	r9, r4, r3
 8003ed4:	f000 fdf4 	bl	8004ac0 <_sbrk_r>
 8003ed8:	4581      	cmp	r9, r0
 8003eda:	d142      	bne.n	8003f62 <_malloc_r+0xea>
 8003edc:	6821      	ldr	r1, [r4, #0]
 8003ede:	1a6d      	subs	r5, r5, r1
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff ffa6 	bl	8003e34 <sbrk_aligned>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d03a      	beq.n	8003f62 <_malloc_r+0xea>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	442b      	add	r3, r5
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	bb62      	cbnz	r2, 8003f54 <_malloc_r+0xdc>
 8003efa:	f8c8 7000 	str.w	r7, [r8]
 8003efe:	e00f      	b.n	8003f20 <_malloc_r+0xa8>
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	1b52      	subs	r2, r2, r5
 8003f04:	d420      	bmi.n	8003f48 <_malloc_r+0xd0>
 8003f06:	2a0b      	cmp	r2, #11
 8003f08:	d917      	bls.n	8003f3a <_malloc_r+0xc2>
 8003f0a:	1961      	adds	r1, r4, r5
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	6025      	str	r5, [r4, #0]
 8003f10:	bf18      	it	ne
 8003f12:	6059      	strne	r1, [r3, #4]
 8003f14:	6863      	ldr	r3, [r4, #4]
 8003f16:	bf08      	it	eq
 8003f18:	f8c8 1000 	streq.w	r1, [r8]
 8003f1c:	5162      	str	r2, [r4, r5]
 8003f1e:	604b      	str	r3, [r1, #4]
 8003f20:	4630      	mov	r0, r6
 8003f22:	f000 f82f 	bl	8003f84 <__malloc_unlock>
 8003f26:	f104 000b 	add.w	r0, r4, #11
 8003f2a:	1d23      	adds	r3, r4, #4
 8003f2c:	f020 0007 	bic.w	r0, r0, #7
 8003f30:	1ac2      	subs	r2, r0, r3
 8003f32:	bf1c      	itt	ne
 8003f34:	1a1b      	subne	r3, r3, r0
 8003f36:	50a3      	strne	r3, [r4, r2]
 8003f38:	e7af      	b.n	8003e9a <_malloc_r+0x22>
 8003f3a:	6862      	ldr	r2, [r4, #4]
 8003f3c:	42a3      	cmp	r3, r4
 8003f3e:	bf0c      	ite	eq
 8003f40:	f8c8 2000 	streq.w	r2, [r8]
 8003f44:	605a      	strne	r2, [r3, #4]
 8003f46:	e7eb      	b.n	8003f20 <_malloc_r+0xa8>
 8003f48:	4623      	mov	r3, r4
 8003f4a:	6864      	ldr	r4, [r4, #4]
 8003f4c:	e7ae      	b.n	8003eac <_malloc_r+0x34>
 8003f4e:	463c      	mov	r4, r7
 8003f50:	687f      	ldr	r7, [r7, #4]
 8003f52:	e7b6      	b.n	8003ec2 <_malloc_r+0x4a>
 8003f54:	461a      	mov	r2, r3
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	42a3      	cmp	r3, r4
 8003f5a:	d1fb      	bne.n	8003f54 <_malloc_r+0xdc>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6053      	str	r3, [r2, #4]
 8003f60:	e7de      	b.n	8003f20 <_malloc_r+0xa8>
 8003f62:	230c      	movs	r3, #12
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	4630      	mov	r0, r6
 8003f68:	f000 f80c 	bl	8003f84 <__malloc_unlock>
 8003f6c:	e794      	b.n	8003e98 <_malloc_r+0x20>
 8003f6e:	6005      	str	r5, [r0, #0]
 8003f70:	e7d6      	b.n	8003f20 <_malloc_r+0xa8>
 8003f72:	bf00      	nop
 8003f74:	20000398 	.word	0x20000398

08003f78 <__malloc_lock>:
 8003f78:	4801      	ldr	r0, [pc, #4]	@ (8003f80 <__malloc_lock+0x8>)
 8003f7a:	f7ff b8ae 	b.w	80030da <__retarget_lock_acquire_recursive>
 8003f7e:	bf00      	nop
 8003f80:	20000390 	.word	0x20000390

08003f84 <__malloc_unlock>:
 8003f84:	4801      	ldr	r0, [pc, #4]	@ (8003f8c <__malloc_unlock+0x8>)
 8003f86:	f7ff b8a9 	b.w	80030dc <__retarget_lock_release_recursive>
 8003f8a:	bf00      	nop
 8003f8c:	20000390 	.word	0x20000390

08003f90 <_Balloc>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	69c6      	ldr	r6, [r0, #28]
 8003f94:	4604      	mov	r4, r0
 8003f96:	460d      	mov	r5, r1
 8003f98:	b976      	cbnz	r6, 8003fb8 <_Balloc+0x28>
 8003f9a:	2010      	movs	r0, #16
 8003f9c:	f7ff ff42 	bl	8003e24 <malloc>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	61e0      	str	r0, [r4, #28]
 8003fa4:	b920      	cbnz	r0, 8003fb0 <_Balloc+0x20>
 8003fa6:	4b18      	ldr	r3, [pc, #96]	@ (8004008 <_Balloc+0x78>)
 8003fa8:	4818      	ldr	r0, [pc, #96]	@ (800400c <_Balloc+0x7c>)
 8003faa:	216b      	movs	r1, #107	@ 0x6b
 8003fac:	f000 fda6 	bl	8004afc <__assert_func>
 8003fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fb4:	6006      	str	r6, [r0, #0]
 8003fb6:	60c6      	str	r6, [r0, #12]
 8003fb8:	69e6      	ldr	r6, [r4, #28]
 8003fba:	68f3      	ldr	r3, [r6, #12]
 8003fbc:	b183      	cbz	r3, 8003fe0 <_Balloc+0x50>
 8003fbe:	69e3      	ldr	r3, [r4, #28]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003fc6:	b9b8      	cbnz	r0, 8003ff8 <_Balloc+0x68>
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f605 	lsl.w	r6, r1, r5
 8003fce:	1d72      	adds	r2, r6, #5
 8003fd0:	0092      	lsls	r2, r2, #2
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 fdb0 	bl	8004b38 <_calloc_r>
 8003fd8:	b160      	cbz	r0, 8003ff4 <_Balloc+0x64>
 8003fda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003fde:	e00e      	b.n	8003ffe <_Balloc+0x6e>
 8003fe0:	2221      	movs	r2, #33	@ 0x21
 8003fe2:	2104      	movs	r1, #4
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f000 fda7 	bl	8004b38 <_calloc_r>
 8003fea:	69e3      	ldr	r3, [r4, #28]
 8003fec:	60f0      	str	r0, [r6, #12]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e4      	bne.n	8003fbe <_Balloc+0x2e>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	6802      	ldr	r2, [r0, #0]
 8003ffa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003ffe:	2300      	movs	r3, #0
 8004000:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004004:	e7f7      	b.n	8003ff6 <_Balloc+0x66>
 8004006:	bf00      	nop
 8004008:	080053f5 	.word	0x080053f5
 800400c:	08005475 	.word	0x08005475

08004010 <_Bfree>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	69c6      	ldr	r6, [r0, #28]
 8004014:	4605      	mov	r5, r0
 8004016:	460c      	mov	r4, r1
 8004018:	b976      	cbnz	r6, 8004038 <_Bfree+0x28>
 800401a:	2010      	movs	r0, #16
 800401c:	f7ff ff02 	bl	8003e24 <malloc>
 8004020:	4602      	mov	r2, r0
 8004022:	61e8      	str	r0, [r5, #28]
 8004024:	b920      	cbnz	r0, 8004030 <_Bfree+0x20>
 8004026:	4b09      	ldr	r3, [pc, #36]	@ (800404c <_Bfree+0x3c>)
 8004028:	4809      	ldr	r0, [pc, #36]	@ (8004050 <_Bfree+0x40>)
 800402a:	218f      	movs	r1, #143	@ 0x8f
 800402c:	f000 fd66 	bl	8004afc <__assert_func>
 8004030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004034:	6006      	str	r6, [r0, #0]
 8004036:	60c6      	str	r6, [r0, #12]
 8004038:	b13c      	cbz	r4, 800404a <_Bfree+0x3a>
 800403a:	69eb      	ldr	r3, [r5, #28]
 800403c:	6862      	ldr	r2, [r4, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004044:	6021      	str	r1, [r4, #0]
 8004046:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	080053f5 	.word	0x080053f5
 8004050:	08005475 	.word	0x08005475

08004054 <__multadd>:
 8004054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004058:	690d      	ldr	r5, [r1, #16]
 800405a:	4607      	mov	r7, r0
 800405c:	460c      	mov	r4, r1
 800405e:	461e      	mov	r6, r3
 8004060:	f101 0c14 	add.w	ip, r1, #20
 8004064:	2000      	movs	r0, #0
 8004066:	f8dc 3000 	ldr.w	r3, [ip]
 800406a:	b299      	uxth	r1, r3
 800406c:	fb02 6101 	mla	r1, r2, r1, r6
 8004070:	0c1e      	lsrs	r6, r3, #16
 8004072:	0c0b      	lsrs	r3, r1, #16
 8004074:	fb02 3306 	mla	r3, r2, r6, r3
 8004078:	b289      	uxth	r1, r1
 800407a:	3001      	adds	r0, #1
 800407c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004080:	4285      	cmp	r5, r0
 8004082:	f84c 1b04 	str.w	r1, [ip], #4
 8004086:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800408a:	dcec      	bgt.n	8004066 <__multadd+0x12>
 800408c:	b30e      	cbz	r6, 80040d2 <__multadd+0x7e>
 800408e:	68a3      	ldr	r3, [r4, #8]
 8004090:	42ab      	cmp	r3, r5
 8004092:	dc19      	bgt.n	80040c8 <__multadd+0x74>
 8004094:	6861      	ldr	r1, [r4, #4]
 8004096:	4638      	mov	r0, r7
 8004098:	3101      	adds	r1, #1
 800409a:	f7ff ff79 	bl	8003f90 <_Balloc>
 800409e:	4680      	mov	r8, r0
 80040a0:	b928      	cbnz	r0, 80040ae <__multadd+0x5a>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <__multadd+0x84>)
 80040a6:	480d      	ldr	r0, [pc, #52]	@ (80040dc <__multadd+0x88>)
 80040a8:	21ba      	movs	r1, #186	@ 0xba
 80040aa:	f000 fd27 	bl	8004afc <__assert_func>
 80040ae:	6922      	ldr	r2, [r4, #16]
 80040b0:	3202      	adds	r2, #2
 80040b2:	f104 010c 	add.w	r1, r4, #12
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	300c      	adds	r0, #12
 80040ba:	f000 fd11 	bl	8004ae0 <memcpy>
 80040be:	4621      	mov	r1, r4
 80040c0:	4638      	mov	r0, r7
 80040c2:	f7ff ffa5 	bl	8004010 <_Bfree>
 80040c6:	4644      	mov	r4, r8
 80040c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80040cc:	3501      	adds	r5, #1
 80040ce:	615e      	str	r6, [r3, #20]
 80040d0:	6125      	str	r5, [r4, #16]
 80040d2:	4620      	mov	r0, r4
 80040d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d8:	08005464 	.word	0x08005464
 80040dc:	08005475 	.word	0x08005475

080040e0 <__hi0bits>:
 80040e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80040e4:	4603      	mov	r3, r0
 80040e6:	bf36      	itet	cc
 80040e8:	0403      	lslcc	r3, r0, #16
 80040ea:	2000      	movcs	r0, #0
 80040ec:	2010      	movcc	r0, #16
 80040ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f2:	bf3c      	itt	cc
 80040f4:	021b      	lslcc	r3, r3, #8
 80040f6:	3008      	addcc	r0, #8
 80040f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fc:	bf3c      	itt	cc
 80040fe:	011b      	lslcc	r3, r3, #4
 8004100:	3004      	addcc	r0, #4
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004106:	bf3c      	itt	cc
 8004108:	009b      	lslcc	r3, r3, #2
 800410a:	3002      	addcc	r0, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	db05      	blt.n	800411c <__hi0bits+0x3c>
 8004110:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004114:	f100 0001 	add.w	r0, r0, #1
 8004118:	bf08      	it	eq
 800411a:	2020      	moveq	r0, #32
 800411c:	4770      	bx	lr

0800411e <__lo0bits>:
 800411e:	6803      	ldr	r3, [r0, #0]
 8004120:	4602      	mov	r2, r0
 8004122:	f013 0007 	ands.w	r0, r3, #7
 8004126:	d00b      	beq.n	8004140 <__lo0bits+0x22>
 8004128:	07d9      	lsls	r1, r3, #31
 800412a:	d421      	bmi.n	8004170 <__lo0bits+0x52>
 800412c:	0798      	lsls	r0, r3, #30
 800412e:	bf49      	itett	mi
 8004130:	085b      	lsrmi	r3, r3, #1
 8004132:	089b      	lsrpl	r3, r3, #2
 8004134:	2001      	movmi	r0, #1
 8004136:	6013      	strmi	r3, [r2, #0]
 8004138:	bf5c      	itt	pl
 800413a:	6013      	strpl	r3, [r2, #0]
 800413c:	2002      	movpl	r0, #2
 800413e:	4770      	bx	lr
 8004140:	b299      	uxth	r1, r3
 8004142:	b909      	cbnz	r1, 8004148 <__lo0bits+0x2a>
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	2010      	movs	r0, #16
 8004148:	b2d9      	uxtb	r1, r3
 800414a:	b909      	cbnz	r1, 8004150 <__lo0bits+0x32>
 800414c:	3008      	adds	r0, #8
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	0719      	lsls	r1, r3, #28
 8004152:	bf04      	itt	eq
 8004154:	091b      	lsreq	r3, r3, #4
 8004156:	3004      	addeq	r0, #4
 8004158:	0799      	lsls	r1, r3, #30
 800415a:	bf04      	itt	eq
 800415c:	089b      	lsreq	r3, r3, #2
 800415e:	3002      	addeq	r0, #2
 8004160:	07d9      	lsls	r1, r3, #31
 8004162:	d403      	bmi.n	800416c <__lo0bits+0x4e>
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	f100 0001 	add.w	r0, r0, #1
 800416a:	d003      	beq.n	8004174 <__lo0bits+0x56>
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	4770      	bx	lr
 8004170:	2000      	movs	r0, #0
 8004172:	4770      	bx	lr
 8004174:	2020      	movs	r0, #32
 8004176:	4770      	bx	lr

08004178 <__i2b>:
 8004178:	b510      	push	{r4, lr}
 800417a:	460c      	mov	r4, r1
 800417c:	2101      	movs	r1, #1
 800417e:	f7ff ff07 	bl	8003f90 <_Balloc>
 8004182:	4602      	mov	r2, r0
 8004184:	b928      	cbnz	r0, 8004192 <__i2b+0x1a>
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <__i2b+0x24>)
 8004188:	4805      	ldr	r0, [pc, #20]	@ (80041a0 <__i2b+0x28>)
 800418a:	f240 1145 	movw	r1, #325	@ 0x145
 800418e:	f000 fcb5 	bl	8004afc <__assert_func>
 8004192:	2301      	movs	r3, #1
 8004194:	6144      	str	r4, [r0, #20]
 8004196:	6103      	str	r3, [r0, #16]
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	08005464 	.word	0x08005464
 80041a0:	08005475 	.word	0x08005475

080041a4 <__multiply>:
 80041a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a8:	4617      	mov	r7, r2
 80041aa:	690a      	ldr	r2, [r1, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	bfa8      	it	ge
 80041b2:	463b      	movge	r3, r7
 80041b4:	4689      	mov	r9, r1
 80041b6:	bfa4      	itt	ge
 80041b8:	460f      	movge	r7, r1
 80041ba:	4699      	movge	r9, r3
 80041bc:	693d      	ldr	r5, [r7, #16]
 80041be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	eb05 060a 	add.w	r6, r5, sl
 80041ca:	42b3      	cmp	r3, r6
 80041cc:	b085      	sub	sp, #20
 80041ce:	bfb8      	it	lt
 80041d0:	3101      	addlt	r1, #1
 80041d2:	f7ff fedd 	bl	8003f90 <_Balloc>
 80041d6:	b930      	cbnz	r0, 80041e6 <__multiply+0x42>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <__multiply+0x13c>)
 80041dc:	4841      	ldr	r0, [pc, #260]	@ (80042e4 <__multiply+0x140>)
 80041de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80041e2:	f000 fc8b 	bl	8004afc <__assert_func>
 80041e6:	f100 0414 	add.w	r4, r0, #20
 80041ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80041ee:	4623      	mov	r3, r4
 80041f0:	2200      	movs	r2, #0
 80041f2:	4573      	cmp	r3, lr
 80041f4:	d320      	bcc.n	8004238 <__multiply+0x94>
 80041f6:	f107 0814 	add.w	r8, r7, #20
 80041fa:	f109 0114 	add.w	r1, r9, #20
 80041fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004202:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004206:	9302      	str	r3, [sp, #8]
 8004208:	1beb      	subs	r3, r5, r7
 800420a:	3b15      	subs	r3, #21
 800420c:	f023 0303 	bic.w	r3, r3, #3
 8004210:	3304      	adds	r3, #4
 8004212:	3715      	adds	r7, #21
 8004214:	42bd      	cmp	r5, r7
 8004216:	bf38      	it	cc
 8004218:	2304      	movcc	r3, #4
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	9b02      	ldr	r3, [sp, #8]
 800421e:	9103      	str	r1, [sp, #12]
 8004220:	428b      	cmp	r3, r1
 8004222:	d80c      	bhi.n	800423e <__multiply+0x9a>
 8004224:	2e00      	cmp	r6, #0
 8004226:	dd03      	ble.n	8004230 <__multiply+0x8c>
 8004228:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800422c:	2b00      	cmp	r3, #0
 800422e:	d055      	beq.n	80042dc <__multiply+0x138>
 8004230:	6106      	str	r6, [r0, #16]
 8004232:	b005      	add	sp, #20
 8004234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004238:	f843 2b04 	str.w	r2, [r3], #4
 800423c:	e7d9      	b.n	80041f2 <__multiply+0x4e>
 800423e:	f8b1 a000 	ldrh.w	sl, [r1]
 8004242:	f1ba 0f00 	cmp.w	sl, #0
 8004246:	d01f      	beq.n	8004288 <__multiply+0xe4>
 8004248:	46c4      	mov	ip, r8
 800424a:	46a1      	mov	r9, r4
 800424c:	2700      	movs	r7, #0
 800424e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004252:	f8d9 3000 	ldr.w	r3, [r9]
 8004256:	fa1f fb82 	uxth.w	fp, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004260:	443b      	add	r3, r7
 8004262:	f8d9 7000 	ldr.w	r7, [r9]
 8004266:	0c12      	lsrs	r2, r2, #16
 8004268:	0c3f      	lsrs	r7, r7, #16
 800426a:	fb0a 7202 	mla	r2, sl, r2, r7
 800426e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004272:	b29b      	uxth	r3, r3
 8004274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004278:	4565      	cmp	r5, ip
 800427a:	f849 3b04 	str.w	r3, [r9], #4
 800427e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004282:	d8e4      	bhi.n	800424e <__multiply+0xaa>
 8004284:	9b01      	ldr	r3, [sp, #4]
 8004286:	50e7      	str	r7, [r4, r3]
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800428e:	3104      	adds	r1, #4
 8004290:	f1b9 0f00 	cmp.w	r9, #0
 8004294:	d020      	beq.n	80042d8 <__multiply+0x134>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	4647      	mov	r7, r8
 800429a:	46a4      	mov	ip, r4
 800429c:	f04f 0a00 	mov.w	sl, #0
 80042a0:	f8b7 b000 	ldrh.w	fp, [r7]
 80042a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80042a8:	fb09 220b 	mla	r2, r9, fp, r2
 80042ac:	4452      	add	r2, sl
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042b4:	f84c 3b04 	str.w	r3, [ip], #4
 80042b8:	f857 3b04 	ldr.w	r3, [r7], #4
 80042bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042c0:	f8bc 3000 	ldrh.w	r3, [ip]
 80042c4:	fb09 330a 	mla	r3, r9, sl, r3
 80042c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80042cc:	42bd      	cmp	r5, r7
 80042ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042d2:	d8e5      	bhi.n	80042a0 <__multiply+0xfc>
 80042d4:	9a01      	ldr	r2, [sp, #4]
 80042d6:	50a3      	str	r3, [r4, r2]
 80042d8:	3404      	adds	r4, #4
 80042da:	e79f      	b.n	800421c <__multiply+0x78>
 80042dc:	3e01      	subs	r6, #1
 80042de:	e7a1      	b.n	8004224 <__multiply+0x80>
 80042e0:	08005464 	.word	0x08005464
 80042e4:	08005475 	.word	0x08005475

080042e8 <__pow5mult>:
 80042e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ec:	4615      	mov	r5, r2
 80042ee:	f012 0203 	ands.w	r2, r2, #3
 80042f2:	4607      	mov	r7, r0
 80042f4:	460e      	mov	r6, r1
 80042f6:	d007      	beq.n	8004308 <__pow5mult+0x20>
 80042f8:	4c25      	ldr	r4, [pc, #148]	@ (8004390 <__pow5mult+0xa8>)
 80042fa:	3a01      	subs	r2, #1
 80042fc:	2300      	movs	r3, #0
 80042fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004302:	f7ff fea7 	bl	8004054 <__multadd>
 8004306:	4606      	mov	r6, r0
 8004308:	10ad      	asrs	r5, r5, #2
 800430a:	d03d      	beq.n	8004388 <__pow5mult+0xa0>
 800430c:	69fc      	ldr	r4, [r7, #28]
 800430e:	b97c      	cbnz	r4, 8004330 <__pow5mult+0x48>
 8004310:	2010      	movs	r0, #16
 8004312:	f7ff fd87 	bl	8003e24 <malloc>
 8004316:	4602      	mov	r2, r0
 8004318:	61f8      	str	r0, [r7, #28]
 800431a:	b928      	cbnz	r0, 8004328 <__pow5mult+0x40>
 800431c:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <__pow5mult+0xac>)
 800431e:	481e      	ldr	r0, [pc, #120]	@ (8004398 <__pow5mult+0xb0>)
 8004320:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004324:	f000 fbea 	bl	8004afc <__assert_func>
 8004328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800432c:	6004      	str	r4, [r0, #0]
 800432e:	60c4      	str	r4, [r0, #12]
 8004330:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004338:	b94c      	cbnz	r4, 800434e <__pow5mult+0x66>
 800433a:	f240 2171 	movw	r1, #625	@ 0x271
 800433e:	4638      	mov	r0, r7
 8004340:	f7ff ff1a 	bl	8004178 <__i2b>
 8004344:	2300      	movs	r3, #0
 8004346:	f8c8 0008 	str.w	r0, [r8, #8]
 800434a:	4604      	mov	r4, r0
 800434c:	6003      	str	r3, [r0, #0]
 800434e:	f04f 0900 	mov.w	r9, #0
 8004352:	07eb      	lsls	r3, r5, #31
 8004354:	d50a      	bpl.n	800436c <__pow5mult+0x84>
 8004356:	4631      	mov	r1, r6
 8004358:	4622      	mov	r2, r4
 800435a:	4638      	mov	r0, r7
 800435c:	f7ff ff22 	bl	80041a4 <__multiply>
 8004360:	4631      	mov	r1, r6
 8004362:	4680      	mov	r8, r0
 8004364:	4638      	mov	r0, r7
 8004366:	f7ff fe53 	bl	8004010 <_Bfree>
 800436a:	4646      	mov	r6, r8
 800436c:	106d      	asrs	r5, r5, #1
 800436e:	d00b      	beq.n	8004388 <__pow5mult+0xa0>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	b938      	cbnz	r0, 8004384 <__pow5mult+0x9c>
 8004374:	4622      	mov	r2, r4
 8004376:	4621      	mov	r1, r4
 8004378:	4638      	mov	r0, r7
 800437a:	f7ff ff13 	bl	80041a4 <__multiply>
 800437e:	6020      	str	r0, [r4, #0]
 8004380:	f8c0 9000 	str.w	r9, [r0]
 8004384:	4604      	mov	r4, r0
 8004386:	e7e4      	b.n	8004352 <__pow5mult+0x6a>
 8004388:	4630      	mov	r0, r6
 800438a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438e:	bf00      	nop
 8004390:	08005528 	.word	0x08005528
 8004394:	080053f5 	.word	0x080053f5
 8004398:	08005475 	.word	0x08005475

0800439c <__lshift>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	460c      	mov	r4, r1
 80043a2:	6849      	ldr	r1, [r1, #4]
 80043a4:	6923      	ldr	r3, [r4, #16]
 80043a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80043aa:	68a3      	ldr	r3, [r4, #8]
 80043ac:	4607      	mov	r7, r0
 80043ae:	4691      	mov	r9, r2
 80043b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80043b4:	f108 0601 	add.w	r6, r8, #1
 80043b8:	42b3      	cmp	r3, r6
 80043ba:	db0b      	blt.n	80043d4 <__lshift+0x38>
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff fde7 	bl	8003f90 <_Balloc>
 80043c2:	4605      	mov	r5, r0
 80043c4:	b948      	cbnz	r0, 80043da <__lshift+0x3e>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b28      	ldr	r3, [pc, #160]	@ (800446c <__lshift+0xd0>)
 80043ca:	4829      	ldr	r0, [pc, #164]	@ (8004470 <__lshift+0xd4>)
 80043cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80043d0:	f000 fb94 	bl	8004afc <__assert_func>
 80043d4:	3101      	adds	r1, #1
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	e7ee      	b.n	80043b8 <__lshift+0x1c>
 80043da:	2300      	movs	r3, #0
 80043dc:	f100 0114 	add.w	r1, r0, #20
 80043e0:	f100 0210 	add.w	r2, r0, #16
 80043e4:	4618      	mov	r0, r3
 80043e6:	4553      	cmp	r3, sl
 80043e8:	db33      	blt.n	8004452 <__lshift+0xb6>
 80043ea:	6920      	ldr	r0, [r4, #16]
 80043ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043f0:	f104 0314 	add.w	r3, r4, #20
 80043f4:	f019 091f 	ands.w	r9, r9, #31
 80043f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80043fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004400:	d02b      	beq.n	800445a <__lshift+0xbe>
 8004402:	f1c9 0e20 	rsb	lr, r9, #32
 8004406:	468a      	mov	sl, r1
 8004408:	2200      	movs	r2, #0
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	fa00 f009 	lsl.w	r0, r0, r9
 8004410:	4310      	orrs	r0, r2
 8004412:	f84a 0b04 	str.w	r0, [sl], #4
 8004416:	f853 2b04 	ldr.w	r2, [r3], #4
 800441a:	459c      	cmp	ip, r3
 800441c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004420:	d8f3      	bhi.n	800440a <__lshift+0x6e>
 8004422:	ebac 0304 	sub.w	r3, ip, r4
 8004426:	3b15      	subs	r3, #21
 8004428:	f023 0303 	bic.w	r3, r3, #3
 800442c:	3304      	adds	r3, #4
 800442e:	f104 0015 	add.w	r0, r4, #21
 8004432:	4560      	cmp	r0, ip
 8004434:	bf88      	it	hi
 8004436:	2304      	movhi	r3, #4
 8004438:	50ca      	str	r2, [r1, r3]
 800443a:	b10a      	cbz	r2, 8004440 <__lshift+0xa4>
 800443c:	f108 0602 	add.w	r6, r8, #2
 8004440:	3e01      	subs	r6, #1
 8004442:	4638      	mov	r0, r7
 8004444:	612e      	str	r6, [r5, #16]
 8004446:	4621      	mov	r1, r4
 8004448:	f7ff fde2 	bl	8004010 <_Bfree>
 800444c:	4628      	mov	r0, r5
 800444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004452:	f842 0f04 	str.w	r0, [r2, #4]!
 8004456:	3301      	adds	r3, #1
 8004458:	e7c5      	b.n	80043e6 <__lshift+0x4a>
 800445a:	3904      	subs	r1, #4
 800445c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004460:	f841 2f04 	str.w	r2, [r1, #4]!
 8004464:	459c      	cmp	ip, r3
 8004466:	d8f9      	bhi.n	800445c <__lshift+0xc0>
 8004468:	e7ea      	b.n	8004440 <__lshift+0xa4>
 800446a:	bf00      	nop
 800446c:	08005464 	.word	0x08005464
 8004470:	08005475 	.word	0x08005475

08004474 <__mcmp>:
 8004474:	690a      	ldr	r2, [r1, #16]
 8004476:	4603      	mov	r3, r0
 8004478:	6900      	ldr	r0, [r0, #16]
 800447a:	1a80      	subs	r0, r0, r2
 800447c:	b530      	push	{r4, r5, lr}
 800447e:	d10e      	bne.n	800449e <__mcmp+0x2a>
 8004480:	3314      	adds	r3, #20
 8004482:	3114      	adds	r1, #20
 8004484:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004488:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800448c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004494:	4295      	cmp	r5, r2
 8004496:	d003      	beq.n	80044a0 <__mcmp+0x2c>
 8004498:	d205      	bcs.n	80044a6 <__mcmp+0x32>
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	bd30      	pop	{r4, r5, pc}
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d3f3      	bcc.n	800448c <__mcmp+0x18>
 80044a4:	e7fb      	b.n	800449e <__mcmp+0x2a>
 80044a6:	2001      	movs	r0, #1
 80044a8:	e7f9      	b.n	800449e <__mcmp+0x2a>
	...

080044ac <__mdiff>:
 80044ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	4689      	mov	r9, r1
 80044b2:	4606      	mov	r6, r0
 80044b4:	4611      	mov	r1, r2
 80044b6:	4648      	mov	r0, r9
 80044b8:	4614      	mov	r4, r2
 80044ba:	f7ff ffdb 	bl	8004474 <__mcmp>
 80044be:	1e05      	subs	r5, r0, #0
 80044c0:	d112      	bne.n	80044e8 <__mdiff+0x3c>
 80044c2:	4629      	mov	r1, r5
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7ff fd63 	bl	8003f90 <_Balloc>
 80044ca:	4602      	mov	r2, r0
 80044cc:	b928      	cbnz	r0, 80044da <__mdiff+0x2e>
 80044ce:	4b3f      	ldr	r3, [pc, #252]	@ (80045cc <__mdiff+0x120>)
 80044d0:	f240 2137 	movw	r1, #567	@ 0x237
 80044d4:	483e      	ldr	r0, [pc, #248]	@ (80045d0 <__mdiff+0x124>)
 80044d6:	f000 fb11 	bl	8004afc <__assert_func>
 80044da:	2301      	movs	r3, #1
 80044dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80044e0:	4610      	mov	r0, r2
 80044e2:	b003      	add	sp, #12
 80044e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e8:	bfbc      	itt	lt
 80044ea:	464b      	movlt	r3, r9
 80044ec:	46a1      	movlt	r9, r4
 80044ee:	4630      	mov	r0, r6
 80044f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80044f4:	bfba      	itte	lt
 80044f6:	461c      	movlt	r4, r3
 80044f8:	2501      	movlt	r5, #1
 80044fa:	2500      	movge	r5, #0
 80044fc:	f7ff fd48 	bl	8003f90 <_Balloc>
 8004500:	4602      	mov	r2, r0
 8004502:	b918      	cbnz	r0, 800450c <__mdiff+0x60>
 8004504:	4b31      	ldr	r3, [pc, #196]	@ (80045cc <__mdiff+0x120>)
 8004506:	f240 2145 	movw	r1, #581	@ 0x245
 800450a:	e7e3      	b.n	80044d4 <__mdiff+0x28>
 800450c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004510:	6926      	ldr	r6, [r4, #16]
 8004512:	60c5      	str	r5, [r0, #12]
 8004514:	f109 0310 	add.w	r3, r9, #16
 8004518:	f109 0514 	add.w	r5, r9, #20
 800451c:	f104 0e14 	add.w	lr, r4, #20
 8004520:	f100 0b14 	add.w	fp, r0, #20
 8004524:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004528:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	46d9      	mov	r9, fp
 8004530:	f04f 0c00 	mov.w	ip, #0
 8004534:	9b01      	ldr	r3, [sp, #4]
 8004536:	f85e 0b04 	ldr.w	r0, [lr], #4
 800453a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	fa1f f38a 	uxth.w	r3, sl
 8004544:	4619      	mov	r1, r3
 8004546:	b283      	uxth	r3, r0
 8004548:	1acb      	subs	r3, r1, r3
 800454a:	0c00      	lsrs	r0, r0, #16
 800454c:	4463      	add	r3, ip
 800454e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004552:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004556:	b29b      	uxth	r3, r3
 8004558:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800455c:	4576      	cmp	r6, lr
 800455e:	f849 3b04 	str.w	r3, [r9], #4
 8004562:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004566:	d8e5      	bhi.n	8004534 <__mdiff+0x88>
 8004568:	1b33      	subs	r3, r6, r4
 800456a:	3b15      	subs	r3, #21
 800456c:	f023 0303 	bic.w	r3, r3, #3
 8004570:	3415      	adds	r4, #21
 8004572:	3304      	adds	r3, #4
 8004574:	42a6      	cmp	r6, r4
 8004576:	bf38      	it	cc
 8004578:	2304      	movcc	r3, #4
 800457a:	441d      	add	r5, r3
 800457c:	445b      	add	r3, fp
 800457e:	461e      	mov	r6, r3
 8004580:	462c      	mov	r4, r5
 8004582:	4544      	cmp	r4, r8
 8004584:	d30e      	bcc.n	80045a4 <__mdiff+0xf8>
 8004586:	f108 0103 	add.w	r1, r8, #3
 800458a:	1b49      	subs	r1, r1, r5
 800458c:	f021 0103 	bic.w	r1, r1, #3
 8004590:	3d03      	subs	r5, #3
 8004592:	45a8      	cmp	r8, r5
 8004594:	bf38      	it	cc
 8004596:	2100      	movcc	r1, #0
 8004598:	440b      	add	r3, r1
 800459a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800459e:	b191      	cbz	r1, 80045c6 <__mdiff+0x11a>
 80045a0:	6117      	str	r7, [r2, #16]
 80045a2:	e79d      	b.n	80044e0 <__mdiff+0x34>
 80045a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80045a8:	46e6      	mov	lr, ip
 80045aa:	0c08      	lsrs	r0, r1, #16
 80045ac:	fa1c fc81 	uxtah	ip, ip, r1
 80045b0:	4471      	add	r1, lr
 80045b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80045b6:	b289      	uxth	r1, r1
 80045b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80045bc:	f846 1b04 	str.w	r1, [r6], #4
 80045c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80045c4:	e7dd      	b.n	8004582 <__mdiff+0xd6>
 80045c6:	3f01      	subs	r7, #1
 80045c8:	e7e7      	b.n	800459a <__mdiff+0xee>
 80045ca:	bf00      	nop
 80045cc:	08005464 	.word	0x08005464
 80045d0:	08005475 	.word	0x08005475

080045d4 <__d2b>:
 80045d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80045d8:	460f      	mov	r7, r1
 80045da:	2101      	movs	r1, #1
 80045dc:	ec59 8b10 	vmov	r8, r9, d0
 80045e0:	4616      	mov	r6, r2
 80045e2:	f7ff fcd5 	bl	8003f90 <_Balloc>
 80045e6:	4604      	mov	r4, r0
 80045e8:	b930      	cbnz	r0, 80045f8 <__d2b+0x24>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b23      	ldr	r3, [pc, #140]	@ (800467c <__d2b+0xa8>)
 80045ee:	4824      	ldr	r0, [pc, #144]	@ (8004680 <__d2b+0xac>)
 80045f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80045f4:	f000 fa82 	bl	8004afc <__assert_func>
 80045f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80045fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004600:	b10d      	cbz	r5, 8004606 <__d2b+0x32>
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	f1b8 0300 	subs.w	r3, r8, #0
 800460c:	d023      	beq.n	8004656 <__d2b+0x82>
 800460e:	4668      	mov	r0, sp
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	f7ff fd84 	bl	800411e <__lo0bits>
 8004616:	e9dd 1200 	ldrd	r1, r2, [sp]
 800461a:	b1d0      	cbz	r0, 8004652 <__d2b+0x7e>
 800461c:	f1c0 0320 	rsb	r3, r0, #32
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	430b      	orrs	r3, r1
 8004626:	40c2      	lsrs	r2, r0
 8004628:	6163      	str	r3, [r4, #20]
 800462a:	9201      	str	r2, [sp, #4]
 800462c:	9b01      	ldr	r3, [sp, #4]
 800462e:	61a3      	str	r3, [r4, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2201      	moveq	r2, #1
 8004636:	2202      	movne	r2, #2
 8004638:	6122      	str	r2, [r4, #16]
 800463a:	b1a5      	cbz	r5, 8004666 <__d2b+0x92>
 800463c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004640:	4405      	add	r5, r0
 8004642:	603d      	str	r5, [r7, #0]
 8004644:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004648:	6030      	str	r0, [r6, #0]
 800464a:	4620      	mov	r0, r4
 800464c:	b003      	add	sp, #12
 800464e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004652:	6161      	str	r1, [r4, #20]
 8004654:	e7ea      	b.n	800462c <__d2b+0x58>
 8004656:	a801      	add	r0, sp, #4
 8004658:	f7ff fd61 	bl	800411e <__lo0bits>
 800465c:	9b01      	ldr	r3, [sp, #4]
 800465e:	6163      	str	r3, [r4, #20]
 8004660:	3020      	adds	r0, #32
 8004662:	2201      	movs	r2, #1
 8004664:	e7e8      	b.n	8004638 <__d2b+0x64>
 8004666:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800466a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800466e:	6038      	str	r0, [r7, #0]
 8004670:	6918      	ldr	r0, [r3, #16]
 8004672:	f7ff fd35 	bl	80040e0 <__hi0bits>
 8004676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800467a:	e7e5      	b.n	8004648 <__d2b+0x74>
 800467c:	08005464 	.word	0x08005464
 8004680:	08005475 	.word	0x08005475

08004684 <__ssputs_r>:
 8004684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004688:	688e      	ldr	r6, [r1, #8]
 800468a:	461f      	mov	r7, r3
 800468c:	42be      	cmp	r6, r7
 800468e:	680b      	ldr	r3, [r1, #0]
 8004690:	4682      	mov	sl, r0
 8004692:	460c      	mov	r4, r1
 8004694:	4690      	mov	r8, r2
 8004696:	d82d      	bhi.n	80046f4 <__ssputs_r+0x70>
 8004698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800469c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046a0:	d026      	beq.n	80046f0 <__ssputs_r+0x6c>
 80046a2:	6965      	ldr	r5, [r4, #20]
 80046a4:	6909      	ldr	r1, [r1, #16]
 80046a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046aa:	eba3 0901 	sub.w	r9, r3, r1
 80046ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046b2:	1c7b      	adds	r3, r7, #1
 80046b4:	444b      	add	r3, r9
 80046b6:	106d      	asrs	r5, r5, #1
 80046b8:	429d      	cmp	r5, r3
 80046ba:	bf38      	it	cc
 80046bc:	461d      	movcc	r5, r3
 80046be:	0553      	lsls	r3, r2, #21
 80046c0:	d527      	bpl.n	8004712 <__ssputs_r+0x8e>
 80046c2:	4629      	mov	r1, r5
 80046c4:	f7ff fbd8 	bl	8003e78 <_malloc_r>
 80046c8:	4606      	mov	r6, r0
 80046ca:	b360      	cbz	r0, 8004726 <__ssputs_r+0xa2>
 80046cc:	6921      	ldr	r1, [r4, #16]
 80046ce:	464a      	mov	r2, r9
 80046d0:	f000 fa06 	bl	8004ae0 <memcpy>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	6126      	str	r6, [r4, #16]
 80046e2:	6165      	str	r5, [r4, #20]
 80046e4:	444e      	add	r6, r9
 80046e6:	eba5 0509 	sub.w	r5, r5, r9
 80046ea:	6026      	str	r6, [r4, #0]
 80046ec:	60a5      	str	r5, [r4, #8]
 80046ee:	463e      	mov	r6, r7
 80046f0:	42be      	cmp	r6, r7
 80046f2:	d900      	bls.n	80046f6 <__ssputs_r+0x72>
 80046f4:	463e      	mov	r6, r7
 80046f6:	6820      	ldr	r0, [r4, #0]
 80046f8:	4632      	mov	r2, r6
 80046fa:	4641      	mov	r1, r8
 80046fc:	f000 f9c6 	bl	8004a8c <memmove>
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	1b9b      	subs	r3, r3, r6
 8004704:	60a3      	str	r3, [r4, #8]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4433      	add	r3, r6
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	2000      	movs	r0, #0
 800470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004712:	462a      	mov	r2, r5
 8004714:	f000 fa36 	bl	8004b84 <_realloc_r>
 8004718:	4606      	mov	r6, r0
 800471a:	2800      	cmp	r0, #0
 800471c:	d1e0      	bne.n	80046e0 <__ssputs_r+0x5c>
 800471e:	6921      	ldr	r1, [r4, #16]
 8004720:	4650      	mov	r0, sl
 8004722:	f7ff fb35 	bl	8003d90 <_free_r>
 8004726:	230c      	movs	r3, #12
 8004728:	f8ca 3000 	str.w	r3, [sl]
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	e7e9      	b.n	800470e <__ssputs_r+0x8a>
	...

0800473c <_svfiprintf_r>:
 800473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	4698      	mov	r8, r3
 8004742:	898b      	ldrh	r3, [r1, #12]
 8004744:	061b      	lsls	r3, r3, #24
 8004746:	b09d      	sub	sp, #116	@ 0x74
 8004748:	4607      	mov	r7, r0
 800474a:	460d      	mov	r5, r1
 800474c:	4614      	mov	r4, r2
 800474e:	d510      	bpl.n	8004772 <_svfiprintf_r+0x36>
 8004750:	690b      	ldr	r3, [r1, #16]
 8004752:	b973      	cbnz	r3, 8004772 <_svfiprintf_r+0x36>
 8004754:	2140      	movs	r1, #64	@ 0x40
 8004756:	f7ff fb8f 	bl	8003e78 <_malloc_r>
 800475a:	6028      	str	r0, [r5, #0]
 800475c:	6128      	str	r0, [r5, #16]
 800475e:	b930      	cbnz	r0, 800476e <_svfiprintf_r+0x32>
 8004760:	230c      	movs	r3, #12
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	b01d      	add	sp, #116	@ 0x74
 800476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476e:	2340      	movs	r3, #64	@ 0x40
 8004770:	616b      	str	r3, [r5, #20]
 8004772:	2300      	movs	r3, #0
 8004774:	9309      	str	r3, [sp, #36]	@ 0x24
 8004776:	2320      	movs	r3, #32
 8004778:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800477c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004780:	2330      	movs	r3, #48	@ 0x30
 8004782:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004920 <_svfiprintf_r+0x1e4>
 8004786:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800478a:	f04f 0901 	mov.w	r9, #1
 800478e:	4623      	mov	r3, r4
 8004790:	469a      	mov	sl, r3
 8004792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004796:	b10a      	cbz	r2, 800479c <_svfiprintf_r+0x60>
 8004798:	2a25      	cmp	r2, #37	@ 0x25
 800479a:	d1f9      	bne.n	8004790 <_svfiprintf_r+0x54>
 800479c:	ebba 0b04 	subs.w	fp, sl, r4
 80047a0:	d00b      	beq.n	80047ba <_svfiprintf_r+0x7e>
 80047a2:	465b      	mov	r3, fp
 80047a4:	4622      	mov	r2, r4
 80047a6:	4629      	mov	r1, r5
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7ff ff6b 	bl	8004684 <__ssputs_r>
 80047ae:	3001      	adds	r0, #1
 80047b0:	f000 80a7 	beq.w	8004902 <_svfiprintf_r+0x1c6>
 80047b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047b6:	445a      	add	r2, fp
 80047b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ba:	f89a 3000 	ldrb.w	r3, [sl]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 809f 	beq.w	8004902 <_svfiprintf_r+0x1c6>
 80047c4:	2300      	movs	r3, #0
 80047c6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ce:	f10a 0a01 	add.w	sl, sl, #1
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	9307      	str	r3, [sp, #28]
 80047d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047da:	931a      	str	r3, [sp, #104]	@ 0x68
 80047dc:	4654      	mov	r4, sl
 80047de:	2205      	movs	r2, #5
 80047e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e4:	484e      	ldr	r0, [pc, #312]	@ (8004920 <_svfiprintf_r+0x1e4>)
 80047e6:	f7fb fcfb 	bl	80001e0 <memchr>
 80047ea:	9a04      	ldr	r2, [sp, #16]
 80047ec:	b9d8      	cbnz	r0, 8004826 <_svfiprintf_r+0xea>
 80047ee:	06d0      	lsls	r0, r2, #27
 80047f0:	bf44      	itt	mi
 80047f2:	2320      	movmi	r3, #32
 80047f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047f8:	0711      	lsls	r1, r2, #28
 80047fa:	bf44      	itt	mi
 80047fc:	232b      	movmi	r3, #43	@ 0x2b
 80047fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004802:	f89a 3000 	ldrb.w	r3, [sl]
 8004806:	2b2a      	cmp	r3, #42	@ 0x2a
 8004808:	d015      	beq.n	8004836 <_svfiprintf_r+0xfa>
 800480a:	9a07      	ldr	r2, [sp, #28]
 800480c:	4654      	mov	r4, sl
 800480e:	2000      	movs	r0, #0
 8004810:	f04f 0c0a 	mov.w	ip, #10
 8004814:	4621      	mov	r1, r4
 8004816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800481a:	3b30      	subs	r3, #48	@ 0x30
 800481c:	2b09      	cmp	r3, #9
 800481e:	d94b      	bls.n	80048b8 <_svfiprintf_r+0x17c>
 8004820:	b1b0      	cbz	r0, 8004850 <_svfiprintf_r+0x114>
 8004822:	9207      	str	r2, [sp, #28]
 8004824:	e014      	b.n	8004850 <_svfiprintf_r+0x114>
 8004826:	eba0 0308 	sub.w	r3, r0, r8
 800482a:	fa09 f303 	lsl.w	r3, r9, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	46a2      	mov	sl, r4
 8004834:	e7d2      	b.n	80047dc <_svfiprintf_r+0xa0>
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	1d19      	adds	r1, r3, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	9103      	str	r1, [sp, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	bfbb      	ittet	lt
 8004842:	425b      	neglt	r3, r3
 8004844:	f042 0202 	orrlt.w	r2, r2, #2
 8004848:	9307      	strge	r3, [sp, #28]
 800484a:	9307      	strlt	r3, [sp, #28]
 800484c:	bfb8      	it	lt
 800484e:	9204      	strlt	r2, [sp, #16]
 8004850:	7823      	ldrb	r3, [r4, #0]
 8004852:	2b2e      	cmp	r3, #46	@ 0x2e
 8004854:	d10a      	bne.n	800486c <_svfiprintf_r+0x130>
 8004856:	7863      	ldrb	r3, [r4, #1]
 8004858:	2b2a      	cmp	r3, #42	@ 0x2a
 800485a:	d132      	bne.n	80048c2 <_svfiprintf_r+0x186>
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	1d1a      	adds	r2, r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	9203      	str	r2, [sp, #12]
 8004864:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004868:	3402      	adds	r4, #2
 800486a:	9305      	str	r3, [sp, #20]
 800486c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004930 <_svfiprintf_r+0x1f4>
 8004870:	7821      	ldrb	r1, [r4, #0]
 8004872:	2203      	movs	r2, #3
 8004874:	4650      	mov	r0, sl
 8004876:	f7fb fcb3 	bl	80001e0 <memchr>
 800487a:	b138      	cbz	r0, 800488c <_svfiprintf_r+0x150>
 800487c:	9b04      	ldr	r3, [sp, #16]
 800487e:	eba0 000a 	sub.w	r0, r0, sl
 8004882:	2240      	movs	r2, #64	@ 0x40
 8004884:	4082      	lsls	r2, r0
 8004886:	4313      	orrs	r3, r2
 8004888:	3401      	adds	r4, #1
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004890:	4824      	ldr	r0, [pc, #144]	@ (8004924 <_svfiprintf_r+0x1e8>)
 8004892:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004896:	2206      	movs	r2, #6
 8004898:	f7fb fca2 	bl	80001e0 <memchr>
 800489c:	2800      	cmp	r0, #0
 800489e:	d036      	beq.n	800490e <_svfiprintf_r+0x1d2>
 80048a0:	4b21      	ldr	r3, [pc, #132]	@ (8004928 <_svfiprintf_r+0x1ec>)
 80048a2:	bb1b      	cbnz	r3, 80048ec <_svfiprintf_r+0x1b0>
 80048a4:	9b03      	ldr	r3, [sp, #12]
 80048a6:	3307      	adds	r3, #7
 80048a8:	f023 0307 	bic.w	r3, r3, #7
 80048ac:	3308      	adds	r3, #8
 80048ae:	9303      	str	r3, [sp, #12]
 80048b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048b2:	4433      	add	r3, r6
 80048b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048b6:	e76a      	b.n	800478e <_svfiprintf_r+0x52>
 80048b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048bc:	460c      	mov	r4, r1
 80048be:	2001      	movs	r0, #1
 80048c0:	e7a8      	b.n	8004814 <_svfiprintf_r+0xd8>
 80048c2:	2300      	movs	r3, #0
 80048c4:	3401      	adds	r4, #1
 80048c6:	9305      	str	r3, [sp, #20]
 80048c8:	4619      	mov	r1, r3
 80048ca:	f04f 0c0a 	mov.w	ip, #10
 80048ce:	4620      	mov	r0, r4
 80048d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048d4:	3a30      	subs	r2, #48	@ 0x30
 80048d6:	2a09      	cmp	r2, #9
 80048d8:	d903      	bls.n	80048e2 <_svfiprintf_r+0x1a6>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0c6      	beq.n	800486c <_svfiprintf_r+0x130>
 80048de:	9105      	str	r1, [sp, #20]
 80048e0:	e7c4      	b.n	800486c <_svfiprintf_r+0x130>
 80048e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80048e6:	4604      	mov	r4, r0
 80048e8:	2301      	movs	r3, #1
 80048ea:	e7f0      	b.n	80048ce <_svfiprintf_r+0x192>
 80048ec:	ab03      	add	r3, sp, #12
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	462a      	mov	r2, r5
 80048f2:	4b0e      	ldr	r3, [pc, #56]	@ (800492c <_svfiprintf_r+0x1f0>)
 80048f4:	a904      	add	r1, sp, #16
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7fd fe80 	bl	80025fc <_printf_float>
 80048fc:	1c42      	adds	r2, r0, #1
 80048fe:	4606      	mov	r6, r0
 8004900:	d1d6      	bne.n	80048b0 <_svfiprintf_r+0x174>
 8004902:	89ab      	ldrh	r3, [r5, #12]
 8004904:	065b      	lsls	r3, r3, #25
 8004906:	f53f af2d 	bmi.w	8004764 <_svfiprintf_r+0x28>
 800490a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800490c:	e72c      	b.n	8004768 <_svfiprintf_r+0x2c>
 800490e:	ab03      	add	r3, sp, #12
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	462a      	mov	r2, r5
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <_svfiprintf_r+0x1f0>)
 8004916:	a904      	add	r1, sp, #16
 8004918:	4638      	mov	r0, r7
 800491a:	f7fe f907 	bl	8002b2c <_printf_i>
 800491e:	e7ed      	b.n	80048fc <_svfiprintf_r+0x1c0>
 8004920:	080054ce 	.word	0x080054ce
 8004924:	080054d8 	.word	0x080054d8
 8004928:	080025fd 	.word	0x080025fd
 800492c:	08004685 	.word	0x08004685
 8004930:	080054d4 	.word	0x080054d4

08004934 <__sflush_r>:
 8004934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	0716      	lsls	r6, r2, #28
 800493e:	4605      	mov	r5, r0
 8004940:	460c      	mov	r4, r1
 8004942:	d454      	bmi.n	80049ee <__sflush_r+0xba>
 8004944:	684b      	ldr	r3, [r1, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	dc02      	bgt.n	8004950 <__sflush_r+0x1c>
 800494a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	dd48      	ble.n	80049e2 <__sflush_r+0xae>
 8004950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004952:	2e00      	cmp	r6, #0
 8004954:	d045      	beq.n	80049e2 <__sflush_r+0xae>
 8004956:	2300      	movs	r3, #0
 8004958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800495c:	682f      	ldr	r7, [r5, #0]
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	d030      	beq.n	80049c6 <__sflush_r+0x92>
 8004964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	0759      	lsls	r1, r3, #29
 800496a:	d505      	bpl.n	8004978 <__sflush_r+0x44>
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004972:	b10b      	cbz	r3, 8004978 <__sflush_r+0x44>
 8004974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800497c:	6a21      	ldr	r1, [r4, #32]
 800497e:	4628      	mov	r0, r5
 8004980:	47b0      	blx	r6
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	d106      	bne.n	8004996 <__sflush_r+0x62>
 8004988:	6829      	ldr	r1, [r5, #0]
 800498a:	291d      	cmp	r1, #29
 800498c:	d82b      	bhi.n	80049e6 <__sflush_r+0xb2>
 800498e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a38 <__sflush_r+0x104>)
 8004990:	40ca      	lsrs	r2, r1
 8004992:	07d6      	lsls	r6, r2, #31
 8004994:	d527      	bpl.n	80049e6 <__sflush_r+0xb2>
 8004996:	2200      	movs	r2, #0
 8004998:	6062      	str	r2, [r4, #4]
 800499a:	04d9      	lsls	r1, r3, #19
 800499c:	6922      	ldr	r2, [r4, #16]
 800499e:	6022      	str	r2, [r4, #0]
 80049a0:	d504      	bpl.n	80049ac <__sflush_r+0x78>
 80049a2:	1c42      	adds	r2, r0, #1
 80049a4:	d101      	bne.n	80049aa <__sflush_r+0x76>
 80049a6:	682b      	ldr	r3, [r5, #0]
 80049a8:	b903      	cbnz	r3, 80049ac <__sflush_r+0x78>
 80049aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80049ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049ae:	602f      	str	r7, [r5, #0]
 80049b0:	b1b9      	cbz	r1, 80049e2 <__sflush_r+0xae>
 80049b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049b6:	4299      	cmp	r1, r3
 80049b8:	d002      	beq.n	80049c0 <__sflush_r+0x8c>
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7ff f9e8 	bl	8003d90 <_free_r>
 80049c0:	2300      	movs	r3, #0
 80049c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049c4:	e00d      	b.n	80049e2 <__sflush_r+0xae>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	4602      	mov	r2, r0
 80049ce:	1c50      	adds	r0, r2, #1
 80049d0:	d1c9      	bne.n	8004966 <__sflush_r+0x32>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0c6      	beq.n	8004966 <__sflush_r+0x32>
 80049d8:	2b1d      	cmp	r3, #29
 80049da:	d001      	beq.n	80049e0 <__sflush_r+0xac>
 80049dc:	2b16      	cmp	r3, #22
 80049de:	d11e      	bne.n	8004a1e <__sflush_r+0xea>
 80049e0:	602f      	str	r7, [r5, #0]
 80049e2:	2000      	movs	r0, #0
 80049e4:	e022      	b.n	8004a2c <__sflush_r+0xf8>
 80049e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	e01b      	b.n	8004a26 <__sflush_r+0xf2>
 80049ee:	690f      	ldr	r7, [r1, #16]
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	d0f6      	beq.n	80049e2 <__sflush_r+0xae>
 80049f4:	0793      	lsls	r3, r2, #30
 80049f6:	680e      	ldr	r6, [r1, #0]
 80049f8:	bf08      	it	eq
 80049fa:	694b      	ldreq	r3, [r1, #20]
 80049fc:	600f      	str	r7, [r1, #0]
 80049fe:	bf18      	it	ne
 8004a00:	2300      	movne	r3, #0
 8004a02:	eba6 0807 	sub.w	r8, r6, r7
 8004a06:	608b      	str	r3, [r1, #8]
 8004a08:	f1b8 0f00 	cmp.w	r8, #0
 8004a0c:	dde9      	ble.n	80049e2 <__sflush_r+0xae>
 8004a0e:	6a21      	ldr	r1, [r4, #32]
 8004a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a12:	4643      	mov	r3, r8
 8004a14:	463a      	mov	r2, r7
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b0      	blx	r6
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	dc08      	bgt.n	8004a30 <__sflush_r+0xfc>
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	4407      	add	r7, r0
 8004a32:	eba8 0800 	sub.w	r8, r8, r0
 8004a36:	e7e7      	b.n	8004a08 <__sflush_r+0xd4>
 8004a38:	20400001 	.word	0x20400001

08004a3c <_fflush_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	690b      	ldr	r3, [r1, #16]
 8004a40:	4605      	mov	r5, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	b913      	cbnz	r3, 8004a4c <_fflush_r+0x10>
 8004a46:	2500      	movs	r5, #0
 8004a48:	4628      	mov	r0, r5
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	b118      	cbz	r0, 8004a56 <_fflush_r+0x1a>
 8004a4e:	6a03      	ldr	r3, [r0, #32]
 8004a50:	b90b      	cbnz	r3, 8004a56 <_fflush_r+0x1a>
 8004a52:	f7fe fa15 	bl	8002e80 <__sinit>
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f3      	beq.n	8004a46 <_fflush_r+0xa>
 8004a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a60:	07d0      	lsls	r0, r2, #31
 8004a62:	d404      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a64:	0599      	lsls	r1, r3, #22
 8004a66:	d402      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a6a:	f7fe fb36 	bl	80030da <__retarget_lock_acquire_recursive>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4621      	mov	r1, r4
 8004a72:	f7ff ff5f 	bl	8004934 <__sflush_r>
 8004a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a78:	07da      	lsls	r2, r3, #31
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	d4e4      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	059b      	lsls	r3, r3, #22
 8004a82:	d4e1      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a86:	f7fe fb29 	bl	80030dc <__retarget_lock_release_recursive>
 8004a8a:	e7dd      	b.n	8004a48 <_fflush_r+0xc>

08004a8c <memmove>:
 8004a8c:	4288      	cmp	r0, r1
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	eb01 0402 	add.w	r4, r1, r2
 8004a94:	d902      	bls.n	8004a9c <memmove+0x10>
 8004a96:	4284      	cmp	r4, r0
 8004a98:	4623      	mov	r3, r4
 8004a9a:	d807      	bhi.n	8004aac <memmove+0x20>
 8004a9c:	1e43      	subs	r3, r0, #1
 8004a9e:	42a1      	cmp	r1, r4
 8004aa0:	d008      	beq.n	8004ab4 <memmove+0x28>
 8004aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aaa:	e7f8      	b.n	8004a9e <memmove+0x12>
 8004aac:	4402      	add	r2, r0
 8004aae:	4601      	mov	r1, r0
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	d100      	bne.n	8004ab6 <memmove+0x2a>
 8004ab4:	bd10      	pop	{r4, pc}
 8004ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004abe:	e7f7      	b.n	8004ab0 <memmove+0x24>

08004ac0 <_sbrk_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d06      	ldr	r5, [pc, #24]	@ (8004adc <_sbrk_r+0x1c>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fd faa6 	bl	800201c <_sbrk>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_sbrk_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_sbrk_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	2000038c 	.word	0x2000038c

08004ae0 <memcpy>:
 8004ae0:	440a      	add	r2, r1
 8004ae2:	4291      	cmp	r1, r2
 8004ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae8:	d100      	bne.n	8004aec <memcpy+0xc>
 8004aea:	4770      	bx	lr
 8004aec:	b510      	push	{r4, lr}
 8004aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af6:	4291      	cmp	r1, r2
 8004af8:	d1f9      	bne.n	8004aee <memcpy+0xe>
 8004afa:	bd10      	pop	{r4, pc}

08004afc <__assert_func>:
 8004afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004afe:	4614      	mov	r4, r2
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <__assert_func+0x2c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4605      	mov	r5, r0
 8004b08:	68d8      	ldr	r0, [r3, #12]
 8004b0a:	b14c      	cbz	r4, 8004b20 <__assert_func+0x24>
 8004b0c:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <__assert_func+0x30>)
 8004b0e:	9100      	str	r1, [sp, #0]
 8004b10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b14:	4906      	ldr	r1, [pc, #24]	@ (8004b30 <__assert_func+0x34>)
 8004b16:	462b      	mov	r3, r5
 8004b18:	f000 f870 	bl	8004bfc <fiprintf>
 8004b1c:	f000 f880 	bl	8004c20 <abort>
 8004b20:	4b04      	ldr	r3, [pc, #16]	@ (8004b34 <__assert_func+0x38>)
 8004b22:	461c      	mov	r4, r3
 8004b24:	e7f3      	b.n	8004b0e <__assert_func+0x12>
 8004b26:	bf00      	nop
 8004b28:	20000060 	.word	0x20000060
 8004b2c:	080054e9 	.word	0x080054e9
 8004b30:	080054f6 	.word	0x080054f6
 8004b34:	08005524 	.word	0x08005524

08004b38 <_calloc_r>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	fba1 5402 	umull	r5, r4, r1, r2
 8004b3e:	b934      	cbnz	r4, 8004b4e <_calloc_r+0x16>
 8004b40:	4629      	mov	r1, r5
 8004b42:	f7ff f999 	bl	8003e78 <_malloc_r>
 8004b46:	4606      	mov	r6, r0
 8004b48:	b928      	cbnz	r0, 8004b56 <_calloc_r+0x1e>
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	bd70      	pop	{r4, r5, r6, pc}
 8004b4e:	220c      	movs	r2, #12
 8004b50:	6002      	str	r2, [r0, #0]
 8004b52:	2600      	movs	r6, #0
 8004b54:	e7f9      	b.n	8004b4a <_calloc_r+0x12>
 8004b56:	462a      	mov	r2, r5
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f7fe fa40 	bl	8002fde <memset>
 8004b5e:	e7f4      	b.n	8004b4a <_calloc_r+0x12>

08004b60 <__ascii_mbtowc>:
 8004b60:	b082      	sub	sp, #8
 8004b62:	b901      	cbnz	r1, 8004b66 <__ascii_mbtowc+0x6>
 8004b64:	a901      	add	r1, sp, #4
 8004b66:	b142      	cbz	r2, 8004b7a <__ascii_mbtowc+0x1a>
 8004b68:	b14b      	cbz	r3, 8004b7e <__ascii_mbtowc+0x1e>
 8004b6a:	7813      	ldrb	r3, [r2, #0]
 8004b6c:	600b      	str	r3, [r1, #0]
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	1e10      	subs	r0, r2, #0
 8004b72:	bf18      	it	ne
 8004b74:	2001      	movne	r0, #1
 8004b76:	b002      	add	sp, #8
 8004b78:	4770      	bx	lr
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	e7fb      	b.n	8004b76 <__ascii_mbtowc+0x16>
 8004b7e:	f06f 0001 	mvn.w	r0, #1
 8004b82:	e7f8      	b.n	8004b76 <__ascii_mbtowc+0x16>

08004b84 <_realloc_r>:
 8004b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b88:	4607      	mov	r7, r0
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	460d      	mov	r5, r1
 8004b8e:	b921      	cbnz	r1, 8004b9a <_realloc_r+0x16>
 8004b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b94:	4611      	mov	r1, r2
 8004b96:	f7ff b96f 	b.w	8003e78 <_malloc_r>
 8004b9a:	b92a      	cbnz	r2, 8004ba8 <_realloc_r+0x24>
 8004b9c:	f7ff f8f8 	bl	8003d90 <_free_r>
 8004ba0:	4625      	mov	r5, r4
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba8:	f000 f841 	bl	8004c2e <_malloc_usable_size_r>
 8004bac:	4284      	cmp	r4, r0
 8004bae:	4606      	mov	r6, r0
 8004bb0:	d802      	bhi.n	8004bb8 <_realloc_r+0x34>
 8004bb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bb6:	d8f4      	bhi.n	8004ba2 <_realloc_r+0x1e>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f7ff f95c 	bl	8003e78 <_malloc_r>
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	b908      	cbnz	r0, 8004bc8 <_realloc_r+0x44>
 8004bc4:	4645      	mov	r5, r8
 8004bc6:	e7ec      	b.n	8004ba2 <_realloc_r+0x1e>
 8004bc8:	42b4      	cmp	r4, r6
 8004bca:	4622      	mov	r2, r4
 8004bcc:	4629      	mov	r1, r5
 8004bce:	bf28      	it	cs
 8004bd0:	4632      	movcs	r2, r6
 8004bd2:	f7ff ff85 	bl	8004ae0 <memcpy>
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f7ff f8d9 	bl	8003d90 <_free_r>
 8004bde:	e7f1      	b.n	8004bc4 <_realloc_r+0x40>

08004be0 <__ascii_wctomb>:
 8004be0:	4603      	mov	r3, r0
 8004be2:	4608      	mov	r0, r1
 8004be4:	b141      	cbz	r1, 8004bf8 <__ascii_wctomb+0x18>
 8004be6:	2aff      	cmp	r2, #255	@ 0xff
 8004be8:	d904      	bls.n	8004bf4 <__ascii_wctomb+0x14>
 8004bea:	228a      	movs	r2, #138	@ 0x8a
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf2:	4770      	bx	lr
 8004bf4:	700a      	strb	r2, [r1, #0]
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	4770      	bx	lr
	...

08004bfc <fiprintf>:
 8004bfc:	b40e      	push	{r1, r2, r3}
 8004bfe:	b503      	push	{r0, r1, lr}
 8004c00:	4601      	mov	r1, r0
 8004c02:	ab03      	add	r3, sp, #12
 8004c04:	4805      	ldr	r0, [pc, #20]	@ (8004c1c <fiprintf+0x20>)
 8004c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	f000 f83f 	bl	8004c90 <_vfiprintf_r>
 8004c12:	b002      	add	sp, #8
 8004c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c18:	b003      	add	sp, #12
 8004c1a:	4770      	bx	lr
 8004c1c:	20000060 	.word	0x20000060

08004c20 <abort>:
 8004c20:	b508      	push	{r3, lr}
 8004c22:	2006      	movs	r0, #6
 8004c24:	f000 fa08 	bl	8005038 <raise>
 8004c28:	2001      	movs	r0, #1
 8004c2a:	f7fd f97e 	bl	8001f2a <_exit>

08004c2e <_malloc_usable_size_r>:
 8004c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c32:	1f18      	subs	r0, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfbc      	itt	lt
 8004c38:	580b      	ldrlt	r3, [r1, r0]
 8004c3a:	18c0      	addlt	r0, r0, r3
 8004c3c:	4770      	bx	lr

08004c3e <__sfputc_r>:
 8004c3e:	6893      	ldr	r3, [r2, #8]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	b410      	push	{r4}
 8004c46:	6093      	str	r3, [r2, #8]
 8004c48:	da08      	bge.n	8004c5c <__sfputc_r+0x1e>
 8004c4a:	6994      	ldr	r4, [r2, #24]
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	db01      	blt.n	8004c54 <__sfputc_r+0x16>
 8004c50:	290a      	cmp	r1, #10
 8004c52:	d103      	bne.n	8004c5c <__sfputc_r+0x1e>
 8004c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c58:	f000 b932 	b.w	8004ec0 <__swbuf_r>
 8004c5c:	6813      	ldr	r3, [r2, #0]
 8004c5e:	1c58      	adds	r0, r3, #1
 8004c60:	6010      	str	r0, [r2, #0]
 8004c62:	7019      	strb	r1, [r3, #0]
 8004c64:	4608      	mov	r0, r1
 8004c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <__sfputs_r>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	4606      	mov	r6, r0
 8004c70:	460f      	mov	r7, r1
 8004c72:	4614      	mov	r4, r2
 8004c74:	18d5      	adds	r5, r2, r3
 8004c76:	42ac      	cmp	r4, r5
 8004c78:	d101      	bne.n	8004c7e <__sfputs_r+0x12>
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e007      	b.n	8004c8e <__sfputs_r+0x22>
 8004c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c82:	463a      	mov	r2, r7
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7ff ffda 	bl	8004c3e <__sfputc_r>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d1f3      	bne.n	8004c76 <__sfputs_r+0xa>
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c90 <_vfiprintf_r>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	460d      	mov	r5, r1
 8004c96:	b09d      	sub	sp, #116	@ 0x74
 8004c98:	4614      	mov	r4, r2
 8004c9a:	4698      	mov	r8, r3
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	b118      	cbz	r0, 8004ca8 <_vfiprintf_r+0x18>
 8004ca0:	6a03      	ldr	r3, [r0, #32]
 8004ca2:	b90b      	cbnz	r3, 8004ca8 <_vfiprintf_r+0x18>
 8004ca4:	f7fe f8ec 	bl	8002e80 <__sinit>
 8004ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004caa:	07d9      	lsls	r1, r3, #31
 8004cac:	d405      	bmi.n	8004cba <_vfiprintf_r+0x2a>
 8004cae:	89ab      	ldrh	r3, [r5, #12]
 8004cb0:	059a      	lsls	r2, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_vfiprintf_r+0x2a>
 8004cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cb6:	f7fe fa10 	bl	80030da <__retarget_lock_acquire_recursive>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	d501      	bpl.n	8004cc4 <_vfiprintf_r+0x34>
 8004cc0:	692b      	ldr	r3, [r5, #16]
 8004cc2:	b99b      	cbnz	r3, 8004cec <_vfiprintf_r+0x5c>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f000 f938 	bl	8004f3c <__swsetup_r>
 8004ccc:	b170      	cbz	r0, 8004cec <_vfiprintf_r+0x5c>
 8004cce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cd0:	07dc      	lsls	r4, r3, #31
 8004cd2:	d504      	bpl.n	8004cde <_vfiprintf_r+0x4e>
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	b01d      	add	sp, #116	@ 0x74
 8004cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cde:	89ab      	ldrh	r3, [r5, #12]
 8004ce0:	0598      	lsls	r0, r3, #22
 8004ce2:	d4f7      	bmi.n	8004cd4 <_vfiprintf_r+0x44>
 8004ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ce6:	f7fe f9f9 	bl	80030dc <__retarget_lock_release_recursive>
 8004cea:	e7f3      	b.n	8004cd4 <_vfiprintf_r+0x44>
 8004cec:	2300      	movs	r3, #0
 8004cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cfa:	2330      	movs	r3, #48	@ 0x30
 8004cfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004eac <_vfiprintf_r+0x21c>
 8004d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d04:	f04f 0901 	mov.w	r9, #1
 8004d08:	4623      	mov	r3, r4
 8004d0a:	469a      	mov	sl, r3
 8004d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d10:	b10a      	cbz	r2, 8004d16 <_vfiprintf_r+0x86>
 8004d12:	2a25      	cmp	r2, #37	@ 0x25
 8004d14:	d1f9      	bne.n	8004d0a <_vfiprintf_r+0x7a>
 8004d16:	ebba 0b04 	subs.w	fp, sl, r4
 8004d1a:	d00b      	beq.n	8004d34 <_vfiprintf_r+0xa4>
 8004d1c:	465b      	mov	r3, fp
 8004d1e:	4622      	mov	r2, r4
 8004d20:	4629      	mov	r1, r5
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff ffa2 	bl	8004c6c <__sfputs_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	f000 80a7 	beq.w	8004e7c <_vfiprintf_r+0x1ec>
 8004d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d30:	445a      	add	r2, fp
 8004d32:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d34:	f89a 3000 	ldrb.w	r3, [sl]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 809f 	beq.w	8004e7c <_vfiprintf_r+0x1ec>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d48:	f10a 0a01 	add.w	sl, sl, #1
 8004d4c:	9304      	str	r3, [sp, #16]
 8004d4e:	9307      	str	r3, [sp, #28]
 8004d50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d54:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d56:	4654      	mov	r4, sl
 8004d58:	2205      	movs	r2, #5
 8004d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5e:	4853      	ldr	r0, [pc, #332]	@ (8004eac <_vfiprintf_r+0x21c>)
 8004d60:	f7fb fa3e 	bl	80001e0 <memchr>
 8004d64:	9a04      	ldr	r2, [sp, #16]
 8004d66:	b9d8      	cbnz	r0, 8004da0 <_vfiprintf_r+0x110>
 8004d68:	06d1      	lsls	r1, r2, #27
 8004d6a:	bf44      	itt	mi
 8004d6c:	2320      	movmi	r3, #32
 8004d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d72:	0713      	lsls	r3, r2, #28
 8004d74:	bf44      	itt	mi
 8004d76:	232b      	movmi	r3, #43	@ 0x2b
 8004d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d82:	d015      	beq.n	8004db0 <_vfiprintf_r+0x120>
 8004d84:	9a07      	ldr	r2, [sp, #28]
 8004d86:	4654      	mov	r4, sl
 8004d88:	2000      	movs	r0, #0
 8004d8a:	f04f 0c0a 	mov.w	ip, #10
 8004d8e:	4621      	mov	r1, r4
 8004d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d94:	3b30      	subs	r3, #48	@ 0x30
 8004d96:	2b09      	cmp	r3, #9
 8004d98:	d94b      	bls.n	8004e32 <_vfiprintf_r+0x1a2>
 8004d9a:	b1b0      	cbz	r0, 8004dca <_vfiprintf_r+0x13a>
 8004d9c:	9207      	str	r2, [sp, #28]
 8004d9e:	e014      	b.n	8004dca <_vfiprintf_r+0x13a>
 8004da0:	eba0 0308 	sub.w	r3, r0, r8
 8004da4:	fa09 f303 	lsl.w	r3, r9, r3
 8004da8:	4313      	orrs	r3, r2
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	46a2      	mov	sl, r4
 8004dae:	e7d2      	b.n	8004d56 <_vfiprintf_r+0xc6>
 8004db0:	9b03      	ldr	r3, [sp, #12]
 8004db2:	1d19      	adds	r1, r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	9103      	str	r1, [sp, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bfbb      	ittet	lt
 8004dbc:	425b      	neglt	r3, r3
 8004dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc2:	9307      	strge	r3, [sp, #28]
 8004dc4:	9307      	strlt	r3, [sp, #28]
 8004dc6:	bfb8      	it	lt
 8004dc8:	9204      	strlt	r2, [sp, #16]
 8004dca:	7823      	ldrb	r3, [r4, #0]
 8004dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dce:	d10a      	bne.n	8004de6 <_vfiprintf_r+0x156>
 8004dd0:	7863      	ldrb	r3, [r4, #1]
 8004dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dd4:	d132      	bne.n	8004e3c <_vfiprintf_r+0x1ac>
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	9203      	str	r2, [sp, #12]
 8004dde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004de2:	3402      	adds	r4, #2
 8004de4:	9305      	str	r3, [sp, #20]
 8004de6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ebc <_vfiprintf_r+0x22c>
 8004dea:	7821      	ldrb	r1, [r4, #0]
 8004dec:	2203      	movs	r2, #3
 8004dee:	4650      	mov	r0, sl
 8004df0:	f7fb f9f6 	bl	80001e0 <memchr>
 8004df4:	b138      	cbz	r0, 8004e06 <_vfiprintf_r+0x176>
 8004df6:	9b04      	ldr	r3, [sp, #16]
 8004df8:	eba0 000a 	sub.w	r0, r0, sl
 8004dfc:	2240      	movs	r2, #64	@ 0x40
 8004dfe:	4082      	lsls	r2, r0
 8004e00:	4313      	orrs	r3, r2
 8004e02:	3401      	adds	r4, #1
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	4829      	ldr	r0, [pc, #164]	@ (8004eb0 <_vfiprintf_r+0x220>)
 8004e0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e10:	2206      	movs	r2, #6
 8004e12:	f7fb f9e5 	bl	80001e0 <memchr>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d03f      	beq.n	8004e9a <_vfiprintf_r+0x20a>
 8004e1a:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <_vfiprintf_r+0x224>)
 8004e1c:	bb1b      	cbnz	r3, 8004e66 <_vfiprintf_r+0x1d6>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	3308      	adds	r3, #8
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2c:	443b      	add	r3, r7
 8004e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e30:	e76a      	b.n	8004d08 <_vfiprintf_r+0x78>
 8004e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e36:	460c      	mov	r4, r1
 8004e38:	2001      	movs	r0, #1
 8004e3a:	e7a8      	b.n	8004d8e <_vfiprintf_r+0xfe>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	3401      	adds	r4, #1
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f04f 0c0a 	mov.w	ip, #10
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4e:	3a30      	subs	r2, #48	@ 0x30
 8004e50:	2a09      	cmp	r2, #9
 8004e52:	d903      	bls.n	8004e5c <_vfiprintf_r+0x1cc>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0c6      	beq.n	8004de6 <_vfiprintf_r+0x156>
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	e7c4      	b.n	8004de6 <_vfiprintf_r+0x156>
 8004e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e60:	4604      	mov	r4, r0
 8004e62:	2301      	movs	r3, #1
 8004e64:	e7f0      	b.n	8004e48 <_vfiprintf_r+0x1b8>
 8004e66:	ab03      	add	r3, sp, #12
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <_vfiprintf_r+0x228>)
 8004e6e:	a904      	add	r1, sp, #16
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7fd fbc3 	bl	80025fc <_printf_float>
 8004e76:	4607      	mov	r7, r0
 8004e78:	1c78      	adds	r0, r7, #1
 8004e7a:	d1d6      	bne.n	8004e2a <_vfiprintf_r+0x19a>
 8004e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e7e:	07d9      	lsls	r1, r3, #31
 8004e80:	d405      	bmi.n	8004e8e <_vfiprintf_r+0x1fe>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	059a      	lsls	r2, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_vfiprintf_r+0x1fe>
 8004e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e8a:	f7fe f927 	bl	80030dc <__retarget_lock_release_recursive>
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	065b      	lsls	r3, r3, #25
 8004e92:	f53f af1f 	bmi.w	8004cd4 <_vfiprintf_r+0x44>
 8004e96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e98:	e71e      	b.n	8004cd8 <_vfiprintf_r+0x48>
 8004e9a:	ab03      	add	r3, sp, #12
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	462a      	mov	r2, r5
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <_vfiprintf_r+0x228>)
 8004ea2:	a904      	add	r1, sp, #16
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f7fd fe41 	bl	8002b2c <_printf_i>
 8004eaa:	e7e4      	b.n	8004e76 <_vfiprintf_r+0x1e6>
 8004eac:	080054ce 	.word	0x080054ce
 8004eb0:	080054d8 	.word	0x080054d8
 8004eb4:	080025fd 	.word	0x080025fd
 8004eb8:	08004c6d 	.word	0x08004c6d
 8004ebc:	080054d4 	.word	0x080054d4

08004ec0 <__swbuf_r>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	b118      	cbz	r0, 8004ed2 <__swbuf_r+0x12>
 8004eca:	6a03      	ldr	r3, [r0, #32]
 8004ecc:	b90b      	cbnz	r3, 8004ed2 <__swbuf_r+0x12>
 8004ece:	f7fd ffd7 	bl	8002e80 <__sinit>
 8004ed2:	69a3      	ldr	r3, [r4, #24]
 8004ed4:	60a3      	str	r3, [r4, #8]
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	071a      	lsls	r2, r3, #28
 8004eda:	d501      	bpl.n	8004ee0 <__swbuf_r+0x20>
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	b943      	cbnz	r3, 8004ef2 <__swbuf_r+0x32>
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 f82a 	bl	8004f3c <__swsetup_r>
 8004ee8:	b118      	cbz	r0, 8004ef2 <__swbuf_r+0x32>
 8004eea:	f04f 37ff 	mov.w	r7, #4294967295
 8004eee:	4638      	mov	r0, r7
 8004ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	6922      	ldr	r2, [r4, #16]
 8004ef6:	1a98      	subs	r0, r3, r2
 8004ef8:	6963      	ldr	r3, [r4, #20]
 8004efa:	b2f6      	uxtb	r6, r6
 8004efc:	4283      	cmp	r3, r0
 8004efe:	4637      	mov	r7, r6
 8004f00:	dc05      	bgt.n	8004f0e <__swbuf_r+0x4e>
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7ff fd99 	bl	8004a3c <_fflush_r>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d1ed      	bne.n	8004eea <__swbuf_r+0x2a>
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	60a3      	str	r3, [r4, #8]
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	6022      	str	r2, [r4, #0]
 8004f1a:	701e      	strb	r6, [r3, #0]
 8004f1c:	6962      	ldr	r2, [r4, #20]
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d004      	beq.n	8004f2e <__swbuf_r+0x6e>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	07db      	lsls	r3, r3, #31
 8004f28:	d5e1      	bpl.n	8004eee <__swbuf_r+0x2e>
 8004f2a:	2e0a      	cmp	r6, #10
 8004f2c:	d1df      	bne.n	8004eee <__swbuf_r+0x2e>
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f7ff fd83 	bl	8004a3c <_fflush_r>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d0d9      	beq.n	8004eee <__swbuf_r+0x2e>
 8004f3a:	e7d6      	b.n	8004eea <__swbuf_r+0x2a>

08004f3c <__swsetup_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4b29      	ldr	r3, [pc, #164]	@ (8004fe4 <__swsetup_r+0xa8>)
 8004f40:	4605      	mov	r5, r0
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	460c      	mov	r4, r1
 8004f46:	b118      	cbz	r0, 8004f50 <__swsetup_r+0x14>
 8004f48:	6a03      	ldr	r3, [r0, #32]
 8004f4a:	b90b      	cbnz	r3, 8004f50 <__swsetup_r+0x14>
 8004f4c:	f7fd ff98 	bl	8002e80 <__sinit>
 8004f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f54:	0719      	lsls	r1, r3, #28
 8004f56:	d422      	bmi.n	8004f9e <__swsetup_r+0x62>
 8004f58:	06da      	lsls	r2, r3, #27
 8004f5a:	d407      	bmi.n	8004f6c <__swsetup_r+0x30>
 8004f5c:	2209      	movs	r2, #9
 8004f5e:	602a      	str	r2, [r5, #0]
 8004f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f64:	81a3      	strh	r3, [r4, #12]
 8004f66:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6a:	e033      	b.n	8004fd4 <__swsetup_r+0x98>
 8004f6c:	0758      	lsls	r0, r3, #29
 8004f6e:	d512      	bpl.n	8004f96 <__swsetup_r+0x5a>
 8004f70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f72:	b141      	cbz	r1, 8004f86 <__swsetup_r+0x4a>
 8004f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	d002      	beq.n	8004f82 <__swsetup_r+0x46>
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f7fe ff07 	bl	8003d90 <_free_r>
 8004f82:	2300      	movs	r3, #0
 8004f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6063      	str	r3, [r4, #4]
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f043 0308 	orr.w	r3, r3, #8
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	6923      	ldr	r3, [r4, #16]
 8004fa0:	b94b      	cbnz	r3, 8004fb6 <__swsetup_r+0x7a>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fac:	d003      	beq.n	8004fb6 <__swsetup_r+0x7a>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 f883 	bl	80050bc <__smakebuf_r>
 8004fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fba:	f013 0201 	ands.w	r2, r3, #1
 8004fbe:	d00a      	beq.n	8004fd6 <__swsetup_r+0x9a>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	60a2      	str	r2, [r4, #8]
 8004fc4:	6962      	ldr	r2, [r4, #20]
 8004fc6:	4252      	negs	r2, r2
 8004fc8:	61a2      	str	r2, [r4, #24]
 8004fca:	6922      	ldr	r2, [r4, #16]
 8004fcc:	b942      	cbnz	r2, 8004fe0 <__swsetup_r+0xa4>
 8004fce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fd2:	d1c5      	bne.n	8004f60 <__swsetup_r+0x24>
 8004fd4:	bd38      	pop	{r3, r4, r5, pc}
 8004fd6:	0799      	lsls	r1, r3, #30
 8004fd8:	bf58      	it	pl
 8004fda:	6962      	ldrpl	r2, [r4, #20]
 8004fdc:	60a2      	str	r2, [r4, #8]
 8004fde:	e7f4      	b.n	8004fca <__swsetup_r+0x8e>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e7f7      	b.n	8004fd4 <__swsetup_r+0x98>
 8004fe4:	20000060 	.word	0x20000060

08004fe8 <_raise_r>:
 8004fe8:	291f      	cmp	r1, #31
 8004fea:	b538      	push	{r3, r4, r5, lr}
 8004fec:	4605      	mov	r5, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	d904      	bls.n	8004ffc <_raise_r+0x14>
 8004ff2:	2316      	movs	r3, #22
 8004ff4:	6003      	str	r3, [r0, #0]
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004ffe:	b112      	cbz	r2, 8005006 <_raise_r+0x1e>
 8005000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005004:	b94b      	cbnz	r3, 800501a <_raise_r+0x32>
 8005006:	4628      	mov	r0, r5
 8005008:	f000 f830 	bl	800506c <_getpid_r>
 800500c:	4622      	mov	r2, r4
 800500e:	4601      	mov	r1, r0
 8005010:	4628      	mov	r0, r5
 8005012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005016:	f000 b817 	b.w	8005048 <_kill_r>
 800501a:	2b01      	cmp	r3, #1
 800501c:	d00a      	beq.n	8005034 <_raise_r+0x4c>
 800501e:	1c59      	adds	r1, r3, #1
 8005020:	d103      	bne.n	800502a <_raise_r+0x42>
 8005022:	2316      	movs	r3, #22
 8005024:	6003      	str	r3, [r0, #0]
 8005026:	2001      	movs	r0, #1
 8005028:	e7e7      	b.n	8004ffa <_raise_r+0x12>
 800502a:	2100      	movs	r1, #0
 800502c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005030:	4620      	mov	r0, r4
 8005032:	4798      	blx	r3
 8005034:	2000      	movs	r0, #0
 8005036:	e7e0      	b.n	8004ffa <_raise_r+0x12>

08005038 <raise>:
 8005038:	4b02      	ldr	r3, [pc, #8]	@ (8005044 <raise+0xc>)
 800503a:	4601      	mov	r1, r0
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	f7ff bfd3 	b.w	8004fe8 <_raise_r>
 8005042:	bf00      	nop
 8005044:	20000060 	.word	0x20000060

08005048 <_kill_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	@ (8005068 <_kill_r+0x20>)
 800504c:	2300      	movs	r3, #0
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	f7fc ff58 	bl	8001f0a <_kill>
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	d102      	bne.n	8005064 <_kill_r+0x1c>
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	b103      	cbz	r3, 8005064 <_kill_r+0x1c>
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	bd38      	pop	{r3, r4, r5, pc}
 8005066:	bf00      	nop
 8005068:	2000038c 	.word	0x2000038c

0800506c <_getpid_r>:
 800506c:	f7fc bf45 	b.w	8001efa <_getpid>

08005070 <__swhatbuf_r>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	460c      	mov	r4, r1
 8005074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005078:	2900      	cmp	r1, #0
 800507a:	b096      	sub	sp, #88	@ 0x58
 800507c:	4615      	mov	r5, r2
 800507e:	461e      	mov	r6, r3
 8005080:	da0d      	bge.n	800509e <__swhatbuf_r+0x2e>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	bf14      	ite	ne
 800508e:	2340      	movne	r3, #64	@ 0x40
 8005090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005094:	2000      	movs	r0, #0
 8005096:	6031      	str	r1, [r6, #0]
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	b016      	add	sp, #88	@ 0x58
 800509c:	bd70      	pop	{r4, r5, r6, pc}
 800509e:	466a      	mov	r2, sp
 80050a0:	f000 f848 	bl	8005134 <_fstat_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	dbec      	blt.n	8005082 <__swhatbuf_r+0x12>
 80050a8:	9901      	ldr	r1, [sp, #4]
 80050aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050b2:	4259      	negs	r1, r3
 80050b4:	4159      	adcs	r1, r3
 80050b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050ba:	e7eb      	b.n	8005094 <__swhatbuf_r+0x24>

080050bc <__smakebuf_r>:
 80050bc:	898b      	ldrh	r3, [r1, #12]
 80050be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c0:	079d      	lsls	r5, r3, #30
 80050c2:	4606      	mov	r6, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	d507      	bpl.n	80050d8 <__smakebuf_r+0x1c>
 80050c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2301      	movs	r3, #1
 80050d2:	6163      	str	r3, [r4, #20]
 80050d4:	b003      	add	sp, #12
 80050d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d8:	ab01      	add	r3, sp, #4
 80050da:	466a      	mov	r2, sp
 80050dc:	f7ff ffc8 	bl	8005070 <__swhatbuf_r>
 80050e0:	9f00      	ldr	r7, [sp, #0]
 80050e2:	4605      	mov	r5, r0
 80050e4:	4639      	mov	r1, r7
 80050e6:	4630      	mov	r0, r6
 80050e8:	f7fe fec6 	bl	8003e78 <_malloc_r>
 80050ec:	b948      	cbnz	r0, 8005102 <__smakebuf_r+0x46>
 80050ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f2:	059a      	lsls	r2, r3, #22
 80050f4:	d4ee      	bmi.n	80050d4 <__smakebuf_r+0x18>
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	81a3      	strh	r3, [r4, #12]
 8005100:	e7e2      	b.n	80050c8 <__smakebuf_r+0xc>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	6020      	str	r0, [r4, #0]
 8005106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005112:	b15b      	cbz	r3, 800512c <__smakebuf_r+0x70>
 8005114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005118:	4630      	mov	r0, r6
 800511a:	f000 f81d 	bl	8005158 <_isatty_r>
 800511e:	b128      	cbz	r0, 800512c <__smakebuf_r+0x70>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	431d      	orrs	r5, r3
 8005130:	81a5      	strh	r5, [r4, #12]
 8005132:	e7cf      	b.n	80050d4 <__smakebuf_r+0x18>

08005134 <_fstat_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	@ (8005154 <_fstat_r+0x20>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	f7fc ff42 	bl	8001fca <_fstat>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d102      	bne.n	8005150 <_fstat_r+0x1c>
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	b103      	cbz	r3, 8005150 <_fstat_r+0x1c>
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	bd38      	pop	{r3, r4, r5, pc}
 8005152:	bf00      	nop
 8005154:	2000038c 	.word	0x2000038c

08005158 <_isatty_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d06      	ldr	r5, [pc, #24]	@ (8005174 <_isatty_r+0x1c>)
 800515c:	2300      	movs	r3, #0
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	602b      	str	r3, [r5, #0]
 8005164:	f7fc ff41 	bl	8001fea <_isatty>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_isatty_r+0x1a>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_isatty_r+0x1a>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	2000038c 	.word	0x2000038c

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	bf00      	nop
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr
