
LoRa-R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08004e58  08004e58  00005e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005300  08005300  0000721c  2**0
                  CONTENTS
  4 .ARM          00000008  08005300  08005300  00006300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005308  08005308  0000721c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005308  08005308  00006308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800530c  0800530c  0000630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  08005310  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000021c  0800552c  0000721c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800552c  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000721c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000443a  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001465  00000000  00000000  0000b686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  0000caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ca  00000000  00000000  0000cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169f8  00000000  00000000  0000d1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007aa9  00000000  00000000  00023bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084809  00000000  00000000  0002b66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afe74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d60  00000000  00000000  000afeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b1c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e40 	.word	0x08004e40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08004e40 	.word	0x08004e40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <button_init>:
#include "button.h"

volatile uint8_t system_powered_on = 0;
volatile uint8_t buzzer_should_off = 0;

void button_init(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    // PC13 - ON/OFF
    SYSCFG->EXTICR[3] &= ~(0xF << 4);  // EXTI13 ← PC13
 8000bf8:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <button_init+0xac>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	4a28      	ldr	r2, [pc, #160]	@ (8000ca0 <button_init+0xac>)
 8000bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c02:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |=  (0x2 << 4);
 8000c04:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <button_init+0xac>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a25      	ldr	r2, [pc, #148]	@ (8000ca0 <button_init+0xac>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6153      	str	r3, [r2, #20]
    EXTI->IMR  |= (1 << BTN_ONOFF_PIN);
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <button_init+0xb0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a23      	ldr	r2, [pc, #140]	@ (8000ca4 <button_init+0xb0>)
 8000c16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c1a:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << BTN_ONOFF_PIN);
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <button_init+0xb0>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <button_init+0xb0>)
 8000c22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c26:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c28:	2028      	movs	r0, #40	@ 0x28
 8000c2a:	f7ff ffc5 	bl	8000bb8 <__NVIC_EnableIRQ>

    // PB3 - RESET

    SYSCFG->EXTICR[0] &= ~(0xF << (4 * BTN_RESET_PIN));
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <button_init+0xac>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <button_init+0xac>)
 8000c34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000c38:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  (0x1 << (4 * BTN_RESET_PIN));
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <button_init+0xac>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <button_init+0xac>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c44:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= (1 << BTN_RESET_PIN);
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <button_init+0xb0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <button_init+0xb0>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << BTN_RESET_PIN);
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <button_init+0xb0>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <button_init+0xb0>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI3_IRQn);
 8000c5e:	2009      	movs	r0, #9
 8000c60:	f7ff ffaa 	bl	8000bb8 <__NVIC_EnableIRQ>

    // PB5 - BUZZ OFF

    SYSCFG->EXTICR[1] &= ~(0xF << (4 * (BTN_BUZZ_PIN - 4)));
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <button_init+0xac>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <button_init+0xac>)
 8000c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000c6e:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |=  (0x1 << (4 * (BTN_BUZZ_PIN - 4)));
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <button_init+0xac>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <button_init+0xac>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	60d3      	str	r3, [r2, #12]
    EXTI->IMR  |= (1 << BTN_BUZZ_PIN);
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <button_init+0xb0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <button_init+0xb0>)
 8000c82:	f043 0320 	orr.w	r3, r3, #32
 8000c86:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << BTN_BUZZ_PIN);
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <button_init+0xb0>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <button_init+0xb0>)
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c94:	2017      	movs	r0, #23
 8000c96:	f7ff ff8f 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	40013c00 	.word	0x40013c00

08000ca8 <buzzer_on>:
#define BUZZER_PIN 10  // PB10

static uint32_t buzzer_start = 0;
static uint32_t buzzer_running = 0;

void buzzer_on(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	if (!buzzer_running){
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <buzzer_on+0x2c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10d      	bne.n	8000cd0 <buzzer_on+0x28>
		GPIOB->ODR |= (1 << BUZZER_PIN);
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <buzzer_on+0x30>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <buzzer_on+0x30>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cbe:	6153      	str	r3, [r2, #20]
		buzzer_start = millis();
 8000cc0:	f001 f9ec 	bl	800209c <millis>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <buzzer_on+0x34>)
 8000cc8:	6013      	str	r3, [r2, #0]
		buzzer_running = 1;
 8000cca:	4b02      	ldr	r3, [pc, #8]	@ (8000cd4 <buzzer_on+0x2c>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000240 	.word	0x20000240
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	2000023c 	.word	0x2000023c

08000ce0 <buzzer_off>:

void buzzer_off(void) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << BUZZER_PIN);
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <buzzer_off+0x20>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <buzzer_off+0x20>)
 8000cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cee:	6153      	str	r3, [r2, #20]
    buzzer_running = 0;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <buzzer_off+0x24>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40020400 	.word	0x40020400
 8000d04:	20000240 	.word	0x20000240

08000d08 <__NVIC_EnableIRQ>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <gpio_init_all>:
#include "stm32f4xx.h"

void gpio_init_all(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    // Enable GPIO clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 8000d48:	4b8a      	ldr	r3, [pc, #552]	@ (8000f74 <gpio_init_all+0x230>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	4a89      	ldr	r2, [pc, #548]	@ (8000f74 <gpio_init_all+0x230>)
 8000d4e:	f043 0307 	orr.w	r3, r3, #7
 8000d52:	6313      	str	r3, [r2, #48]	@ 0x30
                    RCC_AHB1ENR_GPIOCEN;

    // ------------------------
    // BUTTONS: PC13, PB3, PB5 (Input + Pull-up)
    // ------------------------
    GPIOC->MODER &= ~(0x3 << (13 * 2));  // PC13
 8000d54:	4b88      	ldr	r3, [pc, #544]	@ (8000f78 <gpio_init_all+0x234>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a87      	ldr	r2, [pc, #540]	@ (8000f78 <gpio_init_all+0x234>)
 8000d5a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d5e:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(0x3 << (13 * 2));
 8000d60:	4b85      	ldr	r3, [pc, #532]	@ (8000f78 <gpio_init_all+0x234>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4a84      	ldr	r2, [pc, #528]	@ (8000f78 <gpio_init_all+0x234>)
 8000d66:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d6a:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |=  (0x1 << (13 * 2));
 8000d6c:	4b82      	ldr	r3, [pc, #520]	@ (8000f78 <gpio_init_all+0x234>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	4a81      	ldr	r2, [pc, #516]	@ (8000f78 <gpio_init_all+0x234>)
 8000d72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d76:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(0x3 << (3 * 2));   // PB3
 8000d78:	4b80      	ldr	r3, [pc, #512]	@ (8000f7c <gpio_init_all+0x238>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f7c <gpio_init_all+0x238>)
 8000d7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000d82:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(0x3 << (3 * 2));
 8000d84:	4b7d      	ldr	r3, [pc, #500]	@ (8000f7c <gpio_init_all+0x238>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a7c      	ldr	r2, [pc, #496]	@ (8000f7c <gpio_init_all+0x238>)
 8000d8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000d8e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (0x1 << (3 * 2));
 8000d90:	4b7a      	ldr	r3, [pc, #488]	@ (8000f7c <gpio_init_all+0x238>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a79      	ldr	r2, [pc, #484]	@ (8000f7c <gpio_init_all+0x238>)
 8000d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d9a:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(0x3 << (5 * 2));   // PB5
 8000d9c:	4b77      	ldr	r3, [pc, #476]	@ (8000f7c <gpio_init_all+0x238>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a76      	ldr	r2, [pc, #472]	@ (8000f7c <gpio_init_all+0x238>)
 8000da2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000da6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(0x3 << (5 * 2));
 8000da8:	4b74      	ldr	r3, [pc, #464]	@ (8000f7c <gpio_init_all+0x238>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	4a73      	ldr	r2, [pc, #460]	@ (8000f7c <gpio_init_all+0x238>)
 8000dae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000db2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (0x1 << (5 * 2));
 8000db4:	4b71      	ldr	r3, [pc, #452]	@ (8000f7c <gpio_init_all+0x238>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	4a70      	ldr	r2, [pc, #448]	@ (8000f7c <gpio_init_all+0x238>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dbe:	60d3      	str	r3, [r2, #12]

    // ------------------------
    // LEDS: PB0, PB1, PC2, PC3 (Output)
    // ------------------------
    GPIOB->MODER &= ~(0x3 << (0 * 2));
 8000dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8000f7c <gpio_init_all+0x238>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a6d      	ldr	r2, [pc, #436]	@ (8000f7c <gpio_init_all+0x238>)
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0x1 << (0 * 2));  // Output
 8000dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8000f7c <gpio_init_all+0x238>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a6a      	ldr	r2, [pc, #424]	@ (8000f7c <gpio_init_all+0x238>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]

    GPIOB->MODER &= ~(0x3 << (1 * 2));
 8000dd8:	4b68      	ldr	r3, [pc, #416]	@ (8000f7c <gpio_init_all+0x238>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a67      	ldr	r2, [pc, #412]	@ (8000f7c <gpio_init_all+0x238>)
 8000dde:	f023 030c 	bic.w	r3, r3, #12
 8000de2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0x1 << (1 * 2));  // Output
 8000de4:	4b65      	ldr	r3, [pc, #404]	@ (8000f7c <gpio_init_all+0x238>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a64      	ldr	r2, [pc, #400]	@ (8000f7c <gpio_init_all+0x238>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(0x3 << (2 * 2));
 8000df0:	4b61      	ldr	r3, [pc, #388]	@ (8000f78 <gpio_init_all+0x234>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a60      	ldr	r2, [pc, #384]	@ (8000f78 <gpio_init_all+0x234>)
 8000df6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dfa:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (0x1 << (2 * 2));  // Output
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8000f78 <gpio_init_all+0x234>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a5d      	ldr	r2, [pc, #372]	@ (8000f78 <gpio_init_all+0x234>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(0x3 << (3 * 2));
 8000e08:	4b5b      	ldr	r3, [pc, #364]	@ (8000f78 <gpio_init_all+0x234>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8000f78 <gpio_init_all+0x234>)
 8000e0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000e12:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (0x1 << (3 * 2));  // Output
 8000e14:	4b58      	ldr	r3, [pc, #352]	@ (8000f78 <gpio_init_all+0x234>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a57      	ldr	r2, [pc, #348]	@ (8000f78 <gpio_init_all+0x234>)
 8000e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1e:	6013      	str	r3, [r2, #0]

    // ------------------------
    // BUZZER: PB10 (Output)
    // ------------------------
    GPIOB->MODER &= ~(0x3 << (10 * 2));
 8000e20:	4b56      	ldr	r3, [pc, #344]	@ (8000f7c <gpio_init_all+0x238>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a55      	ldr	r2, [pc, #340]	@ (8000f7c <gpio_init_all+0x238>)
 8000e26:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000e2a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0x1 << (10 * 2));    // Output mode
 8000e2c:	4b53      	ldr	r3, [pc, #332]	@ (8000f7c <gpio_init_all+0x238>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a52      	ldr	r2, [pc, #328]	@ (8000f7c <gpio_init_all+0x238>)
 8000e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e36:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 10);           // Push-pull
 8000e38:	4b50      	ldr	r3, [pc, #320]	@ (8000f7c <gpio_init_all+0x238>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f7c <gpio_init_all+0x238>)
 8000e3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e42:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0x3 << (10 * 2));   // High speed
 8000e44:	4b4d      	ldr	r3, [pc, #308]	@ (8000f7c <gpio_init_all+0x238>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4a4c      	ldr	r2, [pc, #304]	@ (8000f7c <gpio_init_all+0x238>)
 8000e4a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000e4e:	6093      	str	r3, [r2, #8]

    // ------------------------
    // LoRa SPI: PA5 (SCK), PA6 (MISO), PA7 (MOSI) – AF5
    // ------------------------
    GPIOA->MODER &= ~((0x3 << (5 * 2)) | (0x3 << (6 * 2)) | (0x3 << (7 * 2)));
 8000e50:	4b4b      	ldr	r3, [pc, #300]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e56:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000e5a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((0x2 << (5 * 2)) | (0x2 << (6 * 2)) | (0x2 << (7 * 2))); // AF mode
 8000e5c:	4b48      	ldr	r3, [pc, #288]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a47      	ldr	r2, [pc, #284]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e62:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000e66:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (5 * 4)) | (0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000e68:	4b45      	ldr	r3, [pc, #276]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a44      	ldr	r2, [pc, #272]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e72:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((0x5 << (5 * 4)) | (0x5 << (6 * 4)) | (0x5 << (7 * 4))); // AF5 = SPI1
 8000e74:	4b42      	ldr	r3, [pc, #264]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a41      	ldr	r2, [pc, #260]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e7a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000e7e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000e82:	6213      	str	r3, [r2, #32]

    // ------------------------
    // LoRa NSS: PA4 (Output)
    // ------------------------
    GPIOA->MODER &= ~(0x3 << (4 * 2));
 8000e84:	4b3e      	ldr	r3, [pc, #248]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3d      	ldr	r2, [pc, #244]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e8e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0x1 << (4 * 2)); // Output
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a3a      	ldr	r2, [pc, #232]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 4);
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <gpio_init_all+0x23c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ea2:	f023 0310 	bic.w	r3, r3, #16
 8000ea6:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (0x3 << (4 * 2));
 8000ea8:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000eb2:	6093      	str	r3, [r2, #8]

    // ------------------------
    // LoRa DIO0: PA0 (Input + Interrupt)
    // ------------------------
    GPIOA->MODER &= ~(0x3 << (0 * 2));
 8000eb4:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a31      	ldr	r2, [pc, #196]	@ (8000f80 <gpio_init_all+0x23c>)
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(0x3 << (0 * 2));
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0x2 << (0 * 2)); // Pull-down
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f80 <gpio_init_all+0x23c>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	60d3      	str	r3, [r2, #12]

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <gpio_init_all+0x230>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	4a25      	ldr	r2, [pc, #148]	@ (8000f74 <gpio_init_all+0x230>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee2:	6453      	str	r3, [r2, #68]	@ 0x44
    SYSCFG->EXTICR[0] &= ~(0xF << 0); // PA0 = EXTI0
 8000ee4:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <gpio_init_all+0x240>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a26      	ldr	r2, [pc, #152]	@ (8000f84 <gpio_init_all+0x240>)
 8000eea:	f023 030f 	bic.w	r3, r3, #15
 8000eee:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= (1 << 0);  // Unmask line 0
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <gpio_init_all+0x244>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a24      	ldr	r2, [pc, #144]	@ (8000f88 <gpio_init_all+0x244>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << 0);  // Rising edge
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <gpio_init_all+0x244>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <gpio_init_all+0x244>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f7ff fefd 	bl	8000d08 <__NVIC_EnableIRQ>

    // ------------------------
    // LCD I2C (I2C1): PB8 (SCL), PB9 (SDA) – AF4
    // ------------------------
    GPIOB->MODER &= ~((0x3 << (8 * 2)) | (0x3 << (9 * 2)));    // Clear mode
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <gpio_init_all+0x238>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <gpio_init_all+0x238>)
 8000f14:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000f18:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((0x2 << (8 * 2)) | (0x2 << (9 * 2)));    // AF mode
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <gpio_init_all+0x238>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a17      	ldr	r2, [pc, #92]	@ (8000f7c <gpio_init_all+0x238>)
 8000f20:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000f24:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4))); // Clear AFR
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <gpio_init_all+0x238>)
 8000f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2a:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <gpio_init_all+0x238>)
 8000f2c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f30:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((0x4 << ((8 - 8) * 4)) | (0x4 << ((9 - 8) * 4))); // AF4 = I2C1
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <gpio_init_all+0x238>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <gpio_init_all+0x238>)
 8000f38:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000f3c:	6253      	str	r3, [r2, #36]	@ 0x24

    GPIOB->OTYPER |=  (1 << 8) | (1 << 9);     // Open-drain
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <gpio_init_all+0x238>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <gpio_init_all+0x238>)
 8000f44:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000f48:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0x3 << (8 * 2)) | (0x3 << (9 * 2)); // High speed
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <gpio_init_all+0x238>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <gpio_init_all+0x238>)
 8000f50:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000f54:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR   |= (0x1 << (8 * 2)) | (0x1 << (9 * 2)); // Pull-up
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <gpio_init_all+0x238>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <gpio_init_all+0x238>)
 8000f5c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000f60:	60d3      	str	r3, [r2, #12]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // Enable I2C1
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <gpio_init_all+0x230>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a03      	ldr	r2, [pc, #12]	@ (8000f74 <gpio_init_all+0x230>)
 8000f68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40013c00 	.word	0x40013c00

08000f8c <i2c2_init>:
#include "stm32f4xx.h"
#include "i2c.h"

// I2C1: SCL = PB8, SDA = PB9
void i2c2_init(void) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;    // Enable GPIOB clock
 8000f90:	4b39      	ldr	r3, [pc, #228]	@ (8001078 <i2c2_init+0xec>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a38      	ldr	r2, [pc, #224]	@ (8001078 <i2c2_init+0xec>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;     // Enable I2C1 clock
 8000f9c:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <i2c2_init+0xec>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	4a35      	ldr	r2, [pc, #212]	@ (8001078 <i2c2_init+0xec>)
 8000fa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fa6:	6413      	str	r3, [r2, #64]	@ 0x40

    // PB8 - SCL
    GPIOB->MODER &= ~(3 << (8 * 2));
 8000fa8:	4b34      	ldr	r3, [pc, #208]	@ (800107c <i2c2_init+0xf0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a33      	ldr	r2, [pc, #204]	@ (800107c <i2c2_init+0xf0>)
 8000fae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000fb2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (8 * 2));         // Alternate function mode
 8000fb4:	4b31      	ldr	r3, [pc, #196]	@ (800107c <i2c2_init+0xf0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a30      	ldr	r2, [pc, #192]	@ (800107c <i2c2_init+0xf0>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbe:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((8 - 8) * 4));
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <i2c2_init+0xf0>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800107c <i2c2_init+0xf0>)
 8000fc6:	f023 030f 	bic.w	r3, r3, #15
 8000fca:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((8 - 8) * 4));   // AF4 for I2C1
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <i2c2_init+0xf0>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800107c <i2c2_init+0xf0>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 8);               // Open-drain
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <i2c2_init+0xf0>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a27      	ldr	r2, [pc, #156]	@ (800107c <i2c2_init+0xf0>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe2:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (8 * 2));
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <i2c2_init+0xf0>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a24      	ldr	r2, [pc, #144]	@ (800107c <i2c2_init+0xf0>)
 8000fea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000fee:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (8 * 2));          // Pull-up
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <i2c2_init+0xf0>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <i2c2_init+0xf0>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffa:	60d3      	str	r3, [r2, #12]

    // PB9 - SDA
    GPIOB->MODER &= ~(3 << (9 * 2));
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <i2c2_init+0xf0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <i2c2_init+0xf0>)
 8001002:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001006:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (9 * 2));         // Alternate function mode
 8001008:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <i2c2_init+0xf0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1b      	ldr	r2, [pc, #108]	@ (800107c <i2c2_init+0xf0>)
 800100e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001012:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <i2c2_init+0xf0>)
 8001016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001018:	4a18      	ldr	r2, [pc, #96]	@ (800107c <i2c2_init+0xf0>)
 800101a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800101e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));   // AF4 for I2C1
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <i2c2_init+0xf0>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	4a15      	ldr	r2, [pc, #84]	@ (800107c <i2c2_init+0xf0>)
 8001026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800102a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 9);               // Open-drain
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <i2c2_init+0xf0>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a12      	ldr	r2, [pc, #72]	@ (800107c <i2c2_init+0xf0>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001036:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (9 * 2));
 8001038:	4b10      	ldr	r3, [pc, #64]	@ (800107c <i2c2_init+0xf0>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <i2c2_init+0xf0>)
 800103e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001042:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (9 * 2));          // Pull-up
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <i2c2_init+0xf0>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <i2c2_init+0xf0>)
 800104a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800104e:	60d3      	str	r3, [r2, #12]

    // I2C1 configuration (100kHz @ APB1 = 16 MHz)
    I2C1->CR2 = 16;              // APB1 frequency in MHz
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <i2c2_init+0xf4>)
 8001052:	2210      	movs	r2, #16
 8001054:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;              // Clock control value
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <i2c2_init+0xf4>)
 8001058:	2250      	movs	r2, #80	@ 0x50
 800105a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;            // Maximum rise time
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <i2c2_init+0xf4>)
 800105e:	2211      	movs	r2, #17
 8001060:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;     // Enable I2C1
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <i2c2_init+0xf4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <i2c2_init+0xf4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40023800 	.word	0x40023800
 800107c:	40020400 	.word	0x40020400
 8001080:	40005400 	.word	0x40005400

08001084 <lcd_i2c_start>:
#include "stm32f4xx.h"
#include "lcd.h"

void lcd_i2c_start(void) {
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <lcd_i2c_start+0x44>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	@ (80010c8 <lcd_i2c_start+0x44>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001092:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8001094:	bf00      	nop
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <lcd_i2c_start+0x44>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f9      	beq.n	8001096 <lcd_i2c_start+0x12>
    I2C1->DR = (LCD_ADDR << 1);               // Gửi địa chỉ LCD (ghi)
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010a4:	224e      	movs	r2, #78	@ 0x4e
 80010a6:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80010a8:	bf00      	nop
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f9      	beq.n	80010aa <lcd_i2c_start+0x26>
    (void)I2C1->SR1; (void)I2C1->SR2;
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <lcd_i2c_start+0x44>)
 80010bc:	699b      	ldr	r3, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40005400 	.word	0x40005400

080010cc <lcd_i2c_stop>:

void lcd_i2c_stop(void) {
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <lcd_i2c_stop+0x1c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <lcd_i2c_stop+0x1c>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40005400 	.word	0x40005400

080010ec <lcd_i2c_write>:

void lcd_i2c_write(uint8_t data) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80010f6:	bf00      	nop
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <lcd_i2c_write+0x3c>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f9      	beq.n	80010f8 <lcd_i2c_write+0xc>
    I2C1->DR = data;
 8001104:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <lcd_i2c_write+0x3c>)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800110a:	bf00      	nop
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <lcd_i2c_write+0x3c>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f9      	beq.n	800110c <lcd_i2c_write+0x20>
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40005400 	.word	0x40005400

0800112c <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble, uint8_t control) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0) | control | LCD_BACKLIGHT;
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	f023 030f 	bic.w	r3, r3, #15
 8001144:	b25a      	sxtb	r2, r3
 8001146:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800114a:	4313      	orrs	r3, r2
 800114c:	b25b      	sxtb	r3, r3
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	b25b      	sxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]
    lcd_i2c_start();
 8001156:	f7ff ff95 	bl	8001084 <lcd_i2c_start>
    lcd_i2c_write(data);
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffc5 	bl	80010ec <lcd_i2c_write>
    lcd_i2c_write(data | LCD_ENABLE);
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffbe 	bl	80010ec <lcd_i2c_write>
    for (volatile int i = 0; i < 1000; i++);
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	e002      	b.n	800117c <lcd_write_nibble+0x50>
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3301      	adds	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001182:	dbf8      	blt.n	8001176 <lcd_write_nibble+0x4a>
    lcd_i2c_write(data & ~LCD_ENABLE);
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	f023 0304 	bic.w	r3, r3, #4
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ffad 	bl	80010ec <lcd_i2c_write>
    lcd_i2c_stop();
 8001192:	f7ff ff9b 	bl	80010cc <lcd_i2c_stop>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <lcd_write_byte>:

void lcd_write_byte(uint8_t byte, uint8_t control) {
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	460a      	mov	r2, r1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	4613      	mov	r3, r2
 80011ac:	71bb      	strb	r3, [r7, #6]
    lcd_write_nibble(byte & 0xF0, control);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f023 030f 	bic.w	r3, r3, #15
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	79ba      	ldrb	r2, [r7, #6]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffb6 	bl	800112c <lcd_write_nibble>
    lcd_write_nibble((byte << 4) & 0xF0, control);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	79ba      	ldrb	r2, [r7, #6]
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffae 	bl	800112c <lcd_write_nibble>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <lcd_command>:

void lcd_command(uint8_t cmd) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(cmd, 0x00);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffd9 	bl	800119e <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e002      	b.n	80011f8 <lcd_command+0x20>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011fe:	4293      	cmp	r3, r2
 8001200:	ddf7      	ble.n	80011f2 <lcd_command+0x1a>
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <lcd_data>:

void lcd_data(uint8_t data) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(data, LCD_REGISTER_SELECT);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2101      	movs	r1, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffbf 	bl	800119e <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e002      	b.n	800122c <lcd_data+0x20>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001232:	4293      	cmp	r3, r2
 8001234:	ddf7      	ble.n	8001226 <lcd_data+0x1a>
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <lcd_init>:

void lcd_init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 100000; i++);
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	e002      	b.n	8001252 <lcd_init+0x12>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <lcd_init+0x60>)
 8001256:	4293      	cmp	r3, r2
 8001258:	ddf8      	ble.n	800124c <lcd_init+0xc>
    lcd_command(0x33);
 800125a:	2033      	movs	r0, #51	@ 0x33
 800125c:	f7ff ffbc 	bl	80011d8 <lcd_command>
    lcd_command(0x32);
 8001260:	2032      	movs	r0, #50	@ 0x32
 8001262:	f7ff ffb9 	bl	80011d8 <lcd_command>
    lcd_command(0x28);
 8001266:	2028      	movs	r0, #40	@ 0x28
 8001268:	f7ff ffb6 	bl	80011d8 <lcd_command>
    lcd_command(0x0C);
 800126c:	200c      	movs	r0, #12
 800126e:	f7ff ffb3 	bl	80011d8 <lcd_command>
    lcd_command(0x06);
 8001272:	2006      	movs	r0, #6
 8001274:	f7ff ffb0 	bl	80011d8 <lcd_command>
    lcd_command(0x01);
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff ffad 	bl	80011d8 <lcd_command>
    for (volatile int i = 0; i < 50000; i++);
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	e002      	b.n	800128a <lcd_init+0x4a>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001290:	4293      	cmp	r3, r2
 8001292:	ddf7      	ble.n	8001284 <lcd_init+0x44>
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	0001869f 	.word	0x0001869f

080012a4 <lcd_print>:

void lcd_print(char *str) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    while (*str) {
 80012ac:	e006      	b.n	80012bc <lcd_print+0x18>
        lcd_data((uint8_t)(*str++));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ffa8 	bl	800120c <lcd_data>
    while (*str) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f4      	bne.n	80012ae <lcd_print+0xa>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <led_on>:
    {LED_IGNORE_PORT,LED_IGNORE_PIN,0, 0, 0}
};

#define NUM_LEDS (sizeof(leds) / sizeof(leds[0]))

void led_on(GPIO_TypeDef* port, uint8_t pin) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_LEDS; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e043      	b.n	800136a <led_on+0x9a>
		if (leds[i].port == port && leds[i].pin == pin){
 80012e2:	4926      	ldr	r1, [pc, #152]	@ (800137c <led_on+0xac>)
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d135      	bne.n	8001364 <led_on+0x94>
 80012f8:	4920      	ldr	r1, [pc, #128]	@ (800137c <led_on+0xac>)
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	78fa      	ldrb	r2, [r7, #3]
 800130c:	429a      	cmp	r2, r3
 800130e:	d129      	bne.n	8001364 <led_on+0x94>
			if (!leds[i].active){
 8001310:	491a      	ldr	r1, [pc, #104]	@ (800137c <led_on+0xac>)
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	3310      	adds	r3, #16
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d112      	bne.n	800134c <led_on+0x7c>
				leds[i].active = 1;
 8001326:	4915      	ldr	r1, [pc, #84]	@ (800137c <led_on+0xac>)
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	3310      	adds	r3, #16
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
				port->ODR |= (1 << pin);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	615a      	str	r2, [r3, #20]
			}
			leds[i].start_time = millis();
 800134c:	f000 fea6 	bl	800209c <millis>
 8001350:	4601      	mov	r1, r0
 8001352:	480a      	ldr	r0, [pc, #40]	@ (800137c <led_on+0xac>)
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4403      	add	r3, r0
 8001360:	3308      	adds	r3, #8
 8001362:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_LEDS; i++){
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d9b8      	bls.n	80012e2 <led_on+0x12>
		}
	}
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000

08001380 <led_off>:

void led_off(GPIO_TypeDef* port, uint8_t pin) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_LEDS; i++){
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e02d      	b.n	80013ee <led_off+0x6e>
		if (leds[i].port == port && leds[i].pin == pin){
 8001392:	491c      	ldr	r1, [pc, #112]	@ (8001404 <led_off+0x84>)
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d11f      	bne.n	80013e8 <led_off+0x68>
 80013a8:	4916      	ldr	r1, [pc, #88]	@ (8001404 <led_off+0x84>)
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3304      	adds	r3, #4
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d113      	bne.n	80013e8 <led_off+0x68>
			port->ODR &= ~(1 << pin);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	78fa      	ldrb	r2, [r7, #3]
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f202 	lsl.w	r2, r1, r2
 80013cc:	43d2      	mvns	r2, r2
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	615a      	str	r2, [r3, #20]
			leds[i].active = 0;
 80013d4:	490b      	ldr	r1, [pc, #44]	@ (8001404 <led_off+0x84>)
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3310      	adds	r3, #16
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_LEDS; i++){
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3301      	adds	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d9ce      	bls.n	8001392 <led_off+0x12>
		}
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000

08001408 <led_toggle>:

void led_toggle(GPIO_TypeDef* port, uint8_t pin) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_LEDS; i++){
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e04e      	b.n	80014b8 <led_toggle+0xb0>
		if (leds[i].port == port && leds[i].pin == pin){
 800141a:	492b      	ldr	r1, [pc, #172]	@ (80014c8 <led_toggle+0xc0>)
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d140      	bne.n	80014b2 <led_toggle+0xaa>
 8001430:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <led_toggle+0xc0>)
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	3304      	adds	r3, #4
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	78fa      	ldrb	r2, [r7, #3]
 8001444:	429a      	cmp	r2, r3
 8001446:	d134      	bne.n	80014b2 <led_toggle+0xaa>
			port->ODR ^= (1 << pin);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	405a      	eors	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	615a      	str	r2, [r3, #20]
			if (leds[i].active == 0){
 800145a:	491b      	ldr	r1, [pc, #108]	@ (80014c8 <led_toggle+0xc0>)
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	3310      	adds	r3, #16
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d116      	bne.n	800149e <led_toggle+0x96>
				leds[i].active = 1;
 8001470:	4915      	ldr	r1, [pc, #84]	@ (80014c8 <led_toggle+0xc0>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	3310      	adds	r3, #16
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
				leds[i].start_time = millis();
 8001484:	f000 fe0a 	bl	800209c <millis>
 8001488:	4601      	mov	r1, r0
 800148a:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <led_toggle+0xc0>)
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	3308      	adds	r3, #8
 800149a:	6019      	str	r1, [r3, #0]
 800149c:	e009      	b.n	80014b2 <led_toggle+0xaa>
			}
			else {
				leds[i].active = 0;
 800149e:	490a      	ldr	r1, [pc, #40]	@ (80014c8 <led_toggle+0xc0>)
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3310      	adds	r3, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_LEDS; i++){
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d9ad      	bls.n	800141a <led_toggle+0x12>
			}
		}
	}
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000000 	.word	0x20000000

080014cc <led_check>:
			leds[i].duration = delay_ms;
		}
	}
}

void led_check(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS; i++){
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	e04e      	b.n	8001576 <led_check+0xaa>
		if(leds[i].active && leds[i].duration && millis() - leds[i].start_time >= leds[i].duration){
 80014d8:	492b      	ldr	r1, [pc, #172]	@ (8001588 <led_check+0xbc>)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3310      	adds	r3, #16
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d040      	beq.n	8001570 <led_check+0xa4>
 80014ee:	4926      	ldr	r1, [pc, #152]	@ (8001588 <led_check+0xbc>)
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	330c      	adds	r3, #12
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d035      	beq.n	8001570 <led_check+0xa4>
 8001504:	f000 fdca 	bl	800209c <millis>
 8001508:	4601      	mov	r1, r0
 800150a:	481f      	ldr	r0, [pc, #124]	@ (8001588 <led_check+0xbc>)
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4403      	add	r3, r0
 8001518:	3308      	adds	r3, #8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1ac9      	subs	r1, r1, r3
 800151e:	481a      	ldr	r0, [pc, #104]	@ (8001588 <led_check+0xbc>)
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	330c      	adds	r3, #12
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4299      	cmp	r1, r3
 8001532:	d31d      	bcc.n	8001570 <led_check+0xa4>
			leds[i].duration = 0;
 8001534:	4914      	ldr	r1, [pc, #80]	@ (8001588 <led_check+0xbc>)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	330c      	adds	r3, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
			led_off(leds[i].port, leds[i].pin);
 8001548:	490f      	ldr	r1, [pc, #60]	@ (8001588 <led_check+0xbc>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	490b      	ldr	r1, [pc, #44]	@ (8001588 <led_check+0xbc>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3304      	adds	r3, #4
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff ff08 	bl	8001380 <led_off>
	for (int i = 0; i < NUM_LEDS; i++){
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3301      	adds	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d9ad      	bls.n	80014d8 <led_check+0xc>
		}
	}
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000

0800158c <__NVIC_EnableIRQ>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	@ (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <spi1_write>:
#define LORA_RST_LOW()   (GPIOA->BSRR = GPIO_BSRR_BR2)
#define LORA_RST_HIGH()  (GPIOA->BSRR = GPIO_BSRR_BS2)



static void spi1_write(uint8_t data) {
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 80015d2:	bf00      	nop
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <spi1_write+0x3c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f9      	beq.n	80015d4 <spi1_write+0xc>
    *(volatile uint8_t*)&SPI1->DR = data;
 80015e0:	4a09      	ldr	r2, [pc, #36]	@ (8001608 <spi1_write+0x40>)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	7013      	strb	r3, [r2, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 80015e6:	bf00      	nop
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <spi1_write+0x3c>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f9      	beq.n	80015e8 <spi1_write+0x20>
    (void)SPI1->DR;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <spi1_write+0x3c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40013000 	.word	0x40013000
 8001608:	4001300c 	.word	0x4001300c

0800160c <spi1_transfer>:

static uint8_t spi1_transfer(uint8_t data) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 8001616:	bf00      	nop
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <spi1_transfer+0x40>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f9      	beq.n	8001618 <spi1_transfer+0xc>
    *(volatile uint8_t*)&SPI1->DR = data;
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <spi1_transfer+0x44>)
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	7013      	strb	r3, [r2, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 800162a:	bf00      	nop
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <spi1_transfer+0x40>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f9      	beq.n	800162c <spi1_transfer+0x20>
    return (uint8_t)SPI1->DR;
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <spi1_transfer+0x40>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40013000 	.word	0x40013000
 8001650:	4001300c 	.word	0x4001300c

08001654 <lora_write_reg>:

static void lora_write_reg(uint8_t addr, uint8_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
    LORA_NSS_LOW();
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <lora_write_reg+0x3c>)
 8001666:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800166a:	619a      	str	r2, [r3, #24]
    spi1_write(addr | 0x80);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffa7 	bl	80015c8 <spi1_write>
    spi1_write(value);
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ffa3 	bl	80015c8 <spi1_write>
    LORA_NSS_HIGH();
 8001682:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <lora_write_reg+0x3c>)
 8001684:	2210      	movs	r2, #16
 8001686:	619a      	str	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020000 	.word	0x40020000

08001694 <lora_read_reg>:

static uint8_t lora_read_reg(uint8_t addr) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
    LORA_NSS_LOW();
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <lora_read_reg+0x3c>)
 80016a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016a4:	619a      	str	r2, [r3, #24]
    spi1_write(addr & 0x7F);
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff8a 	bl	80015c8 <spi1_write>
    uint8_t val = spi1_transfer(0x00);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ffa9 	bl	800160c <spi1_transfer>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
    LORA_NSS_HIGH();
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <lora_read_reg+0x3c>)
 80016c0:	2210      	movs	r2, #16
 80016c2:	619a      	str	r2, [r3, #24]
    return val;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40020000 	.word	0x40020000

080016d4 <SPI1_Init>:

void SPI1_Init(void) {
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80016d8:	4b20      	ldr	r3, [pc, #128]	@ (800175c <SPI1_Init+0x88>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <SPI1_Init+0x88>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <SPI1_Init+0x88>)
 80016e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e8:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <SPI1_Init+0x88>)
 80016ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016ee:	6453      	str	r3, [r2, #68]	@ 0x44

    // SPI1: PA5=SCK, PA6=MISO, PA7=MOSI
    GPIOA->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <SPI1_Init+0x8c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <SPI1_Init+0x8c>)
 80016f6:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80016fa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <SPI1_Init+0x8c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <SPI1_Init+0x8c>)
 8001702:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8001706:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (5 << (5 * 4)) | (5 << (6 * 4)) | (5 << (7 * 4));
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <SPI1_Init+0x8c>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <SPI1_Init+0x8c>)
 800170e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8001712:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001716:	6213      	str	r3, [r2, #32]

    // NSS (PA4) là output điều khiển thủ công
    GPIOA->MODER &= ~(GPIO_MODER_MODE4);
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <SPI1_Init+0x8c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a10      	ldr	r2, [pc, #64]	@ (8001760 <SPI1_Init+0x8c>)
 800171e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001722:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (GPIO_MODER_MODE4_0);
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <SPI1_Init+0x8c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <SPI1_Init+0x8c>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172e:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4);
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <SPI1_Init+0x8c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <SPI1_Init+0x8c>)
 8001736:	f023 0310 	bic.w	r3, r3, #16
 800173a:	6053      	str	r3, [r2, #4]

    SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_BR_1;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <SPI1_Init+0x90>)
 800173e:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8001742:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_SPE;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <SPI1_Init+0x90>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <SPI1_Init+0x90>)
 800174a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40013000 	.word	0x40013000

08001768 <LORA_GPIO_Init>:

void LORA_GPIO_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    // PA2: RST
    GPIOA->MODER &= ~(GPIO_MODER_MODE2);
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001772:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001776:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (GPIO_MODER_MODE2_0);
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2);
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a18      	ldr	r2, [pc, #96]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6053      	str	r3, [r2, #4]

    // PA0: DIO0 - input + EXTI0
    GPIOA->MODER &= ~(GPIO_MODER_MODE0);
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a15      	ldr	r2, [pc, #84]	@ (80017ec <LORA_GPIO_Init+0x84>)
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0);
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <LORA_GPIO_Init+0x84>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <LORA_GPIO_Init+0x84>)
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	60d3      	str	r3, [r2, #12]

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <LORA_GPIO_Init+0x88>)
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <LORA_GPIO_Init+0x88>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b2:	6453      	str	r3, [r2, #68]	@ 0x44
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017ba:	f023 030f 	bic.w	r3, r3, #15
 80017be:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017c2:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <LORA_GPIO_Init+0x8c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	6093      	str	r3, [r2, #8]
    EXTI->IMR  |= EXTI_IMR_MR0;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= EXTI_RTSR_TR0;
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <LORA_GPIO_Init+0x90>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(EXTI0_IRQn);
 80017e0:	2006      	movs	r0, #6
 80017e2:	f7ff fed3 	bl	800158c <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40013c00 	.word	0x40013c00

080017fc <lora_init_rx>:

void lora_init_rx(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

    led_on(LED_POWER_PORT, LED_POWER_PIN);
 8001800:	2100      	movs	r1, #0
 8001802:	482e      	ldr	r0, [pc, #184]	@ (80018bc <lora_init_rx+0xc0>)
 8001804:	f7ff fd64 	bl	80012d0 <led_on>
    LORA_RST_LOW();
 8001808:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <lora_init_rx+0xc4>)
 800180a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800180e:	619a      	str	r2, [r3, #24]
    timer_delay_ms(10);
 8001810:	200a      	movs	r0, #10
 8001812:	f000 fc4f 	bl	80020b4 <timer_delay_ms>
    LORA_RST_HIGH();
 8001816:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <lora_init_rx+0xc4>)
 8001818:	2204      	movs	r2, #4
 800181a:	619a      	str	r2, [r3, #24]
    timer_delay_ms(10);
 800181c:	200a      	movs	r0, #10
 800181e:	f000 fc49 	bl	80020b4 <timer_delay_ms>
    // Chờ đến khi module LoRa sẵn sàng (đọc được version đúng)
    while (lora_read_reg(REG_VERSION) != 0x12) {
 8001822:	e007      	b.n	8001834 <lora_init_rx+0x38>
        led_on(LED_IGNORE_PORT, LED_IGNORE_PIN);  // Báo lỗi
 8001824:	2103      	movs	r1, #3
 8001826:	4827      	ldr	r0, [pc, #156]	@ (80018c4 <lora_init_rx+0xc8>)
 8001828:	f7ff fd52 	bl	80012d0 <led_on>
        timer_delay_ms(500);                      // Delay để tránh đọc liên tục quá nhanh
 800182c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001830:	f000 fc40 	bl	80020b4 <timer_delay_ms>
    while (lora_read_reg(REG_VERSION) != 0x12) {
 8001834:	2042      	movs	r0, #66	@ 0x42
 8001836:	f7ff ff2d 	bl	8001694 <lora_read_reg>
 800183a:	4603      	mov	r3, r0
 800183c:	2b12      	cmp	r3, #18
 800183e:	d1f1      	bne.n	8001824 <lora_init_rx+0x28>
//    if (lora_read_reg(REG_VERSION) != 0x12) {
//        led_on(LED_IGNORE_PORT, LED_IGNORE_PIN);
//        while (1);
//    }

    lora_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001840:	2180      	movs	r1, #128	@ 0x80
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff ff06 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001848:	2181      	movs	r1, #129	@ 0x81
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff ff02 	bl	8001654 <lora_write_reg>

    lora_write_reg(REG_FREQ_MSB, 0x6C);
 8001850:	216c      	movs	r1, #108	@ 0x6c
 8001852:	2006      	movs	r0, #6
 8001854:	f7ff fefe 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_FREQ_MID, 0x80);
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	2007      	movs	r0, #7
 800185c:	f7ff fefa 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_FREQ_LSB, 0x00);
 8001860:	2100      	movs	r1, #0
 8001862:	2008      	movs	r0, #8
 8001864:	f7ff fef6 	bl	8001654 <lora_write_reg>

    lora_write_reg(REG_PREAMBLE_MSB, 0x00);
 8001868:	2100      	movs	r1, #0
 800186a:	2020      	movs	r0, #32
 800186c:	f7ff fef2 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_PREAMBLE_LSB, 0x08);
 8001870:	2108      	movs	r1, #8
 8001872:	2021      	movs	r0, #33	@ 0x21
 8001874:	f7ff feee 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_SYNC_WORD, 0x12);
 8001878:	2112      	movs	r1, #18
 800187a:	2039      	movs	r0, #57	@ 0x39
 800187c:	f7ff feea 	bl	8001654 <lora_write_reg>

    lora_write_reg(REG_MODEM_CONFIG1, 0x72);
 8001880:	2172      	movs	r1, #114	@ 0x72
 8001882:	201d      	movs	r0, #29
 8001884:	f7ff fee6 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_MODEM_CONFIG2, 0xC4);
 8001888:	21c4      	movs	r1, #196	@ 0xc4
 800188a:	201e      	movs	r0, #30
 800188c:	f7ff fee2 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_MODEM_CONFIG3, 0x04);
 8001890:	2104      	movs	r1, #4
 8001892:	2026      	movs	r0, #38	@ 0x26
 8001894:	f7ff fede 	bl	8001654 <lora_write_reg>

    lora_write_reg(REG_FIFO_RX_BASE_ADDR, 0x00);
 8001898:	2100      	movs	r1, #0
 800189a:	200f      	movs	r0, #15
 800189c:	f7ff feda 	bl	8001654 <lora_write_reg>
    lora_write_reg(REG_DIO_MAPPING1, 0x00);
 80018a0:	2100      	movs	r1, #0
 80018a2:	2040      	movs	r0, #64	@ 0x40
 80018a4:	f7ff fed6 	bl	8001654 <lora_write_reg>

    lora_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80018a8:	2185      	movs	r1, #133	@ 0x85
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7ff fed2 	bl	8001654 <lora_write_reg>
    led_on(LED_OK_PORT, LED_OK_PIN);
 80018b0:	2101      	movs	r1, #1
 80018b2:	4802      	ldr	r0, [pc, #8]	@ (80018bc <lora_init_rx+0xc0>)
 80018b4:	f7ff fd0c 	bl	80012d0 <led_on>
//    led_off(LED_IGNORE_PORT, LED_IGNORE_PIN);
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020800 	.word	0x40020800

080018c8 <lora_handle_packet_interrupt>:


void lora_handle_packet_interrupt(void) {
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b0af      	sub	sp, #188	@ 0xbc
 80018cc:	af06      	add	r7, sp, #24
    char debug[64];
    uint8_t irq_flags = lora_read_reg(REG_IRQ_FLAGS);
 80018ce:	2012      	movs	r0, #18
 80018d0:	f7ff fee0 	bl	8001694 <lora_read_reg>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    snprintf(debug, sizeof(debug), "IRQ Flags: 0x%02X\r\n", irq_flags);
 80018da:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80018de:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80018e2:	4aa4      	ldr	r2, [pc, #656]	@ (8001b74 <lora_handle_packet_interrupt+0x2ac>)
 80018e4:	2140      	movs	r1, #64	@ 0x40
 80018e6:	f001 f96b 	bl	8002bc0 <sniprintf>
    uart2_send_string(debug); // Gửi cờ IRQ qua UART
 80018ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fc0e 	bl	8002110 <uart2_send_string>

    if (irq_flags & 0x40) { // Kiểm tra RxDone
 80018f4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80018f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8126 	beq.w	8001b4e <lora_handle_packet_interrupt+0x286>
        uint8_t len = lora_read_reg(REG_RX_NB_BYTES);
 8001902:	2013      	movs	r0, #19
 8001904:	f7ff fec6 	bl	8001694 <lora_read_reg>
 8001908:	4603      	mov	r3, r0
 800190a:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
        snprintf(debug, sizeof(debug), "Received %d bytes\r\n", len);
 800190e:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001912:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001916:	4a98      	ldr	r2, [pc, #608]	@ (8001b78 <lora_handle_packet_interrupt+0x2b0>)
 8001918:	2140      	movs	r1, #64	@ 0x40
 800191a:	f001 f951 	bl	8002bc0 <sniprintf>
        uart2_send_string(debug);
 800191e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fbf4 	bl	8002110 <uart2_send_string>

        if (len > 32) {
 8001928:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 800192c:	2b20      	cmp	r3, #32
 800192e:	d903      	bls.n	8001938 <lora_handle_packet_interrupt+0x70>
            uart2_send_string("Error: Packet too long\r\n");
 8001930:	4892      	ldr	r0, [pc, #584]	@ (8001b7c <lora_handle_packet_interrupt+0x2b4>)
 8001932:	f000 fbed 	bl	8002110 <uart2_send_string>
 8001936:	e119      	b.n	8001b6c <lora_handle_packet_interrupt+0x2a4>
            return;
        }

        lora_write_reg(REG_FIFO_ADDR_PTR, lora_read_reg(REG_FIFO_RX_CURRENT));
 8001938:	2010      	movs	r0, #16
 800193a:	f7ff feab 	bl	8001694 <lora_read_reg>
 800193e:	4603      	mov	r3, r0
 8001940:	4619      	mov	r1, r3
 8001942:	200d      	movs	r0, #13
 8001944:	f7ff fe86 	bl	8001654 <lora_write_reg>
        uint8_t buffer[32];

        LORA_NSS_LOW();
 8001948:	4b8d      	ldr	r3, [pc, #564]	@ (8001b80 <lora_handle_packet_interrupt+0x2b8>)
 800194a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800194e:	619a      	str	r2, [r3, #24]
        spi1_write(REG_FIFO & 0x7F);
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fe39 	bl	80015c8 <spi1_write>
        for (uint8_t i = 0; i < len; i++) {
 8001956:	2300      	movs	r3, #0
 8001958:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800195c:	e010      	b.n	8001980 <lora_handle_packet_interrupt+0xb8>
            buffer[i] = spi1_transfer(0x00);
 800195e:	f897 409f 	ldrb.w	r4, [r7, #159]	@ 0x9f
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fe52 	bl	800160c <spi1_transfer>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 8001970:	443b      	add	r3, r7
 8001972:	f803 2c9c 	strb.w	r2, [r3, #-156]
        for (uint8_t i = 0; i < len; i++) {
 8001976:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800197a:	3301      	adds	r3, #1
 800197c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001980:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8001984:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001988:	429a      	cmp	r2, r3
 800198a:	d3e8      	bcc.n	800195e <lora_handle_packet_interrupt+0x96>
        }
        LORA_NSS_HIGH();
 800198c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b80 <lora_handle_packet_interrupt+0x2b8>)
 800198e:	2210      	movs	r2, #16
 8001990:	619a      	str	r2, [r3, #24]

        // Gửi dữ liệu thô qua UART
        uart2_send_string("Raw data: ");
 8001992:	487c      	ldr	r0, [pc, #496]	@ (8001b84 <lora_handle_packet_interrupt+0x2bc>)
 8001994:	f000 fbbc 	bl	8002110 <uart2_send_string>
        for (uint8_t i = 0; i < len; i++) {
 8001998:	2300      	movs	r3, #0
 800199a:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800199e:	e015      	b.n	80019cc <lora_handle_packet_interrupt+0x104>
            snprintf(debug, sizeof(debug), "0x%02X ", buffer[i]);
 80019a0:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80019a4:	33a0      	adds	r3, #160	@ 0xa0
 80019a6:	443b      	add	r3, r7
 80019a8:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80019ac:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80019b0:	4a75      	ldr	r2, [pc, #468]	@ (8001b88 <lora_handle_packet_interrupt+0x2c0>)
 80019b2:	2140      	movs	r1, #64	@ 0x40
 80019b4:	f001 f904 	bl	8002bc0 <sniprintf>
            uart2_send_string(debug);
 80019b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fba7 	bl	8002110 <uart2_send_string>
        for (uint8_t i = 0; i < len; i++) {
 80019c2:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80019c6:	3301      	adds	r3, #1
 80019c8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 80019cc:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 80019d0:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d3e3      	bcc.n	80019a0 <lora_handle_packet_interrupt+0xd8>
        }
        uart2_send_string("\r\n");
 80019d8:	486c      	ldr	r0, [pc, #432]	@ (8001b8c <lora_handle_packet_interrupt+0x2c4>)
 80019da:	f000 fb99 	bl	8002110 <uart2_send_string>

        lora_write_reg(REG_IRQ_FLAGS, 0xFF); // Xóa cờ ngắt
 80019de:	21ff      	movs	r1, #255	@ 0xff
 80019e0:	2012      	movs	r0, #18
 80019e2:	f7ff fe37 	bl	8001654 <lora_write_reg>

        uint8_t crc = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
        for (uint8_t i = 0; i < len - 1; i++) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
 80019f2:	e00f      	b.n	8001a14 <lora_handle_packet_interrupt+0x14c>
            crc ^= buffer[i];
 80019f4:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80019f8:	33a0      	adds	r3, #160	@ 0xa0
 80019fa:	443b      	add	r3, r7
 80019fc:	f813 2c9c 	ldrb.w	r2, [r3, #-156]
 8001a00:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001a04:	4053      	eors	r3, r2
 8001a06:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
        for (uint8_t i = 0; i < len - 1; i++) {
 8001a0a:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
 8001a14:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8001a18:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dbe8      	blt.n	80019f4 <lora_handle_packet_interrupt+0x12c>
        }

        if (crc == buffer[len - 1]) {
 8001a22:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001a26:	3b01      	subs	r3, #1
 8001a28:	33a0      	adds	r3, #160	@ 0xa0
 8001a2a:	443b      	add	r3, r7
 8001a2c:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8001a30:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d169      	bne.n	8001b0c <lora_handle_packet_interrupt+0x244>
            led_on(LED_RAW_PORT, LED_RAW_PIN);
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4855      	ldr	r0, [pc, #340]	@ (8001b90 <lora_handle_packet_interrupt+0x2c8>)
 8001a3c:	f7ff fc48 	bl	80012d0 <led_on>
            uint8_t dev_id = buffer[0];
 8001a40:	793b      	ldrb	r3, [r7, #4]
 8001a42:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
            uint32_t timestamp = buffer[1] | (buffer[2] << 8) | (buffer[3] << 16) | (buffer[4] << 24);
 8001a46:	797b      	ldrb	r3, [r7, #5]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	7a3b      	ldrb	r3, [r7, #8]
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            float lat, lon;
            memcpy(&lat, &buffer[5], 4);
 8001a60:	f8d7 3009 	ldr.w	r3, [r7, #9]
 8001a64:	653b      	str	r3, [r7, #80]	@ 0x50
            memcpy(&lon, &buffer[9], 4);
 8001a66:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c

            snprintf(debug, sizeof(debug), "Valid packet: DevID=%d, Timestamp=%lu, Lat=%.6f, Lon=%.6f\r\n",
 8001a6c:	f897 6099 	ldrb.w	r6, [r7, #153]	@ 0x99
 8001a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd70 	bl	8000558 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd6a 	bl	8000558 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001a8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a90:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	4633      	mov	r3, r6
 8001a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b94 <lora_handle_packet_interrupt+0x2cc>)
 8001a9e:	2140      	movs	r1, #64	@ 0x40
 8001aa0:	f001 f88e 	bl	8002bc0 <sniprintf>
                     dev_id, timestamp, lat, lon);
            uart2_send_string(debug);
 8001aa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fb31 	bl	8002110 <uart2_send_string>

            char line1[17], line2[17];
            snprintf(line1, sizeof(line1), "Lat: %.6f", lat);
 8001aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd51 	bl	8000558 <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001abe:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac2:	4a35      	ldr	r2, [pc, #212]	@ (8001b98 <lora_handle_packet_interrupt+0x2d0>)
 8001ac4:	2111      	movs	r1, #17
 8001ac6:	f001 f87b 	bl	8002bc0 <sniprintf>
            snprintf(line2, sizeof(line2), "Lon: %.6f", lon);
 8001aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd43 	bl	8000558 <__aeabi_f2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001ada:	e9cd 2300 	strd	r2, r3, [sp]
 8001ade:	4a2f      	ldr	r2, [pc, #188]	@ (8001b9c <lora_handle_packet_interrupt+0x2d4>)
 8001ae0:	2111      	movs	r1, #17
 8001ae2:	f001 f86d 	bl	8002bc0 <sniprintf>

            lcd_command(0x01); // Xóa LCD
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff fb76 	bl	80011d8 <lcd_command>
            lcd_print(line1);  // Dòng 1
 8001aec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fbd7 	bl	80012a4 <lcd_print>
            lcd_command(0xC0); // Xuống dòng 2
 8001af6:	20c0      	movs	r0, #192	@ 0xc0
 8001af8:	f7ff fb6e 	bl	80011d8 <lcd_command>
            lcd_print(line2);  // Dòng 2
 8001afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fbcf 	bl	80012a4 <lcd_print>

            buzzer_on();
 8001b06:	f7ff f8cf 	bl	8000ca8 <buzzer_on>
 8001b0a:	e02f      	b.n	8001b6c <lora_handle_packet_interrupt+0x2a4>
        } else {
            led_on(LED_IGNORE_PORT, LED_IGNORE_PIN);
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	4820      	ldr	r0, [pc, #128]	@ (8001b90 <lora_handle_packet_interrupt+0x2c8>)
 8001b10:	f7ff fbde 	bl	80012d0 <led_on>
            snprintf(debug, sizeof(debug), "CRC Error: Calculated=0x%02X, Received=0x%02X\r\n",
 8001b14:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
                     crc, buffer[len - 1]);
 8001b18:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	33a0      	adds	r3, #160	@ 0xa0
 8001b20:	443b      	add	r3, r7
 8001b22:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
            snprintf(debug, sizeof(debug), "CRC Error: Calculated=0x%02X, Received=0x%02X\r\n",
 8001b26:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <lora_handle_packet_interrupt+0x2d8>)
 8001b30:	2140      	movs	r1, #64	@ 0x40
 8001b32:	f001 f845 	bl	8002bc0 <sniprintf>
            uart2_send_string(debug);
 8001b36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fae8 	bl	8002110 <uart2_send_string>
            lcd_command(0x01);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff fb49 	bl	80011d8 <lcd_command>
            lcd_print("CRC Loi");
 8001b46:	4817      	ldr	r0, [pc, #92]	@ (8001ba4 <lora_handle_packet_interrupt+0x2dc>)
 8001b48:	f7ff fbac 	bl	80012a4 <lcd_print>
 8001b4c:	e00e      	b.n	8001b6c <lora_handle_packet_interrupt+0x2a4>
        }
    } else {
        uart2_send_string("No RxDone\r\n");
 8001b4e:	4816      	ldr	r0, [pc, #88]	@ (8001ba8 <lora_handle_packet_interrupt+0x2e0>)
 8001b50:	f000 fade 	bl	8002110 <uart2_send_string>
        lcd_command(0x01);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff fb3f 	bl	80011d8 <lcd_command>
        lcd_print("Khong RxDone");
 8001b5a:	4814      	ldr	r0, [pc, #80]	@ (8001bac <lora_handle_packet_interrupt+0x2e4>)
 8001b5c:	f7ff fba2 	bl	80012a4 <lcd_print>
        buzzer_off();
 8001b60:	f7ff f8be 	bl	8000ce0 <buzzer_off>
        lora_write_reg(REG_IRQ_FLAGS, 0xFF);
 8001b64:	21ff      	movs	r1, #255	@ 0xff
 8001b66:	2012      	movs	r0, #18
 8001b68:	f7ff fd74 	bl	8001654 <lora_write_reg>
    }
}
 8001b6c:	37a4      	adds	r7, #164	@ 0xa4
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	08004e58 	.word	0x08004e58
 8001b78:	08004e6c 	.word	0x08004e6c
 8001b7c:	08004e80 	.word	0x08004e80
 8001b80:	40020000 	.word	0x40020000
 8001b84:	08004e9c 	.word	0x08004e9c
 8001b88:	08004ea8 	.word	0x08004ea8
 8001b8c:	08004eb0 	.word	0x08004eb0
 8001b90:	40020800 	.word	0x40020800
 8001b94:	08004eb4 	.word	0x08004eb4
 8001b98:	08004ef0 	.word	0x08004ef0
 8001b9c:	08004efc 	.word	0x08004efc
 8001ba0:	08004f08 	.word	0x08004f08
 8001ba4:	08004f38 	.word	0x08004f38
 8001ba8:	08004f40 	.word	0x08004f40
 8001bac:	08004f4c 	.word	0x08004f4c

08001bb0 <main>:
#include "main.h"
#include "timer.h"
#include "buzzer.h"
//float lat =21.041578;
//float lon =105.793043;
int main(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

	gpio_init_all();
 8001bb4:	f7ff f8c6 	bl	8000d44 <gpio_init_all>
    i2c2_init();
 8001bb8:	f7ff f9e8 	bl	8000f8c <i2c2_init>
    lcd_init();
 8001bbc:	f7ff fb40 	bl	8001240 <lcd_init>

    	timer_init();
 8001bc0:	f000 fa5a 	bl	8002078 <timer_init>
    	button_init();
 8001bc4:	f7ff f816 	bl	8000bf4 <button_init>
    	SPI1_Init();            // Khởi tạo SPI1 cho LoRa
 8001bc8:	f7ff fd84 	bl	80016d4 <SPI1_Init>
    	LORA_GPIO_Init();       // Cấu hình chân GPIO LoRa (NSS, RST, DIO0)
 8001bcc:	f7ff fdcc 	bl	8001768 <LORA_GPIO_Init>
    	lora_init_rx();
 8001bd0:	f7ff fe14 	bl	80017fc <lora_init_rx>

////
        while (1) {

        	led_check();
 8001bd4:	f7ff fc7a 	bl	80014cc <led_check>
 8001bd8:	e7fc      	b.n	8001bd4 <main+0x24>
	...

08001bdc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001be0:	f3bf 8f4f 	dsb	sy
}
 8001be4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <__NVIC_SystemReset+0x24>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bee:	4904      	ldr	r1, [pc, #16]	@ (8001c00 <__NVIC_SystemReset+0x24>)
 8001bf0:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <__NVIC_SystemReset+0x28>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bf6:	f3bf 8f4f 	dsb	sy
}
 8001bfa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <__NVIC_SystemReset+0x20>
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	05fa0004 	.word	0x05fa0004

08001c08 <EXTI0_IRQHandler>:
#include "system.h"
#include "buzzer.h"
#include "uart.h"
#include "led.h"

void EXTI0_IRQHandler(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0)) {
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <EXTI0_IRQHandler+0x34>)
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <EXTI0_IRQHandler+0x2e>
        EXTI->PR |= (1 << 0);
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <EXTI0_IRQHandler+0x34>)
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <EXTI0_IRQHandler+0x34>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6153      	str	r3, [r2, #20]
        uart2_send_string("DIO0 Interrupt triggered\r\n");
 8001c24:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <EXTI0_IRQHandler+0x38>)
 8001c26:	f000 fa73 	bl	8002110 <uart2_send_string>
        led_toggle(LED_OK_PORT, LED_OK_PIN);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <EXTI0_IRQHandler+0x3c>)
 8001c2e:	f7ff fbeb 	bl	8001408 <led_toggle>
        lora_handle_packet_interrupt();
 8001c32:	f7ff fe49 	bl	80018c8 <lora_handle_packet_interrupt>
    }
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40013c00 	.word	0x40013c00
 8001c40:	08004f5c 	.word	0x08004f5c
 8001c44:	40020400 	.word	0x40020400

08001c48 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 3)) {
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <EXTI3_IRQHandler+0x24>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <EXTI3_IRQHandler+0x20>
        EXTI->PR |= (1 << 3);
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <EXTI3_IRQHandler+0x24>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4a03      	ldr	r2, [pc, #12]	@ (8001c6c <EXTI3_IRQHandler+0x24>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	6153      	str	r3, [r2, #20]
        NVIC_SystemReset();
 8001c64:	f7ff ffba 	bl	8001bdc <__NVIC_SystemReset>
    }
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 5)) {
 8001c74:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <EXTI9_5_IRQHandler+0x24>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <EXTI9_5_IRQHandler+0x20>
        EXTI->PR |= (1 << 5);
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <EXTI9_5_IRQHandler+0x24>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <EXTI9_5_IRQHandler+0x24>)
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	6153      	str	r3, [r2, #20]
        buzzer_off();
 8001c8c:	f7ff f828 	bl	8000ce0 <buzzer_off>
    }
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 13)) {
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <EXTI15_10_IRQHandler+0x44>)
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d017      	beq.n	8001cd8 <EXTI15_10_IRQHandler+0x40>
        EXTI->PR |= (1 << 13);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <EXTI15_10_IRQHandler+0x44>)
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	4a0b      	ldr	r2, [pc, #44]	@ (8001cdc <EXTI15_10_IRQHandler+0x44>)
 8001cae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cb2:	6153      	str	r3, [r2, #20]
        system_powered_on ^= 1;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <EXTI15_10_IRQHandler+0x48>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <EXTI15_10_IRQHandler+0x48>)
 8001cc2:	701a      	strb	r2, [r3, #0]
        if (system_powered_on)
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <EXTI15_10_IRQHandler+0x48>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <EXTI15_10_IRQHandler+0x3c>
            system_startup();
 8001cce:	f000 f92d 	bl	8001f2c <system_startup>
        else
            system_shutdown();
    }
}
 8001cd2:	e001      	b.n	8001cd8 <EXTI15_10_IRQHandler+0x40>
            system_shutdown();
 8001cd4:	f000 f930 	bl	8001f38 <system_shutdown>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40013c00 	.word	0x40013c00
 8001ce0:	20000238 	.word	0x20000238

08001ce4 <NMI_Handler>:

void NMI_Handler(void) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
    while (1) {}
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <NMI_Handler+0x4>

08001cec <HardFault_Handler>:
}

void HardFault_Handler(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
    uart2_send_string("HardFault occurred!\r\n");
 8001cf2:	4813      	ldr	r0, [pc, #76]	@ (8001d40 <HardFault_Handler+0x54>)
 8001cf4:	f000 fa0c 	bl	8002110 <uart2_send_string>
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HardFault_Handler+0x58>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	4a11      	ldr	r2, [pc, #68]	@ (8001d44 <HardFault_Handler+0x58>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOC->MODER |= (0x1 << (13 * 2));
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HardFault_Handler+0x5c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <HardFault_Handler+0x5c>)
 8001d0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d0e:	6013      	str	r3, [r2, #0]
    GPIOC->OTYPER &= ~(1 << 13);
 8001d10:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HardFault_Handler+0x5c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <HardFault_Handler+0x5c>)
 8001d16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001d1a:	6053      	str	r3, [r2, #4]
    while (1) {
        GPIOC->ODR ^= (1 << 13);
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HardFault_Handler+0x5c>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <HardFault_Handler+0x5c>)
 8001d22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d26:	6153      	str	r3, [r2, #20]
        for (volatile uint32_t i = 0; i < 1000000; i++);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	e002      	b.n	8001d34 <HardFault_Handler+0x48>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3301      	adds	r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <HardFault_Handler+0x60>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d9f8      	bls.n	8001d2e <HardFault_Handler+0x42>
        GPIOC->ODR ^= (1 << 13);
 8001d3c:	e7ee      	b.n	8001d1c <HardFault_Handler+0x30>
 8001d3e:	bf00      	nop
 8001d40:	08004f78 	.word	0x08004f78
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	000f423f 	.word	0x000f423f

08001d50 <MemManage_Handler>:
    }
}

void MemManage_Handler(void) {
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
    while (1) {}
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <MemManage_Handler+0x4>

08001d58 <BusFault_Handler>:
}

void BusFault_Handler(void) {
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
    while (1) {}
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
    while (1) {}
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d68 <SVC_Handler>:
}

void SVC_Handler(void) {}
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <PendSV_Handler>:

void PendSV_Handler(void) {}
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <SysTick_Handler>:

#include "timer.h"
void SysTick_Handler(void) {
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
    timer_systick_callback();
 8001d96:	f000 f955 	bl	8002044 <timer_systick_callback>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_kill>:

int _kill(int pid, int sig)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db8:	f000 ffcc 	bl	8002d54 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2216      	movs	r2, #22
 8001dc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_exit>:

void _exit (int status)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffe7 	bl	8001dae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <_exit+0x12>

08001de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00a      	b.n	8001e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df6:	f3af 8000 	nop.w
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf0      	blt.n	8001df6 <_read+0x12>
  }

  return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e009      	b.n	8001e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf1      	blt.n	8001e30 <_write+0x12>
  }
  return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_close>:

int _close(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_isatty>:

int _isatty(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f000 ff30 	bl	8002d54 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20020000 	.word	0x20020000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	20000244 	.word	0x20000244
 8001f28:	200003a0 	.word	0x200003a0

08001f2c <system_startup>:
#include "lora.h"
#include "lcd.h"

// TODO: bổ sung các header nếu bạn có led.h, buzzer.h...

void system_startup(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    gpio_init_all();
 8001f30:	f7fe ff08 	bl	8000d44 <gpio_init_all>
    // TODO: spi_init(), i2c_init() nếu chưa init
//    lcd_init();
//    lcd_clear();
//    lcd_print("Receiver DA BAT");
    // TODO: led_on();
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <system_shutdown>:

void system_shutdown(void) {
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

    // TODO: led_off(LED_GREEN); // Tắt LED trạng thái
    // TODO: buzzer_off();       // Tắt buzzer

    // Tắt clock ngoại vi không cần thiết
    RCC->APB2ENR &= ~RCC_APB2ENR_SPI1EN;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <system_shutdown+0x48>)
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f40:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <system_shutdown+0x48>)
 8001f42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f46:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->APB1ENR &= ~RCC_APB1ENR_I2C1EN;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <system_shutdown+0x48>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <system_shutdown+0x48>)
 8001f4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f52:	6413      	str	r3, [r2, #64]	@ 0x40

    // Đưa các GPIO output không dùng về analog để giảm rò rỉ dòng
    // LED (PB0, PB1), buzzer (PB10)
    GPIOB->MODER &= ~((0x3 << (0 * 2)) | (0x3 << (1 * 2)) | (0x3 << (10 * 2)));
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <system_shutdown+0x4c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <system_shutdown+0x4c>)
 8001f5a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001f5e:	f023 030f 	bic.w	r3, r3, #15
 8001f62:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((0x3 << (0 * 2)) | (0x3 << (1 * 2)) | (0x3 << (10 * 2))); // Analog mode
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <system_shutdown+0x4c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a06      	ldr	r2, [pc, #24]	@ (8001f84 <system_shutdown+0x4c>)
 8001f6a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8001f6e:	f043 030f 	orr.w	r3, r3, #15
 8001f72:	6013      	str	r3, [r2, #0]

}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400

08001f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_SetPriority>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ffc2 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <timer_systick_callback>:
#include "timer.h"

static volatile uint32_t system_millis = 0;
static volatile uint32_t blocking_delay = 0;

void timer_systick_callback(void) {
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
    system_millis++;
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <timer_systick_callback+0x2c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <timer_systick_callback+0x2c>)
 8002050:	6013      	str	r3, [r2, #0]
    if (blocking_delay > 0) blocking_delay--;
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <timer_systick_callback+0x30>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <timer_systick_callback+0x20>
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <timer_systick_callback+0x30>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3b01      	subs	r3, #1
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <timer_systick_callback+0x30>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000248 	.word	0x20000248
 8002074:	2000024c 	.word	0x2000024c

08002078 <timer_init>:

void timer_init(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
    // Cấu hình SysTick để ngắt mỗi 1ms
    SysTick_Config(SystemCoreClock / 1000);
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <timer_init+0x1c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <timer_init+0x20>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ffb9 	bl	8002000 <SysTick_Config>
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000050 	.word	0x20000050
 8002098:	10624dd3 	.word	0x10624dd3

0800209c <millis>:

uint32_t millis(void) {
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
    return system_millis;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <millis+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000248 	.word	0x20000248

080020b4 <timer_delay_ms>:

void timer_delay_ms(uint32_t ms) {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    blocking_delay = ms;
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <timer_delay_ms+0x28>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6013      	str	r3, [r2, #0]
    while (blocking_delay > 0);
 80020c2:	bf00      	nop
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <timer_delay_ms+0x28>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1fb      	bne.n	80020c4 <timer_delay_ms+0x10>
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000024c 	.word	0x2000024c

080020e0 <uart2_send_char>:
    // Cấu hình USART2: 115200 baud, 8-bit, no parity, 1 stop bit
    USART2->BRR = SystemCoreClock / 115200; // Với SystemCoreClock = 16 MHz
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // Bật TX, RX, USART
}

void uart2_send_char(char c) {
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)); // Chờ TXE
 80020ea:	bf00      	nop
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <uart2_send_char+0x2c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f9      	beq.n	80020ec <uart2_send_char+0xc>
    USART2->DR = c;
 80020f8:	4a04      	ldr	r2, [pc, #16]	@ (800210c <uart2_send_char+0x2c>)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	6053      	str	r3, [r2, #4]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40004400 	.word	0x40004400

08002110 <uart2_send_string>:

void uart2_send_string(const char* str) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002118:	e006      	b.n	8002128 <uart2_send_string+0x18>
        uart2_send_char(*str++);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ffdc 	bl	80020e0 <uart2_send_char>
    while (*str) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f4      	bne.n	800211a <uart2_send_string+0xa>
    }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    		 /* set stack pointer */
 800213c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002174 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002140:	f7ff ff22 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002144:	480c      	ldr	r0, [pc, #48]	@ (8002178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002146:	490d      	ldr	r1, [pc, #52]	@ (800217c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002148:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800214c:	e002      	b.n	8002154 <LoopCopyDataInit>

0800214e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002152:	3304      	adds	r3, #4

08002154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002158:	d3f9      	bcc.n	800214e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800215c:	4c0a      	ldr	r4, [pc, #40]	@ (8002188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002160:	e001      	b.n	8002166 <LoopFillZerobss>

08002162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002164:	3204      	adds	r2, #4

08002166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002168:	d3fb      	bcc.n	8002162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216a:	f000 fdf9 	bl	8002d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216e:	f7ff fd1f 	bl	8001bb0 <main>
  bx  lr
 8002172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800217c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002180:	08005310 	.word	0x08005310
  ldr r2, =_sbss
 8002184:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002188:	2000039c 	.word	0x2000039c

0800218c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC_IRQHandler>

0800218e <__cvt>:
 800218e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002192:	ec57 6b10 	vmov	r6, r7, d0
 8002196:	2f00      	cmp	r7, #0
 8002198:	460c      	mov	r4, r1
 800219a:	4619      	mov	r1, r3
 800219c:	463b      	mov	r3, r7
 800219e:	bfbb      	ittet	lt
 80021a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80021a4:	461f      	movlt	r7, r3
 80021a6:	2300      	movge	r3, #0
 80021a8:	232d      	movlt	r3, #45	@ 0x2d
 80021aa:	700b      	strb	r3, [r1, #0]
 80021ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80021ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80021b2:	4691      	mov	r9, r2
 80021b4:	f023 0820 	bic.w	r8, r3, #32
 80021b8:	bfbc      	itt	lt
 80021ba:	4632      	movlt	r2, r6
 80021bc:	4616      	movlt	r6, r2
 80021be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80021c2:	d005      	beq.n	80021d0 <__cvt+0x42>
 80021c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80021c8:	d100      	bne.n	80021cc <__cvt+0x3e>
 80021ca:	3401      	adds	r4, #1
 80021cc:	2102      	movs	r1, #2
 80021ce:	e000      	b.n	80021d2 <__cvt+0x44>
 80021d0:	2103      	movs	r1, #3
 80021d2:	ab03      	add	r3, sp, #12
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	ab02      	add	r3, sp, #8
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	ec47 6b10 	vmov	d0, r6, r7
 80021de:	4653      	mov	r3, sl
 80021e0:	4622      	mov	r2, r4
 80021e2:	f000 fe6d 	bl	8002ec0 <_dtoa_r>
 80021e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80021ea:	4605      	mov	r5, r0
 80021ec:	d119      	bne.n	8002222 <__cvt+0x94>
 80021ee:	f019 0f01 	tst.w	r9, #1
 80021f2:	d00e      	beq.n	8002212 <__cvt+0x84>
 80021f4:	eb00 0904 	add.w	r9, r0, r4
 80021f8:	2200      	movs	r2, #0
 80021fa:	2300      	movs	r3, #0
 80021fc:	4630      	mov	r0, r6
 80021fe:	4639      	mov	r1, r7
 8002200:	f7fe fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002204:	b108      	cbz	r0, 800220a <__cvt+0x7c>
 8002206:	f8cd 900c 	str.w	r9, [sp, #12]
 800220a:	2230      	movs	r2, #48	@ 0x30
 800220c:	9b03      	ldr	r3, [sp, #12]
 800220e:	454b      	cmp	r3, r9
 8002210:	d31e      	bcc.n	8002250 <__cvt+0xc2>
 8002212:	9b03      	ldr	r3, [sp, #12]
 8002214:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002216:	1b5b      	subs	r3, r3, r5
 8002218:	4628      	mov	r0, r5
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	b004      	add	sp, #16
 800221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002222:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002226:	eb00 0904 	add.w	r9, r0, r4
 800222a:	d1e5      	bne.n	80021f8 <__cvt+0x6a>
 800222c:	7803      	ldrb	r3, [r0, #0]
 800222e:	2b30      	cmp	r3, #48	@ 0x30
 8002230:	d10a      	bne.n	8002248 <__cvt+0xba>
 8002232:	2200      	movs	r2, #0
 8002234:	2300      	movs	r3, #0
 8002236:	4630      	mov	r0, r6
 8002238:	4639      	mov	r1, r7
 800223a:	f7fe fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800223e:	b918      	cbnz	r0, 8002248 <__cvt+0xba>
 8002240:	f1c4 0401 	rsb	r4, r4, #1
 8002244:	f8ca 4000 	str.w	r4, [sl]
 8002248:	f8da 3000 	ldr.w	r3, [sl]
 800224c:	4499      	add	r9, r3
 800224e:	e7d3      	b.n	80021f8 <__cvt+0x6a>
 8002250:	1c59      	adds	r1, r3, #1
 8002252:	9103      	str	r1, [sp, #12]
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e7d9      	b.n	800220c <__cvt+0x7e>

08002258 <__exponent>:
 8002258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800225a:	2900      	cmp	r1, #0
 800225c:	bfba      	itte	lt
 800225e:	4249      	neglt	r1, r1
 8002260:	232d      	movlt	r3, #45	@ 0x2d
 8002262:	232b      	movge	r3, #43	@ 0x2b
 8002264:	2909      	cmp	r1, #9
 8002266:	7002      	strb	r2, [r0, #0]
 8002268:	7043      	strb	r3, [r0, #1]
 800226a:	dd29      	ble.n	80022c0 <__exponent+0x68>
 800226c:	f10d 0307 	add.w	r3, sp, #7
 8002270:	461d      	mov	r5, r3
 8002272:	270a      	movs	r7, #10
 8002274:	461a      	mov	r2, r3
 8002276:	fbb1 f6f7 	udiv	r6, r1, r7
 800227a:	fb07 1416 	mls	r4, r7, r6, r1
 800227e:	3430      	adds	r4, #48	@ 0x30
 8002280:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002284:	460c      	mov	r4, r1
 8002286:	2c63      	cmp	r4, #99	@ 0x63
 8002288:	f103 33ff 	add.w	r3, r3, #4294967295
 800228c:	4631      	mov	r1, r6
 800228e:	dcf1      	bgt.n	8002274 <__exponent+0x1c>
 8002290:	3130      	adds	r1, #48	@ 0x30
 8002292:	1e94      	subs	r4, r2, #2
 8002294:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002298:	1c41      	adds	r1, r0, #1
 800229a:	4623      	mov	r3, r4
 800229c:	42ab      	cmp	r3, r5
 800229e:	d30a      	bcc.n	80022b6 <__exponent+0x5e>
 80022a0:	f10d 0309 	add.w	r3, sp, #9
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	42ac      	cmp	r4, r5
 80022a8:	bf88      	it	hi
 80022aa:	2300      	movhi	r3, #0
 80022ac:	3302      	adds	r3, #2
 80022ae:	4403      	add	r3, r0
 80022b0:	1a18      	subs	r0, r3, r0
 80022b2:	b003      	add	sp, #12
 80022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80022ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80022be:	e7ed      	b.n	800229c <__exponent+0x44>
 80022c0:	2330      	movs	r3, #48	@ 0x30
 80022c2:	3130      	adds	r1, #48	@ 0x30
 80022c4:	7083      	strb	r3, [r0, #2]
 80022c6:	70c1      	strb	r1, [r0, #3]
 80022c8:	1d03      	adds	r3, r0, #4
 80022ca:	e7f1      	b.n	80022b0 <__exponent+0x58>

080022cc <_printf_float>:
 80022cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d0:	b08d      	sub	sp, #52	@ 0x34
 80022d2:	460c      	mov	r4, r1
 80022d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80022d8:	4616      	mov	r6, r2
 80022da:	461f      	mov	r7, r3
 80022dc:	4605      	mov	r5, r0
 80022de:	f000 fcef 	bl	8002cc0 <_localeconv_r>
 80022e2:	6803      	ldr	r3, [r0, #0]
 80022e4:	9304      	str	r3, [sp, #16]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fd ffca 	bl	8000280 <strlen>
 80022ec:	2300      	movs	r3, #0
 80022ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80022f0:	f8d8 3000 	ldr.w	r3, [r8]
 80022f4:	9005      	str	r0, [sp, #20]
 80022f6:	3307      	adds	r3, #7
 80022f8:	f023 0307 	bic.w	r3, r3, #7
 80022fc:	f103 0208 	add.w	r2, r3, #8
 8002300:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002304:	f8d4 b000 	ldr.w	fp, [r4]
 8002308:	f8c8 2000 	str.w	r2, [r8]
 800230c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002310:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002314:	9307      	str	r3, [sp, #28]
 8002316:	f8cd 8018 	str.w	r8, [sp, #24]
 800231a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800231e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002322:	4b9c      	ldr	r3, [pc, #624]	@ (8002594 <_printf_float+0x2c8>)
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	f7fe fc08 	bl	8000b3c <__aeabi_dcmpun>
 800232c:	bb70      	cbnz	r0, 800238c <_printf_float+0xc0>
 800232e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002332:	4b98      	ldr	r3, [pc, #608]	@ (8002594 <_printf_float+0x2c8>)
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	f7fe fbe2 	bl	8000b00 <__aeabi_dcmple>
 800233c:	bb30      	cbnz	r0, 800238c <_printf_float+0xc0>
 800233e:	2200      	movs	r2, #0
 8002340:	2300      	movs	r3, #0
 8002342:	4640      	mov	r0, r8
 8002344:	4649      	mov	r1, r9
 8002346:	f7fe fbd1 	bl	8000aec <__aeabi_dcmplt>
 800234a:	b110      	cbz	r0, 8002352 <_printf_float+0x86>
 800234c:	232d      	movs	r3, #45	@ 0x2d
 800234e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002352:	4a91      	ldr	r2, [pc, #580]	@ (8002598 <_printf_float+0x2cc>)
 8002354:	4b91      	ldr	r3, [pc, #580]	@ (800259c <_printf_float+0x2d0>)
 8002356:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800235a:	bf94      	ite	ls
 800235c:	4690      	movls	r8, r2
 800235e:	4698      	movhi	r8, r3
 8002360:	2303      	movs	r3, #3
 8002362:	6123      	str	r3, [r4, #16]
 8002364:	f02b 0304 	bic.w	r3, fp, #4
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	f04f 0900 	mov.w	r9, #0
 800236e:	9700      	str	r7, [sp, #0]
 8002370:	4633      	mov	r3, r6
 8002372:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002374:	4621      	mov	r1, r4
 8002376:	4628      	mov	r0, r5
 8002378:	f000 f9d2 	bl	8002720 <_printf_common>
 800237c:	3001      	adds	r0, #1
 800237e:	f040 808d 	bne.w	800249c <_printf_float+0x1d0>
 8002382:	f04f 30ff 	mov.w	r0, #4294967295
 8002386:	b00d      	add	sp, #52	@ 0x34
 8002388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	4640      	mov	r0, r8
 8002392:	4649      	mov	r1, r9
 8002394:	f7fe fbd2 	bl	8000b3c <__aeabi_dcmpun>
 8002398:	b140      	cbz	r0, 80023ac <_printf_float+0xe0>
 800239a:	464b      	mov	r3, r9
 800239c:	2b00      	cmp	r3, #0
 800239e:	bfbc      	itt	lt
 80023a0:	232d      	movlt	r3, #45	@ 0x2d
 80023a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80023a6:	4a7e      	ldr	r2, [pc, #504]	@ (80025a0 <_printf_float+0x2d4>)
 80023a8:	4b7e      	ldr	r3, [pc, #504]	@ (80025a4 <_printf_float+0x2d8>)
 80023aa:	e7d4      	b.n	8002356 <_printf_float+0x8a>
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80023b2:	9206      	str	r2, [sp, #24]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	d13b      	bne.n	8002430 <_printf_float+0x164>
 80023b8:	2306      	movs	r3, #6
 80023ba:	6063      	str	r3, [r4, #4]
 80023bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80023c0:	2300      	movs	r3, #0
 80023c2:	6022      	str	r2, [r4, #0]
 80023c4:	9303      	str	r3, [sp, #12]
 80023c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80023c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80023cc:	ab09      	add	r3, sp, #36	@ 0x24
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	6861      	ldr	r1, [r4, #4]
 80023d2:	ec49 8b10 	vmov	d0, r8, r9
 80023d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80023da:	4628      	mov	r0, r5
 80023dc:	f7ff fed7 	bl	800218e <__cvt>
 80023e0:	9b06      	ldr	r3, [sp, #24]
 80023e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80023e4:	2b47      	cmp	r3, #71	@ 0x47
 80023e6:	4680      	mov	r8, r0
 80023e8:	d129      	bne.n	800243e <_printf_float+0x172>
 80023ea:	1cc8      	adds	r0, r1, #3
 80023ec:	db02      	blt.n	80023f4 <_printf_float+0x128>
 80023ee:	6863      	ldr	r3, [r4, #4]
 80023f0:	4299      	cmp	r1, r3
 80023f2:	dd41      	ble.n	8002478 <_printf_float+0x1ac>
 80023f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80023f8:	fa5f fa8a 	uxtb.w	sl, sl
 80023fc:	3901      	subs	r1, #1
 80023fe:	4652      	mov	r2, sl
 8002400:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002404:	9109      	str	r1, [sp, #36]	@ 0x24
 8002406:	f7ff ff27 	bl	8002258 <__exponent>
 800240a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800240c:	1813      	adds	r3, r2, r0
 800240e:	2a01      	cmp	r2, #1
 8002410:	4681      	mov	r9, r0
 8002412:	6123      	str	r3, [r4, #16]
 8002414:	dc02      	bgt.n	800241c <_printf_float+0x150>
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	07d2      	lsls	r2, r2, #31
 800241a:	d501      	bpl.n	8002420 <_printf_float+0x154>
 800241c:	3301      	adds	r3, #1
 800241e:	6123      	str	r3, [r4, #16]
 8002420:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0a2      	beq.n	800236e <_printf_float+0xa2>
 8002428:	232d      	movs	r3, #45	@ 0x2d
 800242a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800242e:	e79e      	b.n	800236e <_printf_float+0xa2>
 8002430:	9a06      	ldr	r2, [sp, #24]
 8002432:	2a47      	cmp	r2, #71	@ 0x47
 8002434:	d1c2      	bne.n	80023bc <_printf_float+0xf0>
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1c0      	bne.n	80023bc <_printf_float+0xf0>
 800243a:	2301      	movs	r3, #1
 800243c:	e7bd      	b.n	80023ba <_printf_float+0xee>
 800243e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002442:	d9db      	bls.n	80023fc <_printf_float+0x130>
 8002444:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002448:	d118      	bne.n	800247c <_printf_float+0x1b0>
 800244a:	2900      	cmp	r1, #0
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	dd0b      	ble.n	8002468 <_printf_float+0x19c>
 8002450:	6121      	str	r1, [r4, #16]
 8002452:	b913      	cbnz	r3, 800245a <_printf_float+0x18e>
 8002454:	6822      	ldr	r2, [r4, #0]
 8002456:	07d0      	lsls	r0, r2, #31
 8002458:	d502      	bpl.n	8002460 <_printf_float+0x194>
 800245a:	3301      	adds	r3, #1
 800245c:	440b      	add	r3, r1
 800245e:	6123      	str	r3, [r4, #16]
 8002460:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002462:	f04f 0900 	mov.w	r9, #0
 8002466:	e7db      	b.n	8002420 <_printf_float+0x154>
 8002468:	b913      	cbnz	r3, 8002470 <_printf_float+0x1a4>
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	07d2      	lsls	r2, r2, #31
 800246e:	d501      	bpl.n	8002474 <_printf_float+0x1a8>
 8002470:	3302      	adds	r3, #2
 8002472:	e7f4      	b.n	800245e <_printf_float+0x192>
 8002474:	2301      	movs	r3, #1
 8002476:	e7f2      	b.n	800245e <_printf_float+0x192>
 8002478:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800247c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800247e:	4299      	cmp	r1, r3
 8002480:	db05      	blt.n	800248e <_printf_float+0x1c2>
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	6121      	str	r1, [r4, #16]
 8002486:	07d8      	lsls	r0, r3, #31
 8002488:	d5ea      	bpl.n	8002460 <_printf_float+0x194>
 800248a:	1c4b      	adds	r3, r1, #1
 800248c:	e7e7      	b.n	800245e <_printf_float+0x192>
 800248e:	2900      	cmp	r1, #0
 8002490:	bfd4      	ite	le
 8002492:	f1c1 0202 	rsble	r2, r1, #2
 8002496:	2201      	movgt	r2, #1
 8002498:	4413      	add	r3, r2
 800249a:	e7e0      	b.n	800245e <_printf_float+0x192>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	055a      	lsls	r2, r3, #21
 80024a0:	d407      	bmi.n	80024b2 <_printf_float+0x1e6>
 80024a2:	6923      	ldr	r3, [r4, #16]
 80024a4:	4642      	mov	r2, r8
 80024a6:	4631      	mov	r1, r6
 80024a8:	4628      	mov	r0, r5
 80024aa:	47b8      	blx	r7
 80024ac:	3001      	adds	r0, #1
 80024ae:	d12b      	bne.n	8002508 <_printf_float+0x23c>
 80024b0:	e767      	b.n	8002382 <_printf_float+0xb6>
 80024b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80024b6:	f240 80dd 	bls.w	8002674 <_printf_float+0x3a8>
 80024ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80024be:	2200      	movs	r2, #0
 80024c0:	2300      	movs	r3, #0
 80024c2:	f7fe fb09 	bl	8000ad8 <__aeabi_dcmpeq>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d033      	beq.n	8002532 <_printf_float+0x266>
 80024ca:	4a37      	ldr	r2, [pc, #220]	@ (80025a8 <_printf_float+0x2dc>)
 80024cc:	2301      	movs	r3, #1
 80024ce:	4631      	mov	r1, r6
 80024d0:	4628      	mov	r0, r5
 80024d2:	47b8      	blx	r7
 80024d4:	3001      	adds	r0, #1
 80024d6:	f43f af54 	beq.w	8002382 <_printf_float+0xb6>
 80024da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80024de:	4543      	cmp	r3, r8
 80024e0:	db02      	blt.n	80024e8 <_printf_float+0x21c>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	07d8      	lsls	r0, r3, #31
 80024e6:	d50f      	bpl.n	8002508 <_printf_float+0x23c>
 80024e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80024ec:	4631      	mov	r1, r6
 80024ee:	4628      	mov	r0, r5
 80024f0:	47b8      	blx	r7
 80024f2:	3001      	adds	r0, #1
 80024f4:	f43f af45 	beq.w	8002382 <_printf_float+0xb6>
 80024f8:	f04f 0900 	mov.w	r9, #0
 80024fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8002500:	f104 0a1a 	add.w	sl, r4, #26
 8002504:	45c8      	cmp	r8, r9
 8002506:	dc09      	bgt.n	800251c <_printf_float+0x250>
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	079b      	lsls	r3, r3, #30
 800250c:	f100 8103 	bmi.w	8002716 <_printf_float+0x44a>
 8002510:	68e0      	ldr	r0, [r4, #12]
 8002512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002514:	4298      	cmp	r0, r3
 8002516:	bfb8      	it	lt
 8002518:	4618      	movlt	r0, r3
 800251a:	e734      	b.n	8002386 <_printf_float+0xba>
 800251c:	2301      	movs	r3, #1
 800251e:	4652      	mov	r2, sl
 8002520:	4631      	mov	r1, r6
 8002522:	4628      	mov	r0, r5
 8002524:	47b8      	blx	r7
 8002526:	3001      	adds	r0, #1
 8002528:	f43f af2b 	beq.w	8002382 <_printf_float+0xb6>
 800252c:	f109 0901 	add.w	r9, r9, #1
 8002530:	e7e8      	b.n	8002504 <_printf_float+0x238>
 8002532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	dc39      	bgt.n	80025ac <_printf_float+0x2e0>
 8002538:	4a1b      	ldr	r2, [pc, #108]	@ (80025a8 <_printf_float+0x2dc>)
 800253a:	2301      	movs	r3, #1
 800253c:	4631      	mov	r1, r6
 800253e:	4628      	mov	r0, r5
 8002540:	47b8      	blx	r7
 8002542:	3001      	adds	r0, #1
 8002544:	f43f af1d 	beq.w	8002382 <_printf_float+0xb6>
 8002548:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800254c:	ea59 0303 	orrs.w	r3, r9, r3
 8002550:	d102      	bne.n	8002558 <_printf_float+0x28c>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	07d9      	lsls	r1, r3, #31
 8002556:	d5d7      	bpl.n	8002508 <_printf_float+0x23c>
 8002558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800255c:	4631      	mov	r1, r6
 800255e:	4628      	mov	r0, r5
 8002560:	47b8      	blx	r7
 8002562:	3001      	adds	r0, #1
 8002564:	f43f af0d 	beq.w	8002382 <_printf_float+0xb6>
 8002568:	f04f 0a00 	mov.w	sl, #0
 800256c:	f104 0b1a 	add.w	fp, r4, #26
 8002570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002572:	425b      	negs	r3, r3
 8002574:	4553      	cmp	r3, sl
 8002576:	dc01      	bgt.n	800257c <_printf_float+0x2b0>
 8002578:	464b      	mov	r3, r9
 800257a:	e793      	b.n	80024a4 <_printf_float+0x1d8>
 800257c:	2301      	movs	r3, #1
 800257e:	465a      	mov	r2, fp
 8002580:	4631      	mov	r1, r6
 8002582:	4628      	mov	r0, r5
 8002584:	47b8      	blx	r7
 8002586:	3001      	adds	r0, #1
 8002588:	f43f aefb 	beq.w	8002382 <_printf_float+0xb6>
 800258c:	f10a 0a01 	add.w	sl, sl, #1
 8002590:	e7ee      	b.n	8002570 <_printf_float+0x2a4>
 8002592:	bf00      	nop
 8002594:	7fefffff 	.word	0x7fefffff
 8002598:	08004f8e 	.word	0x08004f8e
 800259c:	08004f92 	.word	0x08004f92
 80025a0:	08004f96 	.word	0x08004f96
 80025a4:	08004f9a 	.word	0x08004f9a
 80025a8:	08004f9e 	.word	0x08004f9e
 80025ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80025ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80025b2:	4553      	cmp	r3, sl
 80025b4:	bfa8      	it	ge
 80025b6:	4653      	movge	r3, sl
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	4699      	mov	r9, r3
 80025bc:	dc36      	bgt.n	800262c <_printf_float+0x360>
 80025be:	f04f 0b00 	mov.w	fp, #0
 80025c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025c6:	f104 021a 	add.w	r2, r4, #26
 80025ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80025cc:	9306      	str	r3, [sp, #24]
 80025ce:	eba3 0309 	sub.w	r3, r3, r9
 80025d2:	455b      	cmp	r3, fp
 80025d4:	dc31      	bgt.n	800263a <_printf_float+0x36e>
 80025d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025d8:	459a      	cmp	sl, r3
 80025da:	dc3a      	bgt.n	8002652 <_printf_float+0x386>
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	07da      	lsls	r2, r3, #31
 80025e0:	d437      	bmi.n	8002652 <_printf_float+0x386>
 80025e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025e4:	ebaa 0903 	sub.w	r9, sl, r3
 80025e8:	9b06      	ldr	r3, [sp, #24]
 80025ea:	ebaa 0303 	sub.w	r3, sl, r3
 80025ee:	4599      	cmp	r9, r3
 80025f0:	bfa8      	it	ge
 80025f2:	4699      	movge	r9, r3
 80025f4:	f1b9 0f00 	cmp.w	r9, #0
 80025f8:	dc33      	bgt.n	8002662 <_printf_float+0x396>
 80025fa:	f04f 0800 	mov.w	r8, #0
 80025fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002602:	f104 0b1a 	add.w	fp, r4, #26
 8002606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002608:	ebaa 0303 	sub.w	r3, sl, r3
 800260c:	eba3 0309 	sub.w	r3, r3, r9
 8002610:	4543      	cmp	r3, r8
 8002612:	f77f af79 	ble.w	8002508 <_printf_float+0x23c>
 8002616:	2301      	movs	r3, #1
 8002618:	465a      	mov	r2, fp
 800261a:	4631      	mov	r1, r6
 800261c:	4628      	mov	r0, r5
 800261e:	47b8      	blx	r7
 8002620:	3001      	adds	r0, #1
 8002622:	f43f aeae 	beq.w	8002382 <_printf_float+0xb6>
 8002626:	f108 0801 	add.w	r8, r8, #1
 800262a:	e7ec      	b.n	8002606 <_printf_float+0x33a>
 800262c:	4642      	mov	r2, r8
 800262e:	4631      	mov	r1, r6
 8002630:	4628      	mov	r0, r5
 8002632:	47b8      	blx	r7
 8002634:	3001      	adds	r0, #1
 8002636:	d1c2      	bne.n	80025be <_printf_float+0x2f2>
 8002638:	e6a3      	b.n	8002382 <_printf_float+0xb6>
 800263a:	2301      	movs	r3, #1
 800263c:	4631      	mov	r1, r6
 800263e:	4628      	mov	r0, r5
 8002640:	9206      	str	r2, [sp, #24]
 8002642:	47b8      	blx	r7
 8002644:	3001      	adds	r0, #1
 8002646:	f43f ae9c 	beq.w	8002382 <_printf_float+0xb6>
 800264a:	9a06      	ldr	r2, [sp, #24]
 800264c:	f10b 0b01 	add.w	fp, fp, #1
 8002650:	e7bb      	b.n	80025ca <_printf_float+0x2fe>
 8002652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002656:	4631      	mov	r1, r6
 8002658:	4628      	mov	r0, r5
 800265a:	47b8      	blx	r7
 800265c:	3001      	adds	r0, #1
 800265e:	d1c0      	bne.n	80025e2 <_printf_float+0x316>
 8002660:	e68f      	b.n	8002382 <_printf_float+0xb6>
 8002662:	9a06      	ldr	r2, [sp, #24]
 8002664:	464b      	mov	r3, r9
 8002666:	4442      	add	r2, r8
 8002668:	4631      	mov	r1, r6
 800266a:	4628      	mov	r0, r5
 800266c:	47b8      	blx	r7
 800266e:	3001      	adds	r0, #1
 8002670:	d1c3      	bne.n	80025fa <_printf_float+0x32e>
 8002672:	e686      	b.n	8002382 <_printf_float+0xb6>
 8002674:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002678:	f1ba 0f01 	cmp.w	sl, #1
 800267c:	dc01      	bgt.n	8002682 <_printf_float+0x3b6>
 800267e:	07db      	lsls	r3, r3, #31
 8002680:	d536      	bpl.n	80026f0 <_printf_float+0x424>
 8002682:	2301      	movs	r3, #1
 8002684:	4642      	mov	r2, r8
 8002686:	4631      	mov	r1, r6
 8002688:	4628      	mov	r0, r5
 800268a:	47b8      	blx	r7
 800268c:	3001      	adds	r0, #1
 800268e:	f43f ae78 	beq.w	8002382 <_printf_float+0xb6>
 8002692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002696:	4631      	mov	r1, r6
 8002698:	4628      	mov	r0, r5
 800269a:	47b8      	blx	r7
 800269c:	3001      	adds	r0, #1
 800269e:	f43f ae70 	beq.w	8002382 <_printf_float+0xb6>
 80026a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80026a6:	2200      	movs	r2, #0
 80026a8:	2300      	movs	r3, #0
 80026aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80026ae:	f7fe fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80026b2:	b9c0      	cbnz	r0, 80026e6 <_printf_float+0x41a>
 80026b4:	4653      	mov	r3, sl
 80026b6:	f108 0201 	add.w	r2, r8, #1
 80026ba:	4631      	mov	r1, r6
 80026bc:	4628      	mov	r0, r5
 80026be:	47b8      	blx	r7
 80026c0:	3001      	adds	r0, #1
 80026c2:	d10c      	bne.n	80026de <_printf_float+0x412>
 80026c4:	e65d      	b.n	8002382 <_printf_float+0xb6>
 80026c6:	2301      	movs	r3, #1
 80026c8:	465a      	mov	r2, fp
 80026ca:	4631      	mov	r1, r6
 80026cc:	4628      	mov	r0, r5
 80026ce:	47b8      	blx	r7
 80026d0:	3001      	adds	r0, #1
 80026d2:	f43f ae56 	beq.w	8002382 <_printf_float+0xb6>
 80026d6:	f108 0801 	add.w	r8, r8, #1
 80026da:	45d0      	cmp	r8, sl
 80026dc:	dbf3      	blt.n	80026c6 <_printf_float+0x3fa>
 80026de:	464b      	mov	r3, r9
 80026e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80026e4:	e6df      	b.n	80024a6 <_printf_float+0x1da>
 80026e6:	f04f 0800 	mov.w	r8, #0
 80026ea:	f104 0b1a 	add.w	fp, r4, #26
 80026ee:	e7f4      	b.n	80026da <_printf_float+0x40e>
 80026f0:	2301      	movs	r3, #1
 80026f2:	4642      	mov	r2, r8
 80026f4:	e7e1      	b.n	80026ba <_printf_float+0x3ee>
 80026f6:	2301      	movs	r3, #1
 80026f8:	464a      	mov	r2, r9
 80026fa:	4631      	mov	r1, r6
 80026fc:	4628      	mov	r0, r5
 80026fe:	47b8      	blx	r7
 8002700:	3001      	adds	r0, #1
 8002702:	f43f ae3e 	beq.w	8002382 <_printf_float+0xb6>
 8002706:	f108 0801 	add.w	r8, r8, #1
 800270a:	68e3      	ldr	r3, [r4, #12]
 800270c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800270e:	1a5b      	subs	r3, r3, r1
 8002710:	4543      	cmp	r3, r8
 8002712:	dcf0      	bgt.n	80026f6 <_printf_float+0x42a>
 8002714:	e6fc      	b.n	8002510 <_printf_float+0x244>
 8002716:	f04f 0800 	mov.w	r8, #0
 800271a:	f104 0919 	add.w	r9, r4, #25
 800271e:	e7f4      	b.n	800270a <_printf_float+0x43e>

08002720 <_printf_common>:
 8002720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002724:	4616      	mov	r6, r2
 8002726:	4698      	mov	r8, r3
 8002728:	688a      	ldr	r2, [r1, #8]
 800272a:	690b      	ldr	r3, [r1, #16]
 800272c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002730:	4293      	cmp	r3, r2
 8002732:	bfb8      	it	lt
 8002734:	4613      	movlt	r3, r2
 8002736:	6033      	str	r3, [r6, #0]
 8002738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800273c:	4607      	mov	r7, r0
 800273e:	460c      	mov	r4, r1
 8002740:	b10a      	cbz	r2, 8002746 <_printf_common+0x26>
 8002742:	3301      	adds	r3, #1
 8002744:	6033      	str	r3, [r6, #0]
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	0699      	lsls	r1, r3, #26
 800274a:	bf42      	ittt	mi
 800274c:	6833      	ldrmi	r3, [r6, #0]
 800274e:	3302      	addmi	r3, #2
 8002750:	6033      	strmi	r3, [r6, #0]
 8002752:	6825      	ldr	r5, [r4, #0]
 8002754:	f015 0506 	ands.w	r5, r5, #6
 8002758:	d106      	bne.n	8002768 <_printf_common+0x48>
 800275a:	f104 0a19 	add.w	sl, r4, #25
 800275e:	68e3      	ldr	r3, [r4, #12]
 8002760:	6832      	ldr	r2, [r6, #0]
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	42ab      	cmp	r3, r5
 8002766:	dc26      	bgt.n	80027b6 <_printf_common+0x96>
 8002768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800276c:	6822      	ldr	r2, [r4, #0]
 800276e:	3b00      	subs	r3, #0
 8002770:	bf18      	it	ne
 8002772:	2301      	movne	r3, #1
 8002774:	0692      	lsls	r2, r2, #26
 8002776:	d42b      	bmi.n	80027d0 <_printf_common+0xb0>
 8002778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800277c:	4641      	mov	r1, r8
 800277e:	4638      	mov	r0, r7
 8002780:	47c8      	blx	r9
 8002782:	3001      	adds	r0, #1
 8002784:	d01e      	beq.n	80027c4 <_printf_common+0xa4>
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	6922      	ldr	r2, [r4, #16]
 800278a:	f003 0306 	and.w	r3, r3, #6
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf02      	ittt	eq
 8002792:	68e5      	ldreq	r5, [r4, #12]
 8002794:	6833      	ldreq	r3, [r6, #0]
 8002796:	1aed      	subeq	r5, r5, r3
 8002798:	68a3      	ldr	r3, [r4, #8]
 800279a:	bf0c      	ite	eq
 800279c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027a0:	2500      	movne	r5, #0
 80027a2:	4293      	cmp	r3, r2
 80027a4:	bfc4      	itt	gt
 80027a6:	1a9b      	subgt	r3, r3, r2
 80027a8:	18ed      	addgt	r5, r5, r3
 80027aa:	2600      	movs	r6, #0
 80027ac:	341a      	adds	r4, #26
 80027ae:	42b5      	cmp	r5, r6
 80027b0:	d11a      	bne.n	80027e8 <_printf_common+0xc8>
 80027b2:	2000      	movs	r0, #0
 80027b4:	e008      	b.n	80027c8 <_printf_common+0xa8>
 80027b6:	2301      	movs	r3, #1
 80027b8:	4652      	mov	r2, sl
 80027ba:	4641      	mov	r1, r8
 80027bc:	4638      	mov	r0, r7
 80027be:	47c8      	blx	r9
 80027c0:	3001      	adds	r0, #1
 80027c2:	d103      	bne.n	80027cc <_printf_common+0xac>
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027cc:	3501      	adds	r5, #1
 80027ce:	e7c6      	b.n	800275e <_printf_common+0x3e>
 80027d0:	18e1      	adds	r1, r4, r3
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	2030      	movs	r0, #48	@ 0x30
 80027d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027da:	4422      	add	r2, r4
 80027dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027e4:	3302      	adds	r3, #2
 80027e6:	e7c7      	b.n	8002778 <_printf_common+0x58>
 80027e8:	2301      	movs	r3, #1
 80027ea:	4622      	mov	r2, r4
 80027ec:	4641      	mov	r1, r8
 80027ee:	4638      	mov	r0, r7
 80027f0:	47c8      	blx	r9
 80027f2:	3001      	adds	r0, #1
 80027f4:	d0e6      	beq.n	80027c4 <_printf_common+0xa4>
 80027f6:	3601      	adds	r6, #1
 80027f8:	e7d9      	b.n	80027ae <_printf_common+0x8e>
	...

080027fc <_printf_i>:
 80027fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002800:	7e0f      	ldrb	r7, [r1, #24]
 8002802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002804:	2f78      	cmp	r7, #120	@ 0x78
 8002806:	4691      	mov	r9, r2
 8002808:	4680      	mov	r8, r0
 800280a:	460c      	mov	r4, r1
 800280c:	469a      	mov	sl, r3
 800280e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002812:	d807      	bhi.n	8002824 <_printf_i+0x28>
 8002814:	2f62      	cmp	r7, #98	@ 0x62
 8002816:	d80a      	bhi.n	800282e <_printf_i+0x32>
 8002818:	2f00      	cmp	r7, #0
 800281a:	f000 80d2 	beq.w	80029c2 <_printf_i+0x1c6>
 800281e:	2f58      	cmp	r7, #88	@ 0x58
 8002820:	f000 80b9 	beq.w	8002996 <_printf_i+0x19a>
 8002824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800282c:	e03a      	b.n	80028a4 <_printf_i+0xa8>
 800282e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002832:	2b15      	cmp	r3, #21
 8002834:	d8f6      	bhi.n	8002824 <_printf_i+0x28>
 8002836:	a101      	add	r1, pc, #4	@ (adr r1, 800283c <_printf_i+0x40>)
 8002838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800283c:	08002895 	.word	0x08002895
 8002840:	080028a9 	.word	0x080028a9
 8002844:	08002825 	.word	0x08002825
 8002848:	08002825 	.word	0x08002825
 800284c:	08002825 	.word	0x08002825
 8002850:	08002825 	.word	0x08002825
 8002854:	080028a9 	.word	0x080028a9
 8002858:	08002825 	.word	0x08002825
 800285c:	08002825 	.word	0x08002825
 8002860:	08002825 	.word	0x08002825
 8002864:	08002825 	.word	0x08002825
 8002868:	080029a9 	.word	0x080029a9
 800286c:	080028d3 	.word	0x080028d3
 8002870:	08002963 	.word	0x08002963
 8002874:	08002825 	.word	0x08002825
 8002878:	08002825 	.word	0x08002825
 800287c:	080029cb 	.word	0x080029cb
 8002880:	08002825 	.word	0x08002825
 8002884:	080028d3 	.word	0x080028d3
 8002888:	08002825 	.word	0x08002825
 800288c:	08002825 	.word	0x08002825
 8002890:	0800296b 	.word	0x0800296b
 8002894:	6833      	ldr	r3, [r6, #0]
 8002896:	1d1a      	adds	r2, r3, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6032      	str	r2, [r6, #0]
 800289c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028a4:	2301      	movs	r3, #1
 80028a6:	e09d      	b.n	80029e4 <_printf_i+0x1e8>
 80028a8:	6833      	ldr	r3, [r6, #0]
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	1d19      	adds	r1, r3, #4
 80028ae:	6031      	str	r1, [r6, #0]
 80028b0:	0606      	lsls	r6, r0, #24
 80028b2:	d501      	bpl.n	80028b8 <_printf_i+0xbc>
 80028b4:	681d      	ldr	r5, [r3, #0]
 80028b6:	e003      	b.n	80028c0 <_printf_i+0xc4>
 80028b8:	0645      	lsls	r5, r0, #25
 80028ba:	d5fb      	bpl.n	80028b4 <_printf_i+0xb8>
 80028bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028c0:	2d00      	cmp	r5, #0
 80028c2:	da03      	bge.n	80028cc <_printf_i+0xd0>
 80028c4:	232d      	movs	r3, #45	@ 0x2d
 80028c6:	426d      	negs	r5, r5
 80028c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028cc:	4859      	ldr	r0, [pc, #356]	@ (8002a34 <_printf_i+0x238>)
 80028ce:	230a      	movs	r3, #10
 80028d0:	e011      	b.n	80028f6 <_printf_i+0xfa>
 80028d2:	6821      	ldr	r1, [r4, #0]
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	0608      	lsls	r0, r1, #24
 80028d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80028dc:	d402      	bmi.n	80028e4 <_printf_i+0xe8>
 80028de:	0649      	lsls	r1, r1, #25
 80028e0:	bf48      	it	mi
 80028e2:	b2ad      	uxthmi	r5, r5
 80028e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80028e6:	4853      	ldr	r0, [pc, #332]	@ (8002a34 <_printf_i+0x238>)
 80028e8:	6033      	str	r3, [r6, #0]
 80028ea:	bf14      	ite	ne
 80028ec:	230a      	movne	r3, #10
 80028ee:	2308      	moveq	r3, #8
 80028f0:	2100      	movs	r1, #0
 80028f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028f6:	6866      	ldr	r6, [r4, #4]
 80028f8:	60a6      	str	r6, [r4, #8]
 80028fa:	2e00      	cmp	r6, #0
 80028fc:	bfa2      	ittt	ge
 80028fe:	6821      	ldrge	r1, [r4, #0]
 8002900:	f021 0104 	bicge.w	r1, r1, #4
 8002904:	6021      	strge	r1, [r4, #0]
 8002906:	b90d      	cbnz	r5, 800290c <_printf_i+0x110>
 8002908:	2e00      	cmp	r6, #0
 800290a:	d04b      	beq.n	80029a4 <_printf_i+0x1a8>
 800290c:	4616      	mov	r6, r2
 800290e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002912:	fb03 5711 	mls	r7, r3, r1, r5
 8002916:	5dc7      	ldrb	r7, [r0, r7]
 8002918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800291c:	462f      	mov	r7, r5
 800291e:	42bb      	cmp	r3, r7
 8002920:	460d      	mov	r5, r1
 8002922:	d9f4      	bls.n	800290e <_printf_i+0x112>
 8002924:	2b08      	cmp	r3, #8
 8002926:	d10b      	bne.n	8002940 <_printf_i+0x144>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	07df      	lsls	r7, r3, #31
 800292c:	d508      	bpl.n	8002940 <_printf_i+0x144>
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	6861      	ldr	r1, [r4, #4]
 8002932:	4299      	cmp	r1, r3
 8002934:	bfde      	ittt	le
 8002936:	2330      	movle	r3, #48	@ 0x30
 8002938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800293c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002940:	1b92      	subs	r2, r2, r6
 8002942:	6122      	str	r2, [r4, #16]
 8002944:	f8cd a000 	str.w	sl, [sp]
 8002948:	464b      	mov	r3, r9
 800294a:	aa03      	add	r2, sp, #12
 800294c:	4621      	mov	r1, r4
 800294e:	4640      	mov	r0, r8
 8002950:	f7ff fee6 	bl	8002720 <_printf_common>
 8002954:	3001      	adds	r0, #1
 8002956:	d14a      	bne.n	80029ee <_printf_i+0x1f2>
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	b004      	add	sp, #16
 800295e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	f043 0320 	orr.w	r3, r3, #32
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	4833      	ldr	r0, [pc, #204]	@ (8002a38 <_printf_i+0x23c>)
 800296c:	2778      	movs	r7, #120	@ 0x78
 800296e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	6831      	ldr	r1, [r6, #0]
 8002976:	061f      	lsls	r7, r3, #24
 8002978:	f851 5b04 	ldr.w	r5, [r1], #4
 800297c:	d402      	bmi.n	8002984 <_printf_i+0x188>
 800297e:	065f      	lsls	r7, r3, #25
 8002980:	bf48      	it	mi
 8002982:	b2ad      	uxthmi	r5, r5
 8002984:	6031      	str	r1, [r6, #0]
 8002986:	07d9      	lsls	r1, r3, #31
 8002988:	bf44      	itt	mi
 800298a:	f043 0320 	orrmi.w	r3, r3, #32
 800298e:	6023      	strmi	r3, [r4, #0]
 8002990:	b11d      	cbz	r5, 800299a <_printf_i+0x19e>
 8002992:	2310      	movs	r3, #16
 8002994:	e7ac      	b.n	80028f0 <_printf_i+0xf4>
 8002996:	4827      	ldr	r0, [pc, #156]	@ (8002a34 <_printf_i+0x238>)
 8002998:	e7e9      	b.n	800296e <_printf_i+0x172>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	f023 0320 	bic.w	r3, r3, #32
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	e7f6      	b.n	8002992 <_printf_i+0x196>
 80029a4:	4616      	mov	r6, r2
 80029a6:	e7bd      	b.n	8002924 <_printf_i+0x128>
 80029a8:	6833      	ldr	r3, [r6, #0]
 80029aa:	6825      	ldr	r5, [r4, #0]
 80029ac:	6961      	ldr	r1, [r4, #20]
 80029ae:	1d18      	adds	r0, r3, #4
 80029b0:	6030      	str	r0, [r6, #0]
 80029b2:	062e      	lsls	r6, r5, #24
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	d501      	bpl.n	80029bc <_printf_i+0x1c0>
 80029b8:	6019      	str	r1, [r3, #0]
 80029ba:	e002      	b.n	80029c2 <_printf_i+0x1c6>
 80029bc:	0668      	lsls	r0, r5, #25
 80029be:	d5fb      	bpl.n	80029b8 <_printf_i+0x1bc>
 80029c0:	8019      	strh	r1, [r3, #0]
 80029c2:	2300      	movs	r3, #0
 80029c4:	6123      	str	r3, [r4, #16]
 80029c6:	4616      	mov	r6, r2
 80029c8:	e7bc      	b.n	8002944 <_printf_i+0x148>
 80029ca:	6833      	ldr	r3, [r6, #0]
 80029cc:	1d1a      	adds	r2, r3, #4
 80029ce:	6032      	str	r2, [r6, #0]
 80029d0:	681e      	ldr	r6, [r3, #0]
 80029d2:	6862      	ldr	r2, [r4, #4]
 80029d4:	2100      	movs	r1, #0
 80029d6:	4630      	mov	r0, r6
 80029d8:	f7fd fc02 	bl	80001e0 <memchr>
 80029dc:	b108      	cbz	r0, 80029e2 <_printf_i+0x1e6>
 80029de:	1b80      	subs	r0, r0, r6
 80029e0:	6060      	str	r0, [r4, #4]
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	6123      	str	r3, [r4, #16]
 80029e6:	2300      	movs	r3, #0
 80029e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029ec:	e7aa      	b.n	8002944 <_printf_i+0x148>
 80029ee:	6923      	ldr	r3, [r4, #16]
 80029f0:	4632      	mov	r2, r6
 80029f2:	4649      	mov	r1, r9
 80029f4:	4640      	mov	r0, r8
 80029f6:	47d0      	blx	sl
 80029f8:	3001      	adds	r0, #1
 80029fa:	d0ad      	beq.n	8002958 <_printf_i+0x15c>
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	079b      	lsls	r3, r3, #30
 8002a00:	d413      	bmi.n	8002a2a <_printf_i+0x22e>
 8002a02:	68e0      	ldr	r0, [r4, #12]
 8002a04:	9b03      	ldr	r3, [sp, #12]
 8002a06:	4298      	cmp	r0, r3
 8002a08:	bfb8      	it	lt
 8002a0a:	4618      	movlt	r0, r3
 8002a0c:	e7a6      	b.n	800295c <_printf_i+0x160>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	4632      	mov	r2, r6
 8002a12:	4649      	mov	r1, r9
 8002a14:	4640      	mov	r0, r8
 8002a16:	47d0      	blx	sl
 8002a18:	3001      	adds	r0, #1
 8002a1a:	d09d      	beq.n	8002958 <_printf_i+0x15c>
 8002a1c:	3501      	adds	r5, #1
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	9903      	ldr	r1, [sp, #12]
 8002a22:	1a5b      	subs	r3, r3, r1
 8002a24:	42ab      	cmp	r3, r5
 8002a26:	dcf2      	bgt.n	8002a0e <_printf_i+0x212>
 8002a28:	e7eb      	b.n	8002a02 <_printf_i+0x206>
 8002a2a:	2500      	movs	r5, #0
 8002a2c:	f104 0619 	add.w	r6, r4, #25
 8002a30:	e7f5      	b.n	8002a1e <_printf_i+0x222>
 8002a32:	bf00      	nop
 8002a34:	08004fa0 	.word	0x08004fa0
 8002a38:	08004fb1 	.word	0x08004fb1

08002a3c <std>:
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	b510      	push	{r4, lr}
 8002a40:	4604      	mov	r4, r0
 8002a42:	e9c0 3300 	strd	r3, r3, [r0]
 8002a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a4a:	6083      	str	r3, [r0, #8]
 8002a4c:	8181      	strh	r1, [r0, #12]
 8002a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a50:	81c2      	strh	r2, [r0, #14]
 8002a52:	6183      	str	r3, [r0, #24]
 8002a54:	4619      	mov	r1, r3
 8002a56:	2208      	movs	r2, #8
 8002a58:	305c      	adds	r0, #92	@ 0x5c
 8002a5a:	f000 f928 	bl	8002cae <memset>
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <std+0x58>)
 8002a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <std+0x5c>)
 8002a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a66:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <std+0x60>)
 8002a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <std+0x64>)
 8002a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <std+0x68>)
 8002a70:	6224      	str	r4, [r4, #32]
 8002a72:	429c      	cmp	r4, r3
 8002a74:	d006      	beq.n	8002a84 <std+0x48>
 8002a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a7a:	4294      	cmp	r4, r2
 8002a7c:	d002      	beq.n	8002a84 <std+0x48>
 8002a7e:	33d0      	adds	r3, #208	@ 0xd0
 8002a80:	429c      	cmp	r4, r3
 8002a82:	d105      	bne.n	8002a90 <std+0x54>
 8002a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a8c:	f000 b98c 	b.w	8002da8 <__retarget_lock_init_recursive>
 8002a90:	bd10      	pop	{r4, pc}
 8002a92:	bf00      	nop
 8002a94:	08002c29 	.word	0x08002c29
 8002a98:	08002c4b 	.word	0x08002c4b
 8002a9c:	08002c83 	.word	0x08002c83
 8002aa0:	08002ca7 	.word	0x08002ca7
 8002aa4:	20000250 	.word	0x20000250

08002aa8 <stdio_exit_handler>:
 8002aa8:	4a02      	ldr	r2, [pc, #8]	@ (8002ab4 <stdio_exit_handler+0xc>)
 8002aaa:	4903      	ldr	r1, [pc, #12]	@ (8002ab8 <stdio_exit_handler+0x10>)
 8002aac:	4803      	ldr	r0, [pc, #12]	@ (8002abc <stdio_exit_handler+0x14>)
 8002aae:	f000 b869 	b.w	8002b84 <_fwalk_sglue>
 8002ab2:	bf00      	nop
 8002ab4:	20000054 	.word	0x20000054
 8002ab8:	08004705 	.word	0x08004705
 8002abc:	20000064 	.word	0x20000064

08002ac0 <cleanup_stdio>:
 8002ac0:	6841      	ldr	r1, [r0, #4]
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <cleanup_stdio+0x34>)
 8002ac4:	4299      	cmp	r1, r3
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	4604      	mov	r4, r0
 8002aca:	d001      	beq.n	8002ad0 <cleanup_stdio+0x10>
 8002acc:	f001 fe1a 	bl	8004704 <_fflush_r>
 8002ad0:	68a1      	ldr	r1, [r4, #8]
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <cleanup_stdio+0x38>)
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	d002      	beq.n	8002ade <cleanup_stdio+0x1e>
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f001 fe13 	bl	8004704 <_fflush_r>
 8002ade:	68e1      	ldr	r1, [r4, #12]
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <cleanup_stdio+0x3c>)
 8002ae2:	4299      	cmp	r1, r3
 8002ae4:	d004      	beq.n	8002af0 <cleanup_stdio+0x30>
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aec:	f001 be0a 	b.w	8004704 <_fflush_r>
 8002af0:	bd10      	pop	{r4, pc}
 8002af2:	bf00      	nop
 8002af4:	20000250 	.word	0x20000250
 8002af8:	200002b8 	.word	0x200002b8
 8002afc:	20000320 	.word	0x20000320

08002b00 <global_stdio_init.part.0>:
 8002b00:	b510      	push	{r4, lr}
 8002b02:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <global_stdio_init.part.0+0x30>)
 8002b04:	4c0b      	ldr	r4, [pc, #44]	@ (8002b34 <global_stdio_init.part.0+0x34>)
 8002b06:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <global_stdio_init.part.0+0x38>)
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2104      	movs	r1, #4
 8002b10:	f7ff ff94 	bl	8002a3c <std>
 8002b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2109      	movs	r1, #9
 8002b1c:	f7ff ff8e 	bl	8002a3c <std>
 8002b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b24:	2202      	movs	r2, #2
 8002b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b2a:	2112      	movs	r1, #18
 8002b2c:	f7ff bf86 	b.w	8002a3c <std>
 8002b30:	20000388 	.word	0x20000388
 8002b34:	20000250 	.word	0x20000250
 8002b38:	08002aa9 	.word	0x08002aa9

08002b3c <__sfp_lock_acquire>:
 8002b3c:	4801      	ldr	r0, [pc, #4]	@ (8002b44 <__sfp_lock_acquire+0x8>)
 8002b3e:	f000 b934 	b.w	8002daa <__retarget_lock_acquire_recursive>
 8002b42:	bf00      	nop
 8002b44:	20000391 	.word	0x20000391

08002b48 <__sfp_lock_release>:
 8002b48:	4801      	ldr	r0, [pc, #4]	@ (8002b50 <__sfp_lock_release+0x8>)
 8002b4a:	f000 b92f 	b.w	8002dac <__retarget_lock_release_recursive>
 8002b4e:	bf00      	nop
 8002b50:	20000391 	.word	0x20000391

08002b54 <__sinit>:
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
 8002b58:	f7ff fff0 	bl	8002b3c <__sfp_lock_acquire>
 8002b5c:	6a23      	ldr	r3, [r4, #32]
 8002b5e:	b11b      	cbz	r3, 8002b68 <__sinit+0x14>
 8002b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b64:	f7ff bff0 	b.w	8002b48 <__sfp_lock_release>
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <__sinit+0x28>)
 8002b6a:	6223      	str	r3, [r4, #32]
 8002b6c:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <__sinit+0x2c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f5      	bne.n	8002b60 <__sinit+0xc>
 8002b74:	f7ff ffc4 	bl	8002b00 <global_stdio_init.part.0>
 8002b78:	e7f2      	b.n	8002b60 <__sinit+0xc>
 8002b7a:	bf00      	nop
 8002b7c:	08002ac1 	.word	0x08002ac1
 8002b80:	20000388 	.word	0x20000388

08002b84 <_fwalk_sglue>:
 8002b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b88:	4607      	mov	r7, r0
 8002b8a:	4688      	mov	r8, r1
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	2600      	movs	r6, #0
 8002b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b94:	f1b9 0901 	subs.w	r9, r9, #1
 8002b98:	d505      	bpl.n	8002ba6 <_fwalk_sglue+0x22>
 8002b9a:	6824      	ldr	r4, [r4, #0]
 8002b9c:	2c00      	cmp	r4, #0
 8002b9e:	d1f7      	bne.n	8002b90 <_fwalk_sglue+0xc>
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ba6:	89ab      	ldrh	r3, [r5, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d907      	bls.n	8002bbc <_fwalk_sglue+0x38>
 8002bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	d003      	beq.n	8002bbc <_fwalk_sglue+0x38>
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	47c0      	blx	r8
 8002bba:	4306      	orrs	r6, r0
 8002bbc:	3568      	adds	r5, #104	@ 0x68
 8002bbe:	e7e9      	b.n	8002b94 <_fwalk_sglue+0x10>

08002bc0 <sniprintf>:
 8002bc0:	b40c      	push	{r2, r3}
 8002bc2:	b530      	push	{r4, r5, lr}
 8002bc4:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <sniprintf+0x64>)
 8002bc6:	1e0c      	subs	r4, r1, #0
 8002bc8:	681d      	ldr	r5, [r3, #0]
 8002bca:	b09d      	sub	sp, #116	@ 0x74
 8002bcc:	da08      	bge.n	8002be0 <sniprintf+0x20>
 8002bce:	238b      	movs	r3, #139	@ 0x8b
 8002bd0:	602b      	str	r3, [r5, #0]
 8002bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd6:	b01d      	add	sp, #116	@ 0x74
 8002bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bdc:	b002      	add	sp, #8
 8002bde:	4770      	bx	lr
 8002be0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002be4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002be8:	bf14      	ite	ne
 8002bea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002bee:	4623      	moveq	r3, r4
 8002bf0:	9304      	str	r3, [sp, #16]
 8002bf2:	9307      	str	r3, [sp, #28]
 8002bf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bf8:	9002      	str	r0, [sp, #8]
 8002bfa:	9006      	str	r0, [sp, #24]
 8002bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002c00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002c02:	ab21      	add	r3, sp, #132	@ 0x84
 8002c04:	a902      	add	r1, sp, #8
 8002c06:	4628      	mov	r0, r5
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	f001 fbfb 	bl	8004404 <_svfiprintf_r>
 8002c0e:	1c43      	adds	r3, r0, #1
 8002c10:	bfbc      	itt	lt
 8002c12:	238b      	movlt	r3, #139	@ 0x8b
 8002c14:	602b      	strlt	r3, [r5, #0]
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d0dd      	beq.n	8002bd6 <sniprintf+0x16>
 8002c1a:	9b02      	ldr	r3, [sp, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e7d9      	b.n	8002bd6 <sniprintf+0x16>
 8002c22:	bf00      	nop
 8002c24:	20000060 	.word	0x20000060

08002c28 <__sread>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c30:	f000 f86c 	bl	8002d0c <_read_r>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	bfab      	itete	ge
 8002c38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c3c:	181b      	addge	r3, r3, r0
 8002c3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c42:	bfac      	ite	ge
 8002c44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c46:	81a3      	strhlt	r3, [r4, #12]
 8002c48:	bd10      	pop	{r4, pc}

08002c4a <__swrite>:
 8002c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c4e:	461f      	mov	r7, r3
 8002c50:	898b      	ldrh	r3, [r1, #12]
 8002c52:	05db      	lsls	r3, r3, #23
 8002c54:	4605      	mov	r5, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	4616      	mov	r6, r2
 8002c5a:	d505      	bpl.n	8002c68 <__swrite+0x1e>
 8002c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c60:	2302      	movs	r3, #2
 8002c62:	2200      	movs	r2, #0
 8002c64:	f000 f840 	bl	8002ce8 <_lseek_r>
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c72:	81a3      	strh	r3, [r4, #12]
 8002c74:	4632      	mov	r2, r6
 8002c76:	463b      	mov	r3, r7
 8002c78:	4628      	mov	r0, r5
 8002c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7e:	f000 b857 	b.w	8002d30 <_write_r>

08002c82 <__sseek>:
 8002c82:	b510      	push	{r4, lr}
 8002c84:	460c      	mov	r4, r1
 8002c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c8a:	f000 f82d 	bl	8002ce8 <_lseek_r>
 8002c8e:	1c43      	adds	r3, r0, #1
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	bf15      	itete	ne
 8002c94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c9e:	81a3      	strheq	r3, [r4, #12]
 8002ca0:	bf18      	it	ne
 8002ca2:	81a3      	strhne	r3, [r4, #12]
 8002ca4:	bd10      	pop	{r4, pc}

08002ca6 <__sclose>:
 8002ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002caa:	f000 b80d 	b.w	8002cc8 <_close_r>

08002cae <memset>:
 8002cae:	4402      	add	r2, r0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d100      	bne.n	8002cb8 <memset+0xa>
 8002cb6:	4770      	bx	lr
 8002cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8002cbc:	e7f9      	b.n	8002cb2 <memset+0x4>
	...

08002cc0 <_localeconv_r>:
 8002cc0:	4800      	ldr	r0, [pc, #0]	@ (8002cc4 <_localeconv_r+0x4>)
 8002cc2:	4770      	bx	lr
 8002cc4:	200001a0 	.word	0x200001a0

08002cc8 <_close_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	4d06      	ldr	r5, [pc, #24]	@ (8002ce4 <_close_r+0x1c>)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	f7ff f8bf 	bl	8001e56 <_close>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_close_r+0x1a>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_close_r+0x1a>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	2000038c 	.word	0x2000038c

08002ce8 <_lseek_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4d07      	ldr	r5, [pc, #28]	@ (8002d08 <_lseek_r+0x20>)
 8002cec:	4604      	mov	r4, r0
 8002cee:	4608      	mov	r0, r1
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	602a      	str	r2, [r5, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f7ff f8d4 	bl	8001ea4 <_lseek>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d102      	bne.n	8002d06 <_lseek_r+0x1e>
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	b103      	cbz	r3, 8002d06 <_lseek_r+0x1e>
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
 8002d08:	2000038c 	.word	0x2000038c

08002d0c <_read_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	4d07      	ldr	r5, [pc, #28]	@ (8002d2c <_read_r+0x20>)
 8002d10:	4604      	mov	r4, r0
 8002d12:	4608      	mov	r0, r1
 8002d14:	4611      	mov	r1, r2
 8002d16:	2200      	movs	r2, #0
 8002d18:	602a      	str	r2, [r5, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f7ff f862 	bl	8001de4 <_read>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	d102      	bne.n	8002d2a <_read_r+0x1e>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b103      	cbz	r3, 8002d2a <_read_r+0x1e>
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	2000038c 	.word	0x2000038c

08002d30 <_write_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	4d07      	ldr	r5, [pc, #28]	@ (8002d50 <_write_r+0x20>)
 8002d34:	4604      	mov	r4, r0
 8002d36:	4608      	mov	r0, r1
 8002d38:	4611      	mov	r1, r2
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	602a      	str	r2, [r5, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f7ff f86d 	bl	8001e1e <_write>
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d102      	bne.n	8002d4e <_write_r+0x1e>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	b103      	cbz	r3, 8002d4e <_write_r+0x1e>
 8002d4c:	6023      	str	r3, [r4, #0]
 8002d4e:	bd38      	pop	{r3, r4, r5, pc}
 8002d50:	2000038c 	.word	0x2000038c

08002d54 <__errno>:
 8002d54:	4b01      	ldr	r3, [pc, #4]	@ (8002d5c <__errno+0x8>)
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000060 	.word	0x20000060

08002d60 <__libc_init_array>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	4d0d      	ldr	r5, [pc, #52]	@ (8002d98 <__libc_init_array+0x38>)
 8002d64:	4c0d      	ldr	r4, [pc, #52]	@ (8002d9c <__libc_init_array+0x3c>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	42a6      	cmp	r6, r4
 8002d6e:	d109      	bne.n	8002d84 <__libc_init_array+0x24>
 8002d70:	4d0b      	ldr	r5, [pc, #44]	@ (8002da0 <__libc_init_array+0x40>)
 8002d72:	4c0c      	ldr	r4, [pc, #48]	@ (8002da4 <__libc_init_array+0x44>)
 8002d74:	f002 f864 	bl	8004e40 <_init>
 8002d78:	1b64      	subs	r4, r4, r5
 8002d7a:	10a4      	asrs	r4, r4, #2
 8002d7c:	2600      	movs	r6, #0
 8002d7e:	42a6      	cmp	r6, r4
 8002d80:	d105      	bne.n	8002d8e <__libc_init_array+0x2e>
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d88:	4798      	blx	r3
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	e7ee      	b.n	8002d6c <__libc_init_array+0xc>
 8002d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d92:	4798      	blx	r3
 8002d94:	3601      	adds	r6, #1
 8002d96:	e7f2      	b.n	8002d7e <__libc_init_array+0x1e>
 8002d98:	08005308 	.word	0x08005308
 8002d9c:	08005308 	.word	0x08005308
 8002da0:	08005308 	.word	0x08005308
 8002da4:	0800530c 	.word	0x0800530c

08002da8 <__retarget_lock_init_recursive>:
 8002da8:	4770      	bx	lr

08002daa <__retarget_lock_acquire_recursive>:
 8002daa:	4770      	bx	lr

08002dac <__retarget_lock_release_recursive>:
 8002dac:	4770      	bx	lr

08002dae <quorem>:
 8002dae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db2:	6903      	ldr	r3, [r0, #16]
 8002db4:	690c      	ldr	r4, [r1, #16]
 8002db6:	42a3      	cmp	r3, r4
 8002db8:	4607      	mov	r7, r0
 8002dba:	db7e      	blt.n	8002eba <quorem+0x10c>
 8002dbc:	3c01      	subs	r4, #1
 8002dbe:	f101 0814 	add.w	r8, r1, #20
 8002dc2:	00a3      	lsls	r3, r4, #2
 8002dc4:	f100 0514 	add.w	r5, r0, #20
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002dd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002de0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002de4:	d32e      	bcc.n	8002e44 <quorem+0x96>
 8002de6:	f04f 0a00 	mov.w	sl, #0
 8002dea:	46c4      	mov	ip, r8
 8002dec:	46ae      	mov	lr, r5
 8002dee:	46d3      	mov	fp, sl
 8002df0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002df4:	b298      	uxth	r0, r3
 8002df6:	fb06 a000 	mla	r0, r6, r0, sl
 8002dfa:	0c02      	lsrs	r2, r0, #16
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	fb06 2303 	mla	r3, r6, r3, r2
 8002e02:	f8de 2000 	ldr.w	r2, [lr]
 8002e06:	b280      	uxth	r0, r0
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	1a12      	subs	r2, r2, r0
 8002e0c:	445a      	add	r2, fp
 8002e0e:	f8de 0000 	ldr.w	r0, [lr]
 8002e12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002e1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002e20:	b292      	uxth	r2, r2
 8002e22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002e26:	45e1      	cmp	r9, ip
 8002e28:	f84e 2b04 	str.w	r2, [lr], #4
 8002e2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002e30:	d2de      	bcs.n	8002df0 <quorem+0x42>
 8002e32:	9b00      	ldr	r3, [sp, #0]
 8002e34:	58eb      	ldr	r3, [r5, r3]
 8002e36:	b92b      	cbnz	r3, 8002e44 <quorem+0x96>
 8002e38:	9b01      	ldr	r3, [sp, #4]
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	429d      	cmp	r5, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	d32f      	bcc.n	8002ea2 <quorem+0xf4>
 8002e42:	613c      	str	r4, [r7, #16]
 8002e44:	4638      	mov	r0, r7
 8002e46:	f001 f979 	bl	800413c <__mcmp>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	db25      	blt.n	8002e9a <quorem+0xec>
 8002e4e:	4629      	mov	r1, r5
 8002e50:	2000      	movs	r0, #0
 8002e52:	f858 2b04 	ldr.w	r2, [r8], #4
 8002e56:	f8d1 c000 	ldr.w	ip, [r1]
 8002e5a:	fa1f fe82 	uxth.w	lr, r2
 8002e5e:	fa1f f38c 	uxth.w	r3, ip
 8002e62:	eba3 030e 	sub.w	r3, r3, lr
 8002e66:	4403      	add	r3, r0
 8002e68:	0c12      	lsrs	r2, r2, #16
 8002e6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002e6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e78:	45c1      	cmp	r9, r8
 8002e7a:	f841 3b04 	str.w	r3, [r1], #4
 8002e7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002e82:	d2e6      	bcs.n	8002e52 <quorem+0xa4>
 8002e84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e8c:	b922      	cbnz	r2, 8002e98 <quorem+0xea>
 8002e8e:	3b04      	subs	r3, #4
 8002e90:	429d      	cmp	r5, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	d30b      	bcc.n	8002eae <quorem+0x100>
 8002e96:	613c      	str	r4, [r7, #16]
 8002e98:	3601      	adds	r6, #1
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	b003      	add	sp, #12
 8002e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	3b04      	subs	r3, #4
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d1cb      	bne.n	8002e42 <quorem+0x94>
 8002eaa:	3c01      	subs	r4, #1
 8002eac:	e7c6      	b.n	8002e3c <quorem+0x8e>
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	3b04      	subs	r3, #4
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d1ef      	bne.n	8002e96 <quorem+0xe8>
 8002eb6:	3c01      	subs	r4, #1
 8002eb8:	e7ea      	b.n	8002e90 <quorem+0xe2>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e7ee      	b.n	8002e9c <quorem+0xee>
	...

08002ec0 <_dtoa_r>:
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec4:	69c7      	ldr	r7, [r0, #28]
 8002ec6:	b099      	sub	sp, #100	@ 0x64
 8002ec8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002ecc:	ec55 4b10 	vmov	r4, r5, d0
 8002ed0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002ed2:	9109      	str	r1, [sp, #36]	@ 0x24
 8002ed4:	4683      	mov	fp, r0
 8002ed6:	920e      	str	r2, [sp, #56]	@ 0x38
 8002ed8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002eda:	b97f      	cbnz	r7, 8002efc <_dtoa_r+0x3c>
 8002edc:	2010      	movs	r0, #16
 8002ede:	f000 fdfd 	bl	8003adc <malloc>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	f8cb 001c 	str.w	r0, [fp, #28]
 8002ee8:	b920      	cbnz	r0, 8002ef4 <_dtoa_r+0x34>
 8002eea:	4ba7      	ldr	r3, [pc, #668]	@ (8003188 <_dtoa_r+0x2c8>)
 8002eec:	21ef      	movs	r1, #239	@ 0xef
 8002eee:	48a7      	ldr	r0, [pc, #668]	@ (800318c <_dtoa_r+0x2cc>)
 8002ef0:	f001 fc68 	bl	80047c4 <__assert_func>
 8002ef4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002ef8:	6007      	str	r7, [r0, #0]
 8002efa:	60c7      	str	r7, [r0, #12]
 8002efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	b159      	cbz	r1, 8002f1c <_dtoa_r+0x5c>
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	604a      	str	r2, [r1, #4]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4093      	lsls	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
 8002f0e:	4658      	mov	r0, fp
 8002f10:	f000 feda 	bl	8003cc8 <_Bfree>
 8002f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	1e2b      	subs	r3, r5, #0
 8002f1e:	bfb9      	ittee	lt
 8002f20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002f24:	9303      	strlt	r3, [sp, #12]
 8002f26:	2300      	movge	r3, #0
 8002f28:	6033      	strge	r3, [r6, #0]
 8002f2a:	9f03      	ldr	r7, [sp, #12]
 8002f2c:	4b98      	ldr	r3, [pc, #608]	@ (8003190 <_dtoa_r+0x2d0>)
 8002f2e:	bfbc      	itt	lt
 8002f30:	2201      	movlt	r2, #1
 8002f32:	6032      	strlt	r2, [r6, #0]
 8002f34:	43bb      	bics	r3, r7
 8002f36:	d112      	bne.n	8002f5e <_dtoa_r+0x9e>
 8002f38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002f3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002f44:	4323      	orrs	r3, r4
 8002f46:	f000 854d 	beq.w	80039e4 <_dtoa_r+0xb24>
 8002f4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002f4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80031a4 <_dtoa_r+0x2e4>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 854f 	beq.w	80039f4 <_dtoa_r+0xb34>
 8002f56:	f10a 0303 	add.w	r3, sl, #3
 8002f5a:	f000 bd49 	b.w	80039f0 <_dtoa_r+0xb30>
 8002f5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002f62:	2200      	movs	r2, #0
 8002f64:	ec51 0b17 	vmov	r0, r1, d7
 8002f68:	2300      	movs	r3, #0
 8002f6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002f6e:	f7fd fdb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f72:	4680      	mov	r8, r0
 8002f74:	b158      	cbz	r0, 8002f8e <_dtoa_r+0xce>
 8002f76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002f78:	2301      	movs	r3, #1
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002f7e:	b113      	cbz	r3, 8002f86 <_dtoa_r+0xc6>
 8002f80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002f82:	4b84      	ldr	r3, [pc, #528]	@ (8003194 <_dtoa_r+0x2d4>)
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80031a8 <_dtoa_r+0x2e8>
 8002f8a:	f000 bd33 	b.w	80039f4 <_dtoa_r+0xb34>
 8002f8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002f92:	aa16      	add	r2, sp, #88	@ 0x58
 8002f94:	a917      	add	r1, sp, #92	@ 0x5c
 8002f96:	4658      	mov	r0, fp
 8002f98:	f001 f980 	bl	800429c <__d2b>
 8002f9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002fa0:	4681      	mov	r9, r0
 8002fa2:	2e00      	cmp	r6, #0
 8002fa4:	d077      	beq.n	8003096 <_dtoa_r+0x1d6>
 8002fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002fa8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002fb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002fb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002fbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4b74      	ldr	r3, [pc, #464]	@ (8003198 <_dtoa_r+0x2d8>)
 8002fc6:	f7fd f967 	bl	8000298 <__aeabi_dsub>
 8002fca:	a369      	add	r3, pc, #420	@ (adr r3, 8003170 <_dtoa_r+0x2b0>)
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f7fd fb1a 	bl	8000608 <__aeabi_dmul>
 8002fd4:	a368      	add	r3, pc, #416	@ (adr r3, 8003178 <_dtoa_r+0x2b8>)
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f7fd f95f 	bl	800029c <__adddf3>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	f7fd faa6 	bl	8000534 <__aeabi_i2d>
 8002fe8:	a365      	add	r3, pc, #404	@ (adr r3, 8003180 <_dtoa_r+0x2c0>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd fb0b 	bl	8000608 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	f7fd f94f 	bl	800029c <__adddf3>
 8002ffe:	4604      	mov	r4, r0
 8003000:	460d      	mov	r5, r1
 8003002:	f7fd fdb1 	bl	8000b68 <__aeabi_d2iz>
 8003006:	2200      	movs	r2, #0
 8003008:	4607      	mov	r7, r0
 800300a:	2300      	movs	r3, #0
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd fd6c 	bl	8000aec <__aeabi_dcmplt>
 8003014:	b140      	cbz	r0, 8003028 <_dtoa_r+0x168>
 8003016:	4638      	mov	r0, r7
 8003018:	f7fd fa8c 	bl	8000534 <__aeabi_i2d>
 800301c:	4622      	mov	r2, r4
 800301e:	462b      	mov	r3, r5
 8003020:	f7fd fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003024:	b900      	cbnz	r0, 8003028 <_dtoa_r+0x168>
 8003026:	3f01      	subs	r7, #1
 8003028:	2f16      	cmp	r7, #22
 800302a:	d851      	bhi.n	80030d0 <_dtoa_r+0x210>
 800302c:	4b5b      	ldr	r3, [pc, #364]	@ (800319c <_dtoa_r+0x2dc>)
 800302e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800303a:	f7fd fd57 	bl	8000aec <__aeabi_dcmplt>
 800303e:	2800      	cmp	r0, #0
 8003040:	d048      	beq.n	80030d4 <_dtoa_r+0x214>
 8003042:	3f01      	subs	r7, #1
 8003044:	2300      	movs	r3, #0
 8003046:	9312      	str	r3, [sp, #72]	@ 0x48
 8003048:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800304a:	1b9b      	subs	r3, r3, r6
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	bf44      	itt	mi
 8003050:	f1c3 0801 	rsbmi	r8, r3, #1
 8003054:	2300      	movmi	r3, #0
 8003056:	9208      	str	r2, [sp, #32]
 8003058:	bf54      	ite	pl
 800305a:	f04f 0800 	movpl.w	r8, #0
 800305e:	9308      	strmi	r3, [sp, #32]
 8003060:	2f00      	cmp	r7, #0
 8003062:	db39      	blt.n	80030d8 <_dtoa_r+0x218>
 8003064:	9b08      	ldr	r3, [sp, #32]
 8003066:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003068:	443b      	add	r3, r7
 800306a:	9308      	str	r3, [sp, #32]
 800306c:	2300      	movs	r3, #0
 800306e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003072:	2b09      	cmp	r3, #9
 8003074:	d864      	bhi.n	8003140 <_dtoa_r+0x280>
 8003076:	2b05      	cmp	r3, #5
 8003078:	bfc4      	itt	gt
 800307a:	3b04      	subgt	r3, #4
 800307c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800307e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003080:	f1a3 0302 	sub.w	r3, r3, #2
 8003084:	bfcc      	ite	gt
 8003086:	2400      	movgt	r4, #0
 8003088:	2401      	movle	r4, #1
 800308a:	2b03      	cmp	r3, #3
 800308c:	d863      	bhi.n	8003156 <_dtoa_r+0x296>
 800308e:	e8df f003 	tbb	[pc, r3]
 8003092:	372a      	.short	0x372a
 8003094:	5535      	.short	0x5535
 8003096:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800309a:	441e      	add	r6, r3
 800309c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	bfc1      	itttt	gt
 80030a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80030a8:	409f      	lslgt	r7, r3
 80030aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80030ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80030b2:	bfd6      	itet	le
 80030b4:	f1c3 0320 	rsble	r3, r3, #32
 80030b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80030bc:	fa04 f003 	lslle.w	r0, r4, r3
 80030c0:	f7fd fa28 	bl	8000514 <__aeabi_ui2d>
 80030c4:	2201      	movs	r2, #1
 80030c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80030ca:	3e01      	subs	r6, #1
 80030cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80030ce:	e777      	b.n	8002fc0 <_dtoa_r+0x100>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e7b8      	b.n	8003046 <_dtoa_r+0x186>
 80030d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80030d6:	e7b7      	b.n	8003048 <_dtoa_r+0x188>
 80030d8:	427b      	negs	r3, r7
 80030da:	930a      	str	r3, [sp, #40]	@ 0x28
 80030dc:	2300      	movs	r3, #0
 80030de:	eba8 0807 	sub.w	r8, r8, r7
 80030e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80030e4:	e7c4      	b.n	8003070 <_dtoa_r+0x1b0>
 80030e6:	2300      	movs	r3, #0
 80030e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	dc35      	bgt.n	800315c <_dtoa_r+0x29c>
 80030f0:	2301      	movs	r3, #1
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	9307      	str	r3, [sp, #28]
 80030f6:	461a      	mov	r2, r3
 80030f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80030fa:	e00b      	b.n	8003114 <_dtoa_r+0x254>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e7f3      	b.n	80030e8 <_dtoa_r+0x228>
 8003100:	2300      	movs	r3, #0
 8003102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	9307      	str	r3, [sp, #28]
 8003110:	bfb8      	it	lt
 8003112:	2301      	movlt	r3, #1
 8003114:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003118:	2100      	movs	r1, #0
 800311a:	2204      	movs	r2, #4
 800311c:	f102 0514 	add.w	r5, r2, #20
 8003120:	429d      	cmp	r5, r3
 8003122:	d91f      	bls.n	8003164 <_dtoa_r+0x2a4>
 8003124:	6041      	str	r1, [r0, #4]
 8003126:	4658      	mov	r0, fp
 8003128:	f000 fd8e 	bl	8003c48 <_Balloc>
 800312c:	4682      	mov	sl, r0
 800312e:	2800      	cmp	r0, #0
 8003130:	d13c      	bne.n	80031ac <_dtoa_r+0x2ec>
 8003132:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <_dtoa_r+0x2e0>)
 8003134:	4602      	mov	r2, r0
 8003136:	f240 11af 	movw	r1, #431	@ 0x1af
 800313a:	e6d8      	b.n	8002eee <_dtoa_r+0x2e>
 800313c:	2301      	movs	r3, #1
 800313e:	e7e0      	b.n	8003102 <_dtoa_r+0x242>
 8003140:	2401      	movs	r4, #1
 8003142:	2300      	movs	r3, #0
 8003144:	9309      	str	r3, [sp, #36]	@ 0x24
 8003146:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	9307      	str	r3, [sp, #28]
 8003150:	2200      	movs	r2, #0
 8003152:	2312      	movs	r3, #18
 8003154:	e7d0      	b.n	80030f8 <_dtoa_r+0x238>
 8003156:	2301      	movs	r3, #1
 8003158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800315a:	e7f5      	b.n	8003148 <_dtoa_r+0x288>
 800315c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	9307      	str	r3, [sp, #28]
 8003162:	e7d7      	b.n	8003114 <_dtoa_r+0x254>
 8003164:	3101      	adds	r1, #1
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	e7d8      	b.n	800311c <_dtoa_r+0x25c>
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w
 8003170:	636f4361 	.word	0x636f4361
 8003174:	3fd287a7 	.word	0x3fd287a7
 8003178:	8b60c8b3 	.word	0x8b60c8b3
 800317c:	3fc68a28 	.word	0x3fc68a28
 8003180:	509f79fb 	.word	0x509f79fb
 8003184:	3fd34413 	.word	0x3fd34413
 8003188:	08004fcf 	.word	0x08004fcf
 800318c:	08004fe6 	.word	0x08004fe6
 8003190:	7ff00000 	.word	0x7ff00000
 8003194:	08004f9f 	.word	0x08004f9f
 8003198:	3ff80000 	.word	0x3ff80000
 800319c:	080050e0 	.word	0x080050e0
 80031a0:	0800503e 	.word	0x0800503e
 80031a4:	08004fcb 	.word	0x08004fcb
 80031a8:	08004f9e 	.word	0x08004f9e
 80031ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80031b0:	6018      	str	r0, [r3, #0]
 80031b2:	9b07      	ldr	r3, [sp, #28]
 80031b4:	2b0e      	cmp	r3, #14
 80031b6:	f200 80a4 	bhi.w	8003302 <_dtoa_r+0x442>
 80031ba:	2c00      	cmp	r4, #0
 80031bc:	f000 80a1 	beq.w	8003302 <_dtoa_r+0x442>
 80031c0:	2f00      	cmp	r7, #0
 80031c2:	dd33      	ble.n	800322c <_dtoa_r+0x36c>
 80031c4:	4bad      	ldr	r3, [pc, #692]	@ (800347c <_dtoa_r+0x5bc>)
 80031c6:	f007 020f 	and.w	r2, r7, #15
 80031ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031ce:	ed93 7b00 	vldr	d7, [r3]
 80031d2:	05f8      	lsls	r0, r7, #23
 80031d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80031d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80031dc:	d516      	bpl.n	800320c <_dtoa_r+0x34c>
 80031de:	4ba8      	ldr	r3, [pc, #672]	@ (8003480 <_dtoa_r+0x5c0>)
 80031e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80031e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80031e8:	f7fd fb38 	bl	800085c <__aeabi_ddiv>
 80031ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031f0:	f004 040f 	and.w	r4, r4, #15
 80031f4:	2603      	movs	r6, #3
 80031f6:	4da2      	ldr	r5, [pc, #648]	@ (8003480 <_dtoa_r+0x5c0>)
 80031f8:	b954      	cbnz	r4, 8003210 <_dtoa_r+0x350>
 80031fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003202:	f7fd fb2b 	bl	800085c <__aeabi_ddiv>
 8003206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800320a:	e028      	b.n	800325e <_dtoa_r+0x39e>
 800320c:	2602      	movs	r6, #2
 800320e:	e7f2      	b.n	80031f6 <_dtoa_r+0x336>
 8003210:	07e1      	lsls	r1, r4, #31
 8003212:	d508      	bpl.n	8003226 <_dtoa_r+0x366>
 8003214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800321c:	f7fd f9f4 	bl	8000608 <__aeabi_dmul>
 8003220:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003224:	3601      	adds	r6, #1
 8003226:	1064      	asrs	r4, r4, #1
 8003228:	3508      	adds	r5, #8
 800322a:	e7e5      	b.n	80031f8 <_dtoa_r+0x338>
 800322c:	f000 80d2 	beq.w	80033d4 <_dtoa_r+0x514>
 8003230:	427c      	negs	r4, r7
 8003232:	4b92      	ldr	r3, [pc, #584]	@ (800347c <_dtoa_r+0x5bc>)
 8003234:	4d92      	ldr	r5, [pc, #584]	@ (8003480 <_dtoa_r+0x5c0>)
 8003236:	f004 020f 	and.w	r2, r4, #15
 800323a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003246:	f7fd f9df 	bl	8000608 <__aeabi_dmul>
 800324a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800324e:	1124      	asrs	r4, r4, #4
 8003250:	2300      	movs	r3, #0
 8003252:	2602      	movs	r6, #2
 8003254:	2c00      	cmp	r4, #0
 8003256:	f040 80b2 	bne.w	80033be <_dtoa_r+0x4fe>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d3      	bne.n	8003206 <_dtoa_r+0x346>
 800325e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003260:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80b7 	beq.w	80033d8 <_dtoa_r+0x518>
 800326a:	4b86      	ldr	r3, [pc, #536]	@ (8003484 <_dtoa_r+0x5c4>)
 800326c:	2200      	movs	r2, #0
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f7fd fc3b 	bl	8000aec <__aeabi_dcmplt>
 8003276:	2800      	cmp	r0, #0
 8003278:	f000 80ae 	beq.w	80033d8 <_dtoa_r+0x518>
 800327c:	9b07      	ldr	r3, [sp, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80aa 	beq.w	80033d8 <_dtoa_r+0x518>
 8003284:	9b00      	ldr	r3, [sp, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	dd37      	ble.n	80032fa <_dtoa_r+0x43a>
 800328a:	1e7b      	subs	r3, r7, #1
 800328c:	9304      	str	r3, [sp, #16]
 800328e:	4620      	mov	r0, r4
 8003290:	4b7d      	ldr	r3, [pc, #500]	@ (8003488 <_dtoa_r+0x5c8>)
 8003292:	2200      	movs	r2, #0
 8003294:	4629      	mov	r1, r5
 8003296:	f7fd f9b7 	bl	8000608 <__aeabi_dmul>
 800329a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800329e:	9c00      	ldr	r4, [sp, #0]
 80032a0:	3601      	adds	r6, #1
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7fd f946 	bl	8000534 <__aeabi_i2d>
 80032a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032ac:	f7fd f9ac 	bl	8000608 <__aeabi_dmul>
 80032b0:	4b76      	ldr	r3, [pc, #472]	@ (800348c <_dtoa_r+0x5cc>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	f7fc fff2 	bl	800029c <__adddf3>
 80032b8:	4605      	mov	r5, r0
 80032ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80032be:	2c00      	cmp	r4, #0
 80032c0:	f040 808d 	bne.w	80033de <_dtoa_r+0x51e>
 80032c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032c8:	4b71      	ldr	r3, [pc, #452]	@ (8003490 <_dtoa_r+0x5d0>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	f7fc ffe4 	bl	8000298 <__aeabi_dsub>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032d8:	462a      	mov	r2, r5
 80032da:	4633      	mov	r3, r6
 80032dc:	f7fd fc24 	bl	8000b28 <__aeabi_dcmpgt>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	f040 828b 	bne.w	80037fc <_dtoa_r+0x93c>
 80032e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032ea:	462a      	mov	r2, r5
 80032ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80032f0:	f7fd fbfc 	bl	8000aec <__aeabi_dcmplt>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	f040 8128 	bne.w	800354a <_dtoa_r+0x68a>
 80032fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80032fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003304:	2b00      	cmp	r3, #0
 8003306:	f2c0 815a 	blt.w	80035be <_dtoa_r+0x6fe>
 800330a:	2f0e      	cmp	r7, #14
 800330c:	f300 8157 	bgt.w	80035be <_dtoa_r+0x6fe>
 8003310:	4b5a      	ldr	r3, [pc, #360]	@ (800347c <_dtoa_r+0x5bc>)
 8003312:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003316:	ed93 7b00 	vldr	d7, [r3]
 800331a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800331c:	2b00      	cmp	r3, #0
 800331e:	ed8d 7b00 	vstr	d7, [sp]
 8003322:	da03      	bge.n	800332c <_dtoa_r+0x46c>
 8003324:	9b07      	ldr	r3, [sp, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f340 8101 	ble.w	800352e <_dtoa_r+0x66e>
 800332c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003330:	4656      	mov	r6, sl
 8003332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003336:	4620      	mov	r0, r4
 8003338:	4629      	mov	r1, r5
 800333a:	f7fd fa8f 	bl	800085c <__aeabi_ddiv>
 800333e:	f7fd fc13 	bl	8000b68 <__aeabi_d2iz>
 8003342:	4680      	mov	r8, r0
 8003344:	f7fd f8f6 	bl	8000534 <__aeabi_i2d>
 8003348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800334c:	f7fd f95c 	bl	8000608 <__aeabi_dmul>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4620      	mov	r0, r4
 8003356:	4629      	mov	r1, r5
 8003358:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800335c:	f7fc ff9c 	bl	8000298 <__aeabi_dsub>
 8003360:	f806 4b01 	strb.w	r4, [r6], #1
 8003364:	9d07      	ldr	r5, [sp, #28]
 8003366:	eba6 040a 	sub.w	r4, r6, sl
 800336a:	42a5      	cmp	r5, r4
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	f040 8117 	bne.w	80035a2 <_dtoa_r+0x6e2>
 8003374:	f7fc ff92 	bl	800029c <__adddf3>
 8003378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800337c:	4604      	mov	r4, r0
 800337e:	460d      	mov	r5, r1
 8003380:	f7fd fbd2 	bl	8000b28 <__aeabi_dcmpgt>
 8003384:	2800      	cmp	r0, #0
 8003386:	f040 80f9 	bne.w	800357c <_dtoa_r+0x6bc>
 800338a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800338e:	4620      	mov	r0, r4
 8003390:	4629      	mov	r1, r5
 8003392:	f7fd fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003396:	b118      	cbz	r0, 80033a0 <_dtoa_r+0x4e0>
 8003398:	f018 0f01 	tst.w	r8, #1
 800339c:	f040 80ee 	bne.w	800357c <_dtoa_r+0x6bc>
 80033a0:	4649      	mov	r1, r9
 80033a2:	4658      	mov	r0, fp
 80033a4:	f000 fc90 	bl	8003cc8 <_Bfree>
 80033a8:	2300      	movs	r3, #0
 80033aa:	7033      	strb	r3, [r6, #0]
 80033ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80033ae:	3701      	adds	r7, #1
 80033b0:	601f      	str	r7, [r3, #0]
 80033b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 831d 	beq.w	80039f4 <_dtoa_r+0xb34>
 80033ba:	601e      	str	r6, [r3, #0]
 80033bc:	e31a      	b.n	80039f4 <_dtoa_r+0xb34>
 80033be:	07e2      	lsls	r2, r4, #31
 80033c0:	d505      	bpl.n	80033ce <_dtoa_r+0x50e>
 80033c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80033c6:	f7fd f91f 	bl	8000608 <__aeabi_dmul>
 80033ca:	3601      	adds	r6, #1
 80033cc:	2301      	movs	r3, #1
 80033ce:	1064      	asrs	r4, r4, #1
 80033d0:	3508      	adds	r5, #8
 80033d2:	e73f      	b.n	8003254 <_dtoa_r+0x394>
 80033d4:	2602      	movs	r6, #2
 80033d6:	e742      	b.n	800325e <_dtoa_r+0x39e>
 80033d8:	9c07      	ldr	r4, [sp, #28]
 80033da:	9704      	str	r7, [sp, #16]
 80033dc:	e761      	b.n	80032a2 <_dtoa_r+0x3e2>
 80033de:	4b27      	ldr	r3, [pc, #156]	@ (800347c <_dtoa_r+0x5bc>)
 80033e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80033e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80033e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80033ea:	4454      	add	r4, sl
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d053      	beq.n	8003498 <_dtoa_r+0x5d8>
 80033f0:	4928      	ldr	r1, [pc, #160]	@ (8003494 <_dtoa_r+0x5d4>)
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd fa32 	bl	800085c <__aeabi_ddiv>
 80033f8:	4633      	mov	r3, r6
 80033fa:	462a      	mov	r2, r5
 80033fc:	f7fc ff4c 	bl	8000298 <__aeabi_dsub>
 8003400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003404:	4656      	mov	r6, sl
 8003406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800340a:	f7fd fbad 	bl	8000b68 <__aeabi_d2iz>
 800340e:	4605      	mov	r5, r0
 8003410:	f7fd f890 	bl	8000534 <__aeabi_i2d>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800341c:	f7fc ff3c 	bl	8000298 <__aeabi_dsub>
 8003420:	3530      	adds	r5, #48	@ 0x30
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800342a:	f806 5b01 	strb.w	r5, [r6], #1
 800342e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003432:	f7fd fb5b 	bl	8000aec <__aeabi_dcmplt>
 8003436:	2800      	cmp	r0, #0
 8003438:	d171      	bne.n	800351e <_dtoa_r+0x65e>
 800343a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800343e:	4911      	ldr	r1, [pc, #68]	@ (8003484 <_dtoa_r+0x5c4>)
 8003440:	2000      	movs	r0, #0
 8003442:	f7fc ff29 	bl	8000298 <__aeabi_dsub>
 8003446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800344a:	f7fd fb4f 	bl	8000aec <__aeabi_dcmplt>
 800344e:	2800      	cmp	r0, #0
 8003450:	f040 8095 	bne.w	800357e <_dtoa_r+0x6be>
 8003454:	42a6      	cmp	r6, r4
 8003456:	f43f af50 	beq.w	80032fa <_dtoa_r+0x43a>
 800345a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800345e:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <_dtoa_r+0x5c8>)
 8003460:	2200      	movs	r2, #0
 8003462:	f7fd f8d1 	bl	8000608 <__aeabi_dmul>
 8003466:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <_dtoa_r+0x5c8>)
 8003468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800346c:	2200      	movs	r2, #0
 800346e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003472:	f7fd f8c9 	bl	8000608 <__aeabi_dmul>
 8003476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800347a:	e7c4      	b.n	8003406 <_dtoa_r+0x546>
 800347c:	080050e0 	.word	0x080050e0
 8003480:	080050b8 	.word	0x080050b8
 8003484:	3ff00000 	.word	0x3ff00000
 8003488:	40240000 	.word	0x40240000
 800348c:	401c0000 	.word	0x401c0000
 8003490:	40140000 	.word	0x40140000
 8003494:	3fe00000 	.word	0x3fe00000
 8003498:	4631      	mov	r1, r6
 800349a:	4628      	mov	r0, r5
 800349c:	f7fd f8b4 	bl	8000608 <__aeabi_dmul>
 80034a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80034a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80034a6:	4656      	mov	r6, sl
 80034a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034ac:	f7fd fb5c 	bl	8000b68 <__aeabi_d2iz>
 80034b0:	4605      	mov	r5, r0
 80034b2:	f7fd f83f 	bl	8000534 <__aeabi_i2d>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034be:	f7fc feeb 	bl	8000298 <__aeabi_dsub>
 80034c2:	3530      	adds	r5, #48	@ 0x30
 80034c4:	f806 5b01 	strb.w	r5, [r6], #1
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	d124      	bne.n	8003522 <_dtoa_r+0x662>
 80034d8:	4bac      	ldr	r3, [pc, #688]	@ (800378c <_dtoa_r+0x8cc>)
 80034da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80034de:	f7fc fedd 	bl	800029c <__adddf3>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034ea:	f7fd fb1d 	bl	8000b28 <__aeabi_dcmpgt>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d145      	bne.n	800357e <_dtoa_r+0x6be>
 80034f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80034f6:	49a5      	ldr	r1, [pc, #660]	@ (800378c <_dtoa_r+0x8cc>)
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fc fecd 	bl	8000298 <__aeabi_dsub>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003506:	f7fd faf1 	bl	8000aec <__aeabi_dcmplt>
 800350a:	2800      	cmp	r0, #0
 800350c:	f43f aef5 	beq.w	80032fa <_dtoa_r+0x43a>
 8003510:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003512:	1e73      	subs	r3, r6, #1
 8003514:	9315      	str	r3, [sp, #84]	@ 0x54
 8003516:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800351a:	2b30      	cmp	r3, #48	@ 0x30
 800351c:	d0f8      	beq.n	8003510 <_dtoa_r+0x650>
 800351e:	9f04      	ldr	r7, [sp, #16]
 8003520:	e73e      	b.n	80033a0 <_dtoa_r+0x4e0>
 8003522:	4b9b      	ldr	r3, [pc, #620]	@ (8003790 <_dtoa_r+0x8d0>)
 8003524:	f7fd f870 	bl	8000608 <__aeabi_dmul>
 8003528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800352c:	e7bc      	b.n	80034a8 <_dtoa_r+0x5e8>
 800352e:	d10c      	bne.n	800354a <_dtoa_r+0x68a>
 8003530:	4b98      	ldr	r3, [pc, #608]	@ (8003794 <_dtoa_r+0x8d4>)
 8003532:	2200      	movs	r2, #0
 8003534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003538:	f7fd f866 	bl	8000608 <__aeabi_dmul>
 800353c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003540:	f7fd fae8 	bl	8000b14 <__aeabi_dcmpge>
 8003544:	2800      	cmp	r0, #0
 8003546:	f000 8157 	beq.w	80037f8 <_dtoa_r+0x938>
 800354a:	2400      	movs	r4, #0
 800354c:	4625      	mov	r5, r4
 800354e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003550:	43db      	mvns	r3, r3
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	4656      	mov	r6, sl
 8003556:	2700      	movs	r7, #0
 8003558:	4621      	mov	r1, r4
 800355a:	4658      	mov	r0, fp
 800355c:	f000 fbb4 	bl	8003cc8 <_Bfree>
 8003560:	2d00      	cmp	r5, #0
 8003562:	d0dc      	beq.n	800351e <_dtoa_r+0x65e>
 8003564:	b12f      	cbz	r7, 8003572 <_dtoa_r+0x6b2>
 8003566:	42af      	cmp	r7, r5
 8003568:	d003      	beq.n	8003572 <_dtoa_r+0x6b2>
 800356a:	4639      	mov	r1, r7
 800356c:	4658      	mov	r0, fp
 800356e:	f000 fbab 	bl	8003cc8 <_Bfree>
 8003572:	4629      	mov	r1, r5
 8003574:	4658      	mov	r0, fp
 8003576:	f000 fba7 	bl	8003cc8 <_Bfree>
 800357a:	e7d0      	b.n	800351e <_dtoa_r+0x65e>
 800357c:	9704      	str	r7, [sp, #16]
 800357e:	4633      	mov	r3, r6
 8003580:	461e      	mov	r6, r3
 8003582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003586:	2a39      	cmp	r2, #57	@ 0x39
 8003588:	d107      	bne.n	800359a <_dtoa_r+0x6da>
 800358a:	459a      	cmp	sl, r3
 800358c:	d1f8      	bne.n	8003580 <_dtoa_r+0x6c0>
 800358e:	9a04      	ldr	r2, [sp, #16]
 8003590:	3201      	adds	r2, #1
 8003592:	9204      	str	r2, [sp, #16]
 8003594:	2230      	movs	r2, #48	@ 0x30
 8003596:	f88a 2000 	strb.w	r2, [sl]
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	3201      	adds	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e7bd      	b.n	800351e <_dtoa_r+0x65e>
 80035a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003790 <_dtoa_r+0x8d0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	f7fd f82f 	bl	8000608 <__aeabi_dmul>
 80035aa:	2200      	movs	r2, #0
 80035ac:	2300      	movs	r3, #0
 80035ae:	4604      	mov	r4, r0
 80035b0:	460d      	mov	r5, r1
 80035b2:	f7fd fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	f43f aebb 	beq.w	8003332 <_dtoa_r+0x472>
 80035bc:	e6f0      	b.n	80033a0 <_dtoa_r+0x4e0>
 80035be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	f000 80db 	beq.w	800377c <_dtoa_r+0x8bc>
 80035c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035c8:	2a01      	cmp	r2, #1
 80035ca:	f300 80bf 	bgt.w	800374c <_dtoa_r+0x88c>
 80035ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80035d0:	2a00      	cmp	r2, #0
 80035d2:	f000 80b7 	beq.w	8003744 <_dtoa_r+0x884>
 80035d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80035da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80035dc:	4646      	mov	r6, r8
 80035de:	9a08      	ldr	r2, [sp, #32]
 80035e0:	2101      	movs	r1, #1
 80035e2:	441a      	add	r2, r3
 80035e4:	4658      	mov	r0, fp
 80035e6:	4498      	add	r8, r3
 80035e8:	9208      	str	r2, [sp, #32]
 80035ea:	f000 fc21 	bl	8003e30 <__i2b>
 80035ee:	4605      	mov	r5, r0
 80035f0:	b15e      	cbz	r6, 800360a <_dtoa_r+0x74a>
 80035f2:	9b08      	ldr	r3, [sp, #32]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dd08      	ble.n	800360a <_dtoa_r+0x74a>
 80035f8:	42b3      	cmp	r3, r6
 80035fa:	9a08      	ldr	r2, [sp, #32]
 80035fc:	bfa8      	it	ge
 80035fe:	4633      	movge	r3, r6
 8003600:	eba8 0803 	sub.w	r8, r8, r3
 8003604:	1af6      	subs	r6, r6, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	9308      	str	r3, [sp, #32]
 800360a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800360c:	b1f3      	cbz	r3, 800364c <_dtoa_r+0x78c>
 800360e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80b7 	beq.w	8003784 <_dtoa_r+0x8c4>
 8003616:	b18c      	cbz	r4, 800363c <_dtoa_r+0x77c>
 8003618:	4629      	mov	r1, r5
 800361a:	4622      	mov	r2, r4
 800361c:	4658      	mov	r0, fp
 800361e:	f000 fcc7 	bl	8003fb0 <__pow5mult>
 8003622:	464a      	mov	r2, r9
 8003624:	4601      	mov	r1, r0
 8003626:	4605      	mov	r5, r0
 8003628:	4658      	mov	r0, fp
 800362a:	f000 fc17 	bl	8003e5c <__multiply>
 800362e:	4649      	mov	r1, r9
 8003630:	9004      	str	r0, [sp, #16]
 8003632:	4658      	mov	r0, fp
 8003634:	f000 fb48 	bl	8003cc8 <_Bfree>
 8003638:	9b04      	ldr	r3, [sp, #16]
 800363a:	4699      	mov	r9, r3
 800363c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800363e:	1b1a      	subs	r2, r3, r4
 8003640:	d004      	beq.n	800364c <_dtoa_r+0x78c>
 8003642:	4649      	mov	r1, r9
 8003644:	4658      	mov	r0, fp
 8003646:	f000 fcb3 	bl	8003fb0 <__pow5mult>
 800364a:	4681      	mov	r9, r0
 800364c:	2101      	movs	r1, #1
 800364e:	4658      	mov	r0, fp
 8003650:	f000 fbee 	bl	8003e30 <__i2b>
 8003654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003656:	4604      	mov	r4, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 81cf 	beq.w	80039fc <_dtoa_r+0xb3c>
 800365e:	461a      	mov	r2, r3
 8003660:	4601      	mov	r1, r0
 8003662:	4658      	mov	r0, fp
 8003664:	f000 fca4 	bl	8003fb0 <__pow5mult>
 8003668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800366a:	2b01      	cmp	r3, #1
 800366c:	4604      	mov	r4, r0
 800366e:	f300 8095 	bgt.w	800379c <_dtoa_r+0x8dc>
 8003672:	9b02      	ldr	r3, [sp, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 8087 	bne.w	8003788 <_dtoa_r+0x8c8>
 800367a:	9b03      	ldr	r3, [sp, #12]
 800367c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 8089 	bne.w	8003798 <_dtoa_r+0x8d8>
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800368c:	0d1b      	lsrs	r3, r3, #20
 800368e:	051b      	lsls	r3, r3, #20
 8003690:	b12b      	cbz	r3, 800369e <_dtoa_r+0x7de>
 8003692:	9b08      	ldr	r3, [sp, #32]
 8003694:	3301      	adds	r3, #1
 8003696:	9308      	str	r3, [sp, #32]
 8003698:	f108 0801 	add.w	r8, r8, #1
 800369c:	2301      	movs	r3, #1
 800369e:	930a      	str	r3, [sp, #40]	@ 0x28
 80036a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 81b0 	beq.w	8003a08 <_dtoa_r+0xb48>
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80036ae:	6918      	ldr	r0, [r3, #16]
 80036b0:	f000 fb72 	bl	8003d98 <__hi0bits>
 80036b4:	f1c0 0020 	rsb	r0, r0, #32
 80036b8:	9b08      	ldr	r3, [sp, #32]
 80036ba:	4418      	add	r0, r3
 80036bc:	f010 001f 	ands.w	r0, r0, #31
 80036c0:	d077      	beq.n	80037b2 <_dtoa_r+0x8f2>
 80036c2:	f1c0 0320 	rsb	r3, r0, #32
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	dd6b      	ble.n	80037a2 <_dtoa_r+0x8e2>
 80036ca:	9b08      	ldr	r3, [sp, #32]
 80036cc:	f1c0 001c 	rsb	r0, r0, #28
 80036d0:	4403      	add	r3, r0
 80036d2:	4480      	add	r8, r0
 80036d4:	4406      	add	r6, r0
 80036d6:	9308      	str	r3, [sp, #32]
 80036d8:	f1b8 0f00 	cmp.w	r8, #0
 80036dc:	dd05      	ble.n	80036ea <_dtoa_r+0x82a>
 80036de:	4649      	mov	r1, r9
 80036e0:	4642      	mov	r2, r8
 80036e2:	4658      	mov	r0, fp
 80036e4:	f000 fcbe 	bl	8004064 <__lshift>
 80036e8:	4681      	mov	r9, r0
 80036ea:	9b08      	ldr	r3, [sp, #32]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	dd05      	ble.n	80036fc <_dtoa_r+0x83c>
 80036f0:	4621      	mov	r1, r4
 80036f2:	461a      	mov	r2, r3
 80036f4:	4658      	mov	r0, fp
 80036f6:	f000 fcb5 	bl	8004064 <__lshift>
 80036fa:	4604      	mov	r4, r0
 80036fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d059      	beq.n	80037b6 <_dtoa_r+0x8f6>
 8003702:	4621      	mov	r1, r4
 8003704:	4648      	mov	r0, r9
 8003706:	f000 fd19 	bl	800413c <__mcmp>
 800370a:	2800      	cmp	r0, #0
 800370c:	da53      	bge.n	80037b6 <_dtoa_r+0x8f6>
 800370e:	1e7b      	subs	r3, r7, #1
 8003710:	9304      	str	r3, [sp, #16]
 8003712:	4649      	mov	r1, r9
 8003714:	2300      	movs	r3, #0
 8003716:	220a      	movs	r2, #10
 8003718:	4658      	mov	r0, fp
 800371a:	f000 faf7 	bl	8003d0c <__multadd>
 800371e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003720:	4681      	mov	r9, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8172 	beq.w	8003a0c <_dtoa_r+0xb4c>
 8003728:	2300      	movs	r3, #0
 800372a:	4629      	mov	r1, r5
 800372c:	220a      	movs	r2, #10
 800372e:	4658      	mov	r0, fp
 8003730:	f000 faec 	bl	8003d0c <__multadd>
 8003734:	9b00      	ldr	r3, [sp, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	4605      	mov	r5, r0
 800373a:	dc67      	bgt.n	800380c <_dtoa_r+0x94c>
 800373c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800373e:	2b02      	cmp	r3, #2
 8003740:	dc41      	bgt.n	80037c6 <_dtoa_r+0x906>
 8003742:	e063      	b.n	800380c <_dtoa_r+0x94c>
 8003744:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800374a:	e746      	b.n	80035da <_dtoa_r+0x71a>
 800374c:	9b07      	ldr	r3, [sp, #28]
 800374e:	1e5c      	subs	r4, r3, #1
 8003750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003752:	42a3      	cmp	r3, r4
 8003754:	bfbf      	itttt	lt
 8003756:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003758:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800375a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800375c:	1ae3      	sublt	r3, r4, r3
 800375e:	bfb4      	ite	lt
 8003760:	18d2      	addlt	r2, r2, r3
 8003762:	1b1c      	subge	r4, r3, r4
 8003764:	9b07      	ldr	r3, [sp, #28]
 8003766:	bfbc      	itt	lt
 8003768:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800376a:	2400      	movlt	r4, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	bfb5      	itete	lt
 8003770:	eba8 0603 	sublt.w	r6, r8, r3
 8003774:	9b07      	ldrge	r3, [sp, #28]
 8003776:	2300      	movlt	r3, #0
 8003778:	4646      	movge	r6, r8
 800377a:	e730      	b.n	80035de <_dtoa_r+0x71e>
 800377c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800377e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003780:	4646      	mov	r6, r8
 8003782:	e735      	b.n	80035f0 <_dtoa_r+0x730>
 8003784:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003786:	e75c      	b.n	8003642 <_dtoa_r+0x782>
 8003788:	2300      	movs	r3, #0
 800378a:	e788      	b.n	800369e <_dtoa_r+0x7de>
 800378c:	3fe00000 	.word	0x3fe00000
 8003790:	40240000 	.word	0x40240000
 8003794:	40140000 	.word	0x40140000
 8003798:	9b02      	ldr	r3, [sp, #8]
 800379a:	e780      	b.n	800369e <_dtoa_r+0x7de>
 800379c:	2300      	movs	r3, #0
 800379e:	930a      	str	r3, [sp, #40]	@ 0x28
 80037a0:	e782      	b.n	80036a8 <_dtoa_r+0x7e8>
 80037a2:	d099      	beq.n	80036d8 <_dtoa_r+0x818>
 80037a4:	9a08      	ldr	r2, [sp, #32]
 80037a6:	331c      	adds	r3, #28
 80037a8:	441a      	add	r2, r3
 80037aa:	4498      	add	r8, r3
 80037ac:	441e      	add	r6, r3
 80037ae:	9208      	str	r2, [sp, #32]
 80037b0:	e792      	b.n	80036d8 <_dtoa_r+0x818>
 80037b2:	4603      	mov	r3, r0
 80037b4:	e7f6      	b.n	80037a4 <_dtoa_r+0x8e4>
 80037b6:	9b07      	ldr	r3, [sp, #28]
 80037b8:	9704      	str	r7, [sp, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dc20      	bgt.n	8003800 <_dtoa_r+0x940>
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	dd1e      	ble.n	8003804 <_dtoa_r+0x944>
 80037c6:	9b00      	ldr	r3, [sp, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f aec0 	bne.w	800354e <_dtoa_r+0x68e>
 80037ce:	4621      	mov	r1, r4
 80037d0:	2205      	movs	r2, #5
 80037d2:	4658      	mov	r0, fp
 80037d4:	f000 fa9a 	bl	8003d0c <__multadd>
 80037d8:	4601      	mov	r1, r0
 80037da:	4604      	mov	r4, r0
 80037dc:	4648      	mov	r0, r9
 80037de:	f000 fcad 	bl	800413c <__mcmp>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	f77f aeb3 	ble.w	800354e <_dtoa_r+0x68e>
 80037e8:	4656      	mov	r6, sl
 80037ea:	2331      	movs	r3, #49	@ 0x31
 80037ec:	f806 3b01 	strb.w	r3, [r6], #1
 80037f0:	9b04      	ldr	r3, [sp, #16]
 80037f2:	3301      	adds	r3, #1
 80037f4:	9304      	str	r3, [sp, #16]
 80037f6:	e6ae      	b.n	8003556 <_dtoa_r+0x696>
 80037f8:	9c07      	ldr	r4, [sp, #28]
 80037fa:	9704      	str	r7, [sp, #16]
 80037fc:	4625      	mov	r5, r4
 80037fe:	e7f3      	b.n	80037e8 <_dtoa_r+0x928>
 8003800:	9b07      	ldr	r3, [sp, #28]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8104 	beq.w	8003a14 <_dtoa_r+0xb54>
 800380c:	2e00      	cmp	r6, #0
 800380e:	dd05      	ble.n	800381c <_dtoa_r+0x95c>
 8003810:	4629      	mov	r1, r5
 8003812:	4632      	mov	r2, r6
 8003814:	4658      	mov	r0, fp
 8003816:	f000 fc25 	bl	8004064 <__lshift>
 800381a:	4605      	mov	r5, r0
 800381c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d05a      	beq.n	80038d8 <_dtoa_r+0xa18>
 8003822:	6869      	ldr	r1, [r5, #4]
 8003824:	4658      	mov	r0, fp
 8003826:	f000 fa0f 	bl	8003c48 <_Balloc>
 800382a:	4606      	mov	r6, r0
 800382c:	b928      	cbnz	r0, 800383a <_dtoa_r+0x97a>
 800382e:	4b84      	ldr	r3, [pc, #528]	@ (8003a40 <_dtoa_r+0xb80>)
 8003830:	4602      	mov	r2, r0
 8003832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003836:	f7ff bb5a 	b.w	8002eee <_dtoa_r+0x2e>
 800383a:	692a      	ldr	r2, [r5, #16]
 800383c:	3202      	adds	r2, #2
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	f105 010c 	add.w	r1, r5, #12
 8003844:	300c      	adds	r0, #12
 8003846:	f000 ffaf 	bl	80047a8 <memcpy>
 800384a:	2201      	movs	r2, #1
 800384c:	4631      	mov	r1, r6
 800384e:	4658      	mov	r0, fp
 8003850:	f000 fc08 	bl	8004064 <__lshift>
 8003854:	f10a 0301 	add.w	r3, sl, #1
 8003858:	9307      	str	r3, [sp, #28]
 800385a:	9b00      	ldr	r3, [sp, #0]
 800385c:	4453      	add	r3, sl
 800385e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003860:	9b02      	ldr	r3, [sp, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	462f      	mov	r7, r5
 8003868:	930a      	str	r3, [sp, #40]	@ 0x28
 800386a:	4605      	mov	r5, r0
 800386c:	9b07      	ldr	r3, [sp, #28]
 800386e:	4621      	mov	r1, r4
 8003870:	3b01      	subs	r3, #1
 8003872:	4648      	mov	r0, r9
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f7ff fa9a 	bl	8002dae <quorem>
 800387a:	4639      	mov	r1, r7
 800387c:	9002      	str	r0, [sp, #8]
 800387e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003882:	4648      	mov	r0, r9
 8003884:	f000 fc5a 	bl	800413c <__mcmp>
 8003888:	462a      	mov	r2, r5
 800388a:	9008      	str	r0, [sp, #32]
 800388c:	4621      	mov	r1, r4
 800388e:	4658      	mov	r0, fp
 8003890:	f000 fc70 	bl	8004174 <__mdiff>
 8003894:	68c2      	ldr	r2, [r0, #12]
 8003896:	4606      	mov	r6, r0
 8003898:	bb02      	cbnz	r2, 80038dc <_dtoa_r+0xa1c>
 800389a:	4601      	mov	r1, r0
 800389c:	4648      	mov	r0, r9
 800389e:	f000 fc4d 	bl	800413c <__mcmp>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4631      	mov	r1, r6
 80038a6:	4658      	mov	r0, fp
 80038a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80038aa:	f000 fa0d 	bl	8003cc8 <_Bfree>
 80038ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038b2:	9e07      	ldr	r6, [sp, #28]
 80038b4:	ea43 0102 	orr.w	r1, r3, r2
 80038b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038ba:	4319      	orrs	r1, r3
 80038bc:	d110      	bne.n	80038e0 <_dtoa_r+0xa20>
 80038be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80038c2:	d029      	beq.n	8003918 <_dtoa_r+0xa58>
 80038c4:	9b08      	ldr	r3, [sp, #32]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	dd02      	ble.n	80038d0 <_dtoa_r+0xa10>
 80038ca:	9b02      	ldr	r3, [sp, #8]
 80038cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80038d0:	9b00      	ldr	r3, [sp, #0]
 80038d2:	f883 8000 	strb.w	r8, [r3]
 80038d6:	e63f      	b.n	8003558 <_dtoa_r+0x698>
 80038d8:	4628      	mov	r0, r5
 80038da:	e7bb      	b.n	8003854 <_dtoa_r+0x994>
 80038dc:	2201      	movs	r2, #1
 80038de:	e7e1      	b.n	80038a4 <_dtoa_r+0x9e4>
 80038e0:	9b08      	ldr	r3, [sp, #32]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db04      	blt.n	80038f0 <_dtoa_r+0xa30>
 80038e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80038e8:	430b      	orrs	r3, r1
 80038ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80038ec:	430b      	orrs	r3, r1
 80038ee:	d120      	bne.n	8003932 <_dtoa_r+0xa72>
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	dded      	ble.n	80038d0 <_dtoa_r+0xa10>
 80038f4:	4649      	mov	r1, r9
 80038f6:	2201      	movs	r2, #1
 80038f8:	4658      	mov	r0, fp
 80038fa:	f000 fbb3 	bl	8004064 <__lshift>
 80038fe:	4621      	mov	r1, r4
 8003900:	4681      	mov	r9, r0
 8003902:	f000 fc1b 	bl	800413c <__mcmp>
 8003906:	2800      	cmp	r0, #0
 8003908:	dc03      	bgt.n	8003912 <_dtoa_r+0xa52>
 800390a:	d1e1      	bne.n	80038d0 <_dtoa_r+0xa10>
 800390c:	f018 0f01 	tst.w	r8, #1
 8003910:	d0de      	beq.n	80038d0 <_dtoa_r+0xa10>
 8003912:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003916:	d1d8      	bne.n	80038ca <_dtoa_r+0xa0a>
 8003918:	9a00      	ldr	r2, [sp, #0]
 800391a:	2339      	movs	r3, #57	@ 0x39
 800391c:	7013      	strb	r3, [r2, #0]
 800391e:	4633      	mov	r3, r6
 8003920:	461e      	mov	r6, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003928:	2a39      	cmp	r2, #57	@ 0x39
 800392a:	d052      	beq.n	80039d2 <_dtoa_r+0xb12>
 800392c:	3201      	adds	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e612      	b.n	8003558 <_dtoa_r+0x698>
 8003932:	2a00      	cmp	r2, #0
 8003934:	dd07      	ble.n	8003946 <_dtoa_r+0xa86>
 8003936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800393a:	d0ed      	beq.n	8003918 <_dtoa_r+0xa58>
 800393c:	9a00      	ldr	r2, [sp, #0]
 800393e:	f108 0301 	add.w	r3, r8, #1
 8003942:	7013      	strb	r3, [r2, #0]
 8003944:	e608      	b.n	8003558 <_dtoa_r+0x698>
 8003946:	9b07      	ldr	r3, [sp, #28]
 8003948:	9a07      	ldr	r2, [sp, #28]
 800394a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800394e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003950:	4293      	cmp	r3, r2
 8003952:	d028      	beq.n	80039a6 <_dtoa_r+0xae6>
 8003954:	4649      	mov	r1, r9
 8003956:	2300      	movs	r3, #0
 8003958:	220a      	movs	r2, #10
 800395a:	4658      	mov	r0, fp
 800395c:	f000 f9d6 	bl	8003d0c <__multadd>
 8003960:	42af      	cmp	r7, r5
 8003962:	4681      	mov	r9, r0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	f04f 020a 	mov.w	r2, #10
 800396c:	4639      	mov	r1, r7
 800396e:	4658      	mov	r0, fp
 8003970:	d107      	bne.n	8003982 <_dtoa_r+0xac2>
 8003972:	f000 f9cb 	bl	8003d0c <__multadd>
 8003976:	4607      	mov	r7, r0
 8003978:	4605      	mov	r5, r0
 800397a:	9b07      	ldr	r3, [sp, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	9307      	str	r3, [sp, #28]
 8003980:	e774      	b.n	800386c <_dtoa_r+0x9ac>
 8003982:	f000 f9c3 	bl	8003d0c <__multadd>
 8003986:	4629      	mov	r1, r5
 8003988:	4607      	mov	r7, r0
 800398a:	2300      	movs	r3, #0
 800398c:	220a      	movs	r2, #10
 800398e:	4658      	mov	r0, fp
 8003990:	f000 f9bc 	bl	8003d0c <__multadd>
 8003994:	4605      	mov	r5, r0
 8003996:	e7f0      	b.n	800397a <_dtoa_r+0xaba>
 8003998:	9b00      	ldr	r3, [sp, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	bfcc      	ite	gt
 800399e:	461e      	movgt	r6, r3
 80039a0:	2601      	movle	r6, #1
 80039a2:	4456      	add	r6, sl
 80039a4:	2700      	movs	r7, #0
 80039a6:	4649      	mov	r1, r9
 80039a8:	2201      	movs	r2, #1
 80039aa:	4658      	mov	r0, fp
 80039ac:	f000 fb5a 	bl	8004064 <__lshift>
 80039b0:	4621      	mov	r1, r4
 80039b2:	4681      	mov	r9, r0
 80039b4:	f000 fbc2 	bl	800413c <__mcmp>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	dcb0      	bgt.n	800391e <_dtoa_r+0xa5e>
 80039bc:	d102      	bne.n	80039c4 <_dtoa_r+0xb04>
 80039be:	f018 0f01 	tst.w	r8, #1
 80039c2:	d1ac      	bne.n	800391e <_dtoa_r+0xa5e>
 80039c4:	4633      	mov	r3, r6
 80039c6:	461e      	mov	r6, r3
 80039c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80039cc:	2a30      	cmp	r2, #48	@ 0x30
 80039ce:	d0fa      	beq.n	80039c6 <_dtoa_r+0xb06>
 80039d0:	e5c2      	b.n	8003558 <_dtoa_r+0x698>
 80039d2:	459a      	cmp	sl, r3
 80039d4:	d1a4      	bne.n	8003920 <_dtoa_r+0xa60>
 80039d6:	9b04      	ldr	r3, [sp, #16]
 80039d8:	3301      	adds	r3, #1
 80039da:	9304      	str	r3, [sp, #16]
 80039dc:	2331      	movs	r3, #49	@ 0x31
 80039de:	f88a 3000 	strb.w	r3, [sl]
 80039e2:	e5b9      	b.n	8003558 <_dtoa_r+0x698>
 80039e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80039e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003a44 <_dtoa_r+0xb84>
 80039ea:	b11b      	cbz	r3, 80039f4 <_dtoa_r+0xb34>
 80039ec:	f10a 0308 	add.w	r3, sl, #8
 80039f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4650      	mov	r0, sl
 80039f6:	b019      	add	sp, #100	@ 0x64
 80039f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	f77f ae37 	ble.w	8003672 <_dtoa_r+0x7b2>
 8003a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e655      	b.n	80036b8 <_dtoa_r+0x7f8>
 8003a0c:	9b00      	ldr	r3, [sp, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f77f aed6 	ble.w	80037c0 <_dtoa_r+0x900>
 8003a14:	4656      	mov	r6, sl
 8003a16:	4621      	mov	r1, r4
 8003a18:	4648      	mov	r0, r9
 8003a1a:	f7ff f9c8 	bl	8002dae <quorem>
 8003a1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003a22:	f806 8b01 	strb.w	r8, [r6], #1
 8003a26:	9b00      	ldr	r3, [sp, #0]
 8003a28:	eba6 020a 	sub.w	r2, r6, sl
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	ddb3      	ble.n	8003998 <_dtoa_r+0xad8>
 8003a30:	4649      	mov	r1, r9
 8003a32:	2300      	movs	r3, #0
 8003a34:	220a      	movs	r2, #10
 8003a36:	4658      	mov	r0, fp
 8003a38:	f000 f968 	bl	8003d0c <__multadd>
 8003a3c:	4681      	mov	r9, r0
 8003a3e:	e7ea      	b.n	8003a16 <_dtoa_r+0xb56>
 8003a40:	0800503e 	.word	0x0800503e
 8003a44:	08004fc2 	.word	0x08004fc2

08003a48 <_free_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	d041      	beq.n	8003ad4 <_free_r+0x8c>
 8003a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a54:	1f0c      	subs	r4, r1, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfb8      	it	lt
 8003a5a:	18e4      	addlt	r4, r4, r3
 8003a5c:	f000 f8e8 	bl	8003c30 <__malloc_lock>
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <_free_r+0x90>)
 8003a62:	6813      	ldr	r3, [r2, #0]
 8003a64:	b933      	cbnz	r3, 8003a74 <_free_r+0x2c>
 8003a66:	6063      	str	r3, [r4, #4]
 8003a68:	6014      	str	r4, [r2, #0]
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a70:	f000 b8e4 	b.w	8003c3c <__malloc_unlock>
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	d908      	bls.n	8003a8a <_free_r+0x42>
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	1821      	adds	r1, r4, r0
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	bf01      	itttt	eq
 8003a80:	6819      	ldreq	r1, [r3, #0]
 8003a82:	685b      	ldreq	r3, [r3, #4]
 8003a84:	1809      	addeq	r1, r1, r0
 8003a86:	6021      	streq	r1, [r4, #0]
 8003a88:	e7ed      	b.n	8003a66 <_free_r+0x1e>
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	b10b      	cbz	r3, 8003a94 <_free_r+0x4c>
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	d9fa      	bls.n	8003a8a <_free_r+0x42>
 8003a94:	6811      	ldr	r1, [r2, #0]
 8003a96:	1850      	adds	r0, r2, r1
 8003a98:	42a0      	cmp	r0, r4
 8003a9a:	d10b      	bne.n	8003ab4 <_free_r+0x6c>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	4401      	add	r1, r0
 8003aa0:	1850      	adds	r0, r2, r1
 8003aa2:	4283      	cmp	r3, r0
 8003aa4:	6011      	str	r1, [r2, #0]
 8003aa6:	d1e0      	bne.n	8003a6a <_free_r+0x22>
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	6053      	str	r3, [r2, #4]
 8003aae:	4408      	add	r0, r1
 8003ab0:	6010      	str	r0, [r2, #0]
 8003ab2:	e7da      	b.n	8003a6a <_free_r+0x22>
 8003ab4:	d902      	bls.n	8003abc <_free_r+0x74>
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	e7d6      	b.n	8003a6a <_free_r+0x22>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	1821      	adds	r1, r4, r0
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	bf04      	itt	eq
 8003ac4:	6819      	ldreq	r1, [r3, #0]
 8003ac6:	685b      	ldreq	r3, [r3, #4]
 8003ac8:	6063      	str	r3, [r4, #4]
 8003aca:	bf04      	itt	eq
 8003acc:	1809      	addeq	r1, r1, r0
 8003ace:	6021      	streq	r1, [r4, #0]
 8003ad0:	6054      	str	r4, [r2, #4]
 8003ad2:	e7ca      	b.n	8003a6a <_free_r+0x22>
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000398 	.word	0x20000398

08003adc <malloc>:
 8003adc:	4b02      	ldr	r3, [pc, #8]	@ (8003ae8 <malloc+0xc>)
 8003ade:	4601      	mov	r1, r0
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f000 b825 	b.w	8003b30 <_malloc_r>
 8003ae6:	bf00      	nop
 8003ae8:	20000060 	.word	0x20000060

08003aec <sbrk_aligned>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4e0f      	ldr	r6, [pc, #60]	@ (8003b2c <sbrk_aligned+0x40>)
 8003af0:	460c      	mov	r4, r1
 8003af2:	6831      	ldr	r1, [r6, #0]
 8003af4:	4605      	mov	r5, r0
 8003af6:	b911      	cbnz	r1, 8003afe <sbrk_aligned+0x12>
 8003af8:	f000 fe46 	bl	8004788 <_sbrk_r>
 8003afc:	6030      	str	r0, [r6, #0]
 8003afe:	4621      	mov	r1, r4
 8003b00:	4628      	mov	r0, r5
 8003b02:	f000 fe41 	bl	8004788 <_sbrk_r>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d103      	bne.n	8003b12 <sbrk_aligned+0x26>
 8003b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8003b0e:	4620      	mov	r0, r4
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
 8003b12:	1cc4      	adds	r4, r0, #3
 8003b14:	f024 0403 	bic.w	r4, r4, #3
 8003b18:	42a0      	cmp	r0, r4
 8003b1a:	d0f8      	beq.n	8003b0e <sbrk_aligned+0x22>
 8003b1c:	1a21      	subs	r1, r4, r0
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f000 fe32 	bl	8004788 <_sbrk_r>
 8003b24:	3001      	adds	r0, #1
 8003b26:	d1f2      	bne.n	8003b0e <sbrk_aligned+0x22>
 8003b28:	e7ef      	b.n	8003b0a <sbrk_aligned+0x1e>
 8003b2a:	bf00      	nop
 8003b2c:	20000394 	.word	0x20000394

08003b30 <_malloc_r>:
 8003b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b34:	1ccd      	adds	r5, r1, #3
 8003b36:	f025 0503 	bic.w	r5, r5, #3
 8003b3a:	3508      	adds	r5, #8
 8003b3c:	2d0c      	cmp	r5, #12
 8003b3e:	bf38      	it	cc
 8003b40:	250c      	movcc	r5, #12
 8003b42:	2d00      	cmp	r5, #0
 8003b44:	4606      	mov	r6, r0
 8003b46:	db01      	blt.n	8003b4c <_malloc_r+0x1c>
 8003b48:	42a9      	cmp	r1, r5
 8003b4a:	d904      	bls.n	8003b56 <_malloc_r+0x26>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	6033      	str	r3, [r6, #0]
 8003b50:	2000      	movs	r0, #0
 8003b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c2c <_malloc_r+0xfc>
 8003b5a:	f000 f869 	bl	8003c30 <__malloc_lock>
 8003b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b62:	461c      	mov	r4, r3
 8003b64:	bb44      	cbnz	r4, 8003bb8 <_malloc_r+0x88>
 8003b66:	4629      	mov	r1, r5
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f7ff ffbf 	bl	8003aec <sbrk_aligned>
 8003b6e:	1c43      	adds	r3, r0, #1
 8003b70:	4604      	mov	r4, r0
 8003b72:	d158      	bne.n	8003c26 <_malloc_r+0xf6>
 8003b74:	f8d8 4000 	ldr.w	r4, [r8]
 8003b78:	4627      	mov	r7, r4
 8003b7a:	2f00      	cmp	r7, #0
 8003b7c:	d143      	bne.n	8003c06 <_malloc_r+0xd6>
 8003b7e:	2c00      	cmp	r4, #0
 8003b80:	d04b      	beq.n	8003c1a <_malloc_r+0xea>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	4639      	mov	r1, r7
 8003b86:	4630      	mov	r0, r6
 8003b88:	eb04 0903 	add.w	r9, r4, r3
 8003b8c:	f000 fdfc 	bl	8004788 <_sbrk_r>
 8003b90:	4581      	cmp	r9, r0
 8003b92:	d142      	bne.n	8003c1a <_malloc_r+0xea>
 8003b94:	6821      	ldr	r1, [r4, #0]
 8003b96:	1a6d      	subs	r5, r5, r1
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ffa6 	bl	8003aec <sbrk_aligned>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d03a      	beq.n	8003c1a <_malloc_r+0xea>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	442b      	add	r3, r5
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	f8d8 3000 	ldr.w	r3, [r8]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	bb62      	cbnz	r2, 8003c0c <_malloc_r+0xdc>
 8003bb2:	f8c8 7000 	str.w	r7, [r8]
 8003bb6:	e00f      	b.n	8003bd8 <_malloc_r+0xa8>
 8003bb8:	6822      	ldr	r2, [r4, #0]
 8003bba:	1b52      	subs	r2, r2, r5
 8003bbc:	d420      	bmi.n	8003c00 <_malloc_r+0xd0>
 8003bbe:	2a0b      	cmp	r2, #11
 8003bc0:	d917      	bls.n	8003bf2 <_malloc_r+0xc2>
 8003bc2:	1961      	adds	r1, r4, r5
 8003bc4:	42a3      	cmp	r3, r4
 8003bc6:	6025      	str	r5, [r4, #0]
 8003bc8:	bf18      	it	ne
 8003bca:	6059      	strne	r1, [r3, #4]
 8003bcc:	6863      	ldr	r3, [r4, #4]
 8003bce:	bf08      	it	eq
 8003bd0:	f8c8 1000 	streq.w	r1, [r8]
 8003bd4:	5162      	str	r2, [r4, r5]
 8003bd6:	604b      	str	r3, [r1, #4]
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f000 f82f 	bl	8003c3c <__malloc_unlock>
 8003bde:	f104 000b 	add.w	r0, r4, #11
 8003be2:	1d23      	adds	r3, r4, #4
 8003be4:	f020 0007 	bic.w	r0, r0, #7
 8003be8:	1ac2      	subs	r2, r0, r3
 8003bea:	bf1c      	itt	ne
 8003bec:	1a1b      	subne	r3, r3, r0
 8003bee:	50a3      	strne	r3, [r4, r2]
 8003bf0:	e7af      	b.n	8003b52 <_malloc_r+0x22>
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	bf0c      	ite	eq
 8003bf8:	f8c8 2000 	streq.w	r2, [r8]
 8003bfc:	605a      	strne	r2, [r3, #4]
 8003bfe:	e7eb      	b.n	8003bd8 <_malloc_r+0xa8>
 8003c00:	4623      	mov	r3, r4
 8003c02:	6864      	ldr	r4, [r4, #4]
 8003c04:	e7ae      	b.n	8003b64 <_malloc_r+0x34>
 8003c06:	463c      	mov	r4, r7
 8003c08:	687f      	ldr	r7, [r7, #4]
 8003c0a:	e7b6      	b.n	8003b7a <_malloc_r+0x4a>
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d1fb      	bne.n	8003c0c <_malloc_r+0xdc>
 8003c14:	2300      	movs	r3, #0
 8003c16:	6053      	str	r3, [r2, #4]
 8003c18:	e7de      	b.n	8003bd8 <_malloc_r+0xa8>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f000 f80c 	bl	8003c3c <__malloc_unlock>
 8003c24:	e794      	b.n	8003b50 <_malloc_r+0x20>
 8003c26:	6005      	str	r5, [r0, #0]
 8003c28:	e7d6      	b.n	8003bd8 <_malloc_r+0xa8>
 8003c2a:	bf00      	nop
 8003c2c:	20000398 	.word	0x20000398

08003c30 <__malloc_lock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	@ (8003c38 <__malloc_lock+0x8>)
 8003c32:	f7ff b8ba 	b.w	8002daa <__retarget_lock_acquire_recursive>
 8003c36:	bf00      	nop
 8003c38:	20000390 	.word	0x20000390

08003c3c <__malloc_unlock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	@ (8003c44 <__malloc_unlock+0x8>)
 8003c3e:	f7ff b8b5 	b.w	8002dac <__retarget_lock_release_recursive>
 8003c42:	bf00      	nop
 8003c44:	20000390 	.word	0x20000390

08003c48 <_Balloc>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	69c6      	ldr	r6, [r0, #28]
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	460d      	mov	r5, r1
 8003c50:	b976      	cbnz	r6, 8003c70 <_Balloc+0x28>
 8003c52:	2010      	movs	r0, #16
 8003c54:	f7ff ff42 	bl	8003adc <malloc>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	61e0      	str	r0, [r4, #28]
 8003c5c:	b920      	cbnz	r0, 8003c68 <_Balloc+0x20>
 8003c5e:	4b18      	ldr	r3, [pc, #96]	@ (8003cc0 <_Balloc+0x78>)
 8003c60:	4818      	ldr	r0, [pc, #96]	@ (8003cc4 <_Balloc+0x7c>)
 8003c62:	216b      	movs	r1, #107	@ 0x6b
 8003c64:	f000 fdae 	bl	80047c4 <__assert_func>
 8003c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c6c:	6006      	str	r6, [r0, #0]
 8003c6e:	60c6      	str	r6, [r0, #12]
 8003c70:	69e6      	ldr	r6, [r4, #28]
 8003c72:	68f3      	ldr	r3, [r6, #12]
 8003c74:	b183      	cbz	r3, 8003c98 <_Balloc+0x50>
 8003c76:	69e3      	ldr	r3, [r4, #28]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003c7e:	b9b8      	cbnz	r0, 8003cb0 <_Balloc+0x68>
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f605 	lsl.w	r6, r1, r5
 8003c86:	1d72      	adds	r2, r6, #5
 8003c88:	0092      	lsls	r2, r2, #2
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f000 fdb8 	bl	8004800 <_calloc_r>
 8003c90:	b160      	cbz	r0, 8003cac <_Balloc+0x64>
 8003c92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003c96:	e00e      	b.n	8003cb6 <_Balloc+0x6e>
 8003c98:	2221      	movs	r2, #33	@ 0x21
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f000 fdaf 	bl	8004800 <_calloc_r>
 8003ca2:	69e3      	ldr	r3, [r4, #28]
 8003ca4:	60f0      	str	r0, [r6, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e4      	bne.n	8003c76 <_Balloc+0x2e>
 8003cac:	2000      	movs	r0, #0
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	6802      	ldr	r2, [r0, #0]
 8003cb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003cbc:	e7f7      	b.n	8003cae <_Balloc+0x66>
 8003cbe:	bf00      	nop
 8003cc0:	08004fcf 	.word	0x08004fcf
 8003cc4:	0800504f 	.word	0x0800504f

08003cc8 <_Bfree>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	69c6      	ldr	r6, [r0, #28]
 8003ccc:	4605      	mov	r5, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	b976      	cbnz	r6, 8003cf0 <_Bfree+0x28>
 8003cd2:	2010      	movs	r0, #16
 8003cd4:	f7ff ff02 	bl	8003adc <malloc>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	61e8      	str	r0, [r5, #28]
 8003cdc:	b920      	cbnz	r0, 8003ce8 <_Bfree+0x20>
 8003cde:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <_Bfree+0x3c>)
 8003ce0:	4809      	ldr	r0, [pc, #36]	@ (8003d08 <_Bfree+0x40>)
 8003ce2:	218f      	movs	r1, #143	@ 0x8f
 8003ce4:	f000 fd6e 	bl	80047c4 <__assert_func>
 8003ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003cec:	6006      	str	r6, [r0, #0]
 8003cee:	60c6      	str	r6, [r0, #12]
 8003cf0:	b13c      	cbz	r4, 8003d02 <_Bfree+0x3a>
 8003cf2:	69eb      	ldr	r3, [r5, #28]
 8003cf4:	6862      	ldr	r2, [r4, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cfc:	6021      	str	r1, [r4, #0]
 8003cfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	08004fcf 	.word	0x08004fcf
 8003d08:	0800504f 	.word	0x0800504f

08003d0c <__multadd>:
 8003d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d10:	690d      	ldr	r5, [r1, #16]
 8003d12:	4607      	mov	r7, r0
 8003d14:	460c      	mov	r4, r1
 8003d16:	461e      	mov	r6, r3
 8003d18:	f101 0c14 	add.w	ip, r1, #20
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f8dc 3000 	ldr.w	r3, [ip]
 8003d22:	b299      	uxth	r1, r3
 8003d24:	fb02 6101 	mla	r1, r2, r1, r6
 8003d28:	0c1e      	lsrs	r6, r3, #16
 8003d2a:	0c0b      	lsrs	r3, r1, #16
 8003d2c:	fb02 3306 	mla	r3, r2, r6, r3
 8003d30:	b289      	uxth	r1, r1
 8003d32:	3001      	adds	r0, #1
 8003d34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003d38:	4285      	cmp	r5, r0
 8003d3a:	f84c 1b04 	str.w	r1, [ip], #4
 8003d3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003d42:	dcec      	bgt.n	8003d1e <__multadd+0x12>
 8003d44:	b30e      	cbz	r6, 8003d8a <__multadd+0x7e>
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	42ab      	cmp	r3, r5
 8003d4a:	dc19      	bgt.n	8003d80 <__multadd+0x74>
 8003d4c:	6861      	ldr	r1, [r4, #4]
 8003d4e:	4638      	mov	r0, r7
 8003d50:	3101      	adds	r1, #1
 8003d52:	f7ff ff79 	bl	8003c48 <_Balloc>
 8003d56:	4680      	mov	r8, r0
 8003d58:	b928      	cbnz	r0, 8003d66 <__multadd+0x5a>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <__multadd+0x84>)
 8003d5e:	480d      	ldr	r0, [pc, #52]	@ (8003d94 <__multadd+0x88>)
 8003d60:	21ba      	movs	r1, #186	@ 0xba
 8003d62:	f000 fd2f 	bl	80047c4 <__assert_func>
 8003d66:	6922      	ldr	r2, [r4, #16]
 8003d68:	3202      	adds	r2, #2
 8003d6a:	f104 010c 	add.w	r1, r4, #12
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	300c      	adds	r0, #12
 8003d72:	f000 fd19 	bl	80047a8 <memcpy>
 8003d76:	4621      	mov	r1, r4
 8003d78:	4638      	mov	r0, r7
 8003d7a:	f7ff ffa5 	bl	8003cc8 <_Bfree>
 8003d7e:	4644      	mov	r4, r8
 8003d80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003d84:	3501      	adds	r5, #1
 8003d86:	615e      	str	r6, [r3, #20]
 8003d88:	6125      	str	r5, [r4, #16]
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d90:	0800503e 	.word	0x0800503e
 8003d94:	0800504f 	.word	0x0800504f

08003d98 <__hi0bits>:
 8003d98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	bf36      	itet	cc
 8003da0:	0403      	lslcc	r3, r0, #16
 8003da2:	2000      	movcs	r0, #0
 8003da4:	2010      	movcc	r0, #16
 8003da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003daa:	bf3c      	itt	cc
 8003dac:	021b      	lslcc	r3, r3, #8
 8003dae:	3008      	addcc	r0, #8
 8003db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003db4:	bf3c      	itt	cc
 8003db6:	011b      	lslcc	r3, r3, #4
 8003db8:	3004      	addcc	r0, #4
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dbe:	bf3c      	itt	cc
 8003dc0:	009b      	lslcc	r3, r3, #2
 8003dc2:	3002      	addcc	r0, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db05      	blt.n	8003dd4 <__hi0bits+0x3c>
 8003dc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003dcc:	f100 0001 	add.w	r0, r0, #1
 8003dd0:	bf08      	it	eq
 8003dd2:	2020      	moveq	r0, #32
 8003dd4:	4770      	bx	lr

08003dd6 <__lo0bits>:
 8003dd6:	6803      	ldr	r3, [r0, #0]
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f013 0007 	ands.w	r0, r3, #7
 8003dde:	d00b      	beq.n	8003df8 <__lo0bits+0x22>
 8003de0:	07d9      	lsls	r1, r3, #31
 8003de2:	d421      	bmi.n	8003e28 <__lo0bits+0x52>
 8003de4:	0798      	lsls	r0, r3, #30
 8003de6:	bf49      	itett	mi
 8003de8:	085b      	lsrmi	r3, r3, #1
 8003dea:	089b      	lsrpl	r3, r3, #2
 8003dec:	2001      	movmi	r0, #1
 8003dee:	6013      	strmi	r3, [r2, #0]
 8003df0:	bf5c      	itt	pl
 8003df2:	6013      	strpl	r3, [r2, #0]
 8003df4:	2002      	movpl	r0, #2
 8003df6:	4770      	bx	lr
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	b909      	cbnz	r1, 8003e00 <__lo0bits+0x2a>
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	2010      	movs	r0, #16
 8003e00:	b2d9      	uxtb	r1, r3
 8003e02:	b909      	cbnz	r1, 8003e08 <__lo0bits+0x32>
 8003e04:	3008      	adds	r0, #8
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	0719      	lsls	r1, r3, #28
 8003e0a:	bf04      	itt	eq
 8003e0c:	091b      	lsreq	r3, r3, #4
 8003e0e:	3004      	addeq	r0, #4
 8003e10:	0799      	lsls	r1, r3, #30
 8003e12:	bf04      	itt	eq
 8003e14:	089b      	lsreq	r3, r3, #2
 8003e16:	3002      	addeq	r0, #2
 8003e18:	07d9      	lsls	r1, r3, #31
 8003e1a:	d403      	bmi.n	8003e24 <__lo0bits+0x4e>
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	f100 0001 	add.w	r0, r0, #1
 8003e22:	d003      	beq.n	8003e2c <__lo0bits+0x56>
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4770      	bx	lr
 8003e28:	2000      	movs	r0, #0
 8003e2a:	4770      	bx	lr
 8003e2c:	2020      	movs	r0, #32
 8003e2e:	4770      	bx	lr

08003e30 <__i2b>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	460c      	mov	r4, r1
 8003e34:	2101      	movs	r1, #1
 8003e36:	f7ff ff07 	bl	8003c48 <_Balloc>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	b928      	cbnz	r0, 8003e4a <__i2b+0x1a>
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <__i2b+0x24>)
 8003e40:	4805      	ldr	r0, [pc, #20]	@ (8003e58 <__i2b+0x28>)
 8003e42:	f240 1145 	movw	r1, #325	@ 0x145
 8003e46:	f000 fcbd 	bl	80047c4 <__assert_func>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	6144      	str	r4, [r0, #20]
 8003e4e:	6103      	str	r3, [r0, #16]
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	bf00      	nop
 8003e54:	0800503e 	.word	0x0800503e
 8003e58:	0800504f 	.word	0x0800504f

08003e5c <__multiply>:
 8003e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e60:	4614      	mov	r4, r2
 8003e62:	690a      	ldr	r2, [r1, #16]
 8003e64:	6923      	ldr	r3, [r4, #16]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	bfa8      	it	ge
 8003e6a:	4623      	movge	r3, r4
 8003e6c:	460f      	mov	r7, r1
 8003e6e:	bfa4      	itt	ge
 8003e70:	460c      	movge	r4, r1
 8003e72:	461f      	movge	r7, r3
 8003e74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003e78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003e7c:	68a3      	ldr	r3, [r4, #8]
 8003e7e:	6861      	ldr	r1, [r4, #4]
 8003e80:	eb0a 0609 	add.w	r6, sl, r9
 8003e84:	42b3      	cmp	r3, r6
 8003e86:	b085      	sub	sp, #20
 8003e88:	bfb8      	it	lt
 8003e8a:	3101      	addlt	r1, #1
 8003e8c:	f7ff fedc 	bl	8003c48 <_Balloc>
 8003e90:	b930      	cbnz	r0, 8003ea0 <__multiply+0x44>
 8003e92:	4602      	mov	r2, r0
 8003e94:	4b44      	ldr	r3, [pc, #272]	@ (8003fa8 <__multiply+0x14c>)
 8003e96:	4845      	ldr	r0, [pc, #276]	@ (8003fac <__multiply+0x150>)
 8003e98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003e9c:	f000 fc92 	bl	80047c4 <__assert_func>
 8003ea0:	f100 0514 	add.w	r5, r0, #20
 8003ea4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4543      	cmp	r3, r8
 8003eae:	d321      	bcc.n	8003ef4 <__multiply+0x98>
 8003eb0:	f107 0114 	add.w	r1, r7, #20
 8003eb4:	f104 0214 	add.w	r2, r4, #20
 8003eb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003ebc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	1b13      	subs	r3, r2, r4
 8003ec4:	3b15      	subs	r3, #21
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	3304      	adds	r3, #4
 8003ecc:	f104 0715 	add.w	r7, r4, #21
 8003ed0:	42ba      	cmp	r2, r7
 8003ed2:	bf38      	it	cc
 8003ed4:	2304      	movcc	r3, #4
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	9b02      	ldr	r3, [sp, #8]
 8003eda:	9103      	str	r1, [sp, #12]
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d80c      	bhi.n	8003efa <__multiply+0x9e>
 8003ee0:	2e00      	cmp	r6, #0
 8003ee2:	dd03      	ble.n	8003eec <__multiply+0x90>
 8003ee4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05b      	beq.n	8003fa4 <__multiply+0x148>
 8003eec:	6106      	str	r6, [r0, #16]
 8003eee:	b005      	add	sp, #20
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef4:	f843 2b04 	str.w	r2, [r3], #4
 8003ef8:	e7d8      	b.n	8003eac <__multiply+0x50>
 8003efa:	f8b1 a000 	ldrh.w	sl, [r1]
 8003efe:	f1ba 0f00 	cmp.w	sl, #0
 8003f02:	d024      	beq.n	8003f4e <__multiply+0xf2>
 8003f04:	f104 0e14 	add.w	lr, r4, #20
 8003f08:	46a9      	mov	r9, r5
 8003f0a:	f04f 0c00 	mov.w	ip, #0
 8003f0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003f12:	f8d9 3000 	ldr.w	r3, [r9]
 8003f16:	fa1f fb87 	uxth.w	fp, r7
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8003f20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003f24:	f8d9 7000 	ldr.w	r7, [r9]
 8003f28:	4463      	add	r3, ip
 8003f2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003f2e:	fb0a c70b 	mla	r7, sl, fp, ip
 8003f32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003f3c:	4572      	cmp	r2, lr
 8003f3e:	f849 3b04 	str.w	r3, [r9], #4
 8003f42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003f46:	d8e2      	bhi.n	8003f0e <__multiply+0xb2>
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	f845 c003 	str.w	ip, [r5, r3]
 8003f4e:	9b03      	ldr	r3, [sp, #12]
 8003f50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003f54:	3104      	adds	r1, #4
 8003f56:	f1b9 0f00 	cmp.w	r9, #0
 8003f5a:	d021      	beq.n	8003fa0 <__multiply+0x144>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	f104 0c14 	add.w	ip, r4, #20
 8003f62:	46ae      	mov	lr, r5
 8003f64:	f04f 0a00 	mov.w	sl, #0
 8003f68:	f8bc b000 	ldrh.w	fp, [ip]
 8003f6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003f70:	fb09 770b 	mla	r7, r9, fp, r7
 8003f74:	4457      	add	r7, sl
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003f7c:	f84e 3b04 	str.w	r3, [lr], #4
 8003f80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f88:	f8be 3000 	ldrh.w	r3, [lr]
 8003f8c:	fb09 330a 	mla	r3, r9, sl, r3
 8003f90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003f94:	4562      	cmp	r2, ip
 8003f96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f9a:	d8e5      	bhi.n	8003f68 <__multiply+0x10c>
 8003f9c:	9f01      	ldr	r7, [sp, #4]
 8003f9e:	51eb      	str	r3, [r5, r7]
 8003fa0:	3504      	adds	r5, #4
 8003fa2:	e799      	b.n	8003ed8 <__multiply+0x7c>
 8003fa4:	3e01      	subs	r6, #1
 8003fa6:	e79b      	b.n	8003ee0 <__multiply+0x84>
 8003fa8:	0800503e 	.word	0x0800503e
 8003fac:	0800504f 	.word	0x0800504f

08003fb0 <__pow5mult>:
 8003fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb4:	4615      	mov	r5, r2
 8003fb6:	f012 0203 	ands.w	r2, r2, #3
 8003fba:	4607      	mov	r7, r0
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	d007      	beq.n	8003fd0 <__pow5mult+0x20>
 8003fc0:	4c25      	ldr	r4, [pc, #148]	@ (8004058 <__pow5mult+0xa8>)
 8003fc2:	3a01      	subs	r2, #1
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003fca:	f7ff fe9f 	bl	8003d0c <__multadd>
 8003fce:	4606      	mov	r6, r0
 8003fd0:	10ad      	asrs	r5, r5, #2
 8003fd2:	d03d      	beq.n	8004050 <__pow5mult+0xa0>
 8003fd4:	69fc      	ldr	r4, [r7, #28]
 8003fd6:	b97c      	cbnz	r4, 8003ff8 <__pow5mult+0x48>
 8003fd8:	2010      	movs	r0, #16
 8003fda:	f7ff fd7f 	bl	8003adc <malloc>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	61f8      	str	r0, [r7, #28]
 8003fe2:	b928      	cbnz	r0, 8003ff0 <__pow5mult+0x40>
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800405c <__pow5mult+0xac>)
 8003fe6:	481e      	ldr	r0, [pc, #120]	@ (8004060 <__pow5mult+0xb0>)
 8003fe8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003fec:	f000 fbea 	bl	80047c4 <__assert_func>
 8003ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ff4:	6004      	str	r4, [r0, #0]
 8003ff6:	60c4      	str	r4, [r0, #12]
 8003ff8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004000:	b94c      	cbnz	r4, 8004016 <__pow5mult+0x66>
 8004002:	f240 2171 	movw	r1, #625	@ 0x271
 8004006:	4638      	mov	r0, r7
 8004008:	f7ff ff12 	bl	8003e30 <__i2b>
 800400c:	2300      	movs	r3, #0
 800400e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004012:	4604      	mov	r4, r0
 8004014:	6003      	str	r3, [r0, #0]
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	07eb      	lsls	r3, r5, #31
 800401c:	d50a      	bpl.n	8004034 <__pow5mult+0x84>
 800401e:	4631      	mov	r1, r6
 8004020:	4622      	mov	r2, r4
 8004022:	4638      	mov	r0, r7
 8004024:	f7ff ff1a 	bl	8003e5c <__multiply>
 8004028:	4631      	mov	r1, r6
 800402a:	4680      	mov	r8, r0
 800402c:	4638      	mov	r0, r7
 800402e:	f7ff fe4b 	bl	8003cc8 <_Bfree>
 8004032:	4646      	mov	r6, r8
 8004034:	106d      	asrs	r5, r5, #1
 8004036:	d00b      	beq.n	8004050 <__pow5mult+0xa0>
 8004038:	6820      	ldr	r0, [r4, #0]
 800403a:	b938      	cbnz	r0, 800404c <__pow5mult+0x9c>
 800403c:	4622      	mov	r2, r4
 800403e:	4621      	mov	r1, r4
 8004040:	4638      	mov	r0, r7
 8004042:	f7ff ff0b 	bl	8003e5c <__multiply>
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	f8c0 9000 	str.w	r9, [r0]
 800404c:	4604      	mov	r4, r0
 800404e:	e7e4      	b.n	800401a <__pow5mult+0x6a>
 8004050:	4630      	mov	r0, r6
 8004052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004056:	bf00      	nop
 8004058:	080050a8 	.word	0x080050a8
 800405c:	08004fcf 	.word	0x08004fcf
 8004060:	0800504f 	.word	0x0800504f

08004064 <__lshift>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	460c      	mov	r4, r1
 800406a:	6849      	ldr	r1, [r1, #4]
 800406c:	6923      	ldr	r3, [r4, #16]
 800406e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004072:	68a3      	ldr	r3, [r4, #8]
 8004074:	4607      	mov	r7, r0
 8004076:	4691      	mov	r9, r2
 8004078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800407c:	f108 0601 	add.w	r6, r8, #1
 8004080:	42b3      	cmp	r3, r6
 8004082:	db0b      	blt.n	800409c <__lshift+0x38>
 8004084:	4638      	mov	r0, r7
 8004086:	f7ff fddf 	bl	8003c48 <_Balloc>
 800408a:	4605      	mov	r5, r0
 800408c:	b948      	cbnz	r0, 80040a2 <__lshift+0x3e>
 800408e:	4602      	mov	r2, r0
 8004090:	4b28      	ldr	r3, [pc, #160]	@ (8004134 <__lshift+0xd0>)
 8004092:	4829      	ldr	r0, [pc, #164]	@ (8004138 <__lshift+0xd4>)
 8004094:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004098:	f000 fb94 	bl	80047c4 <__assert_func>
 800409c:	3101      	adds	r1, #1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	e7ee      	b.n	8004080 <__lshift+0x1c>
 80040a2:	2300      	movs	r3, #0
 80040a4:	f100 0114 	add.w	r1, r0, #20
 80040a8:	f100 0210 	add.w	r2, r0, #16
 80040ac:	4618      	mov	r0, r3
 80040ae:	4553      	cmp	r3, sl
 80040b0:	db33      	blt.n	800411a <__lshift+0xb6>
 80040b2:	6920      	ldr	r0, [r4, #16]
 80040b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80040b8:	f104 0314 	add.w	r3, r4, #20
 80040bc:	f019 091f 	ands.w	r9, r9, #31
 80040c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80040c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80040c8:	d02b      	beq.n	8004122 <__lshift+0xbe>
 80040ca:	f1c9 0e20 	rsb	lr, r9, #32
 80040ce:	468a      	mov	sl, r1
 80040d0:	2200      	movs	r2, #0
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	fa00 f009 	lsl.w	r0, r0, r9
 80040d8:	4310      	orrs	r0, r2
 80040da:	f84a 0b04 	str.w	r0, [sl], #4
 80040de:	f853 2b04 	ldr.w	r2, [r3], #4
 80040e2:	459c      	cmp	ip, r3
 80040e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80040e8:	d8f3      	bhi.n	80040d2 <__lshift+0x6e>
 80040ea:	ebac 0304 	sub.w	r3, ip, r4
 80040ee:	3b15      	subs	r3, #21
 80040f0:	f023 0303 	bic.w	r3, r3, #3
 80040f4:	3304      	adds	r3, #4
 80040f6:	f104 0015 	add.w	r0, r4, #21
 80040fa:	4584      	cmp	ip, r0
 80040fc:	bf38      	it	cc
 80040fe:	2304      	movcc	r3, #4
 8004100:	50ca      	str	r2, [r1, r3]
 8004102:	b10a      	cbz	r2, 8004108 <__lshift+0xa4>
 8004104:	f108 0602 	add.w	r6, r8, #2
 8004108:	3e01      	subs	r6, #1
 800410a:	4638      	mov	r0, r7
 800410c:	612e      	str	r6, [r5, #16]
 800410e:	4621      	mov	r1, r4
 8004110:	f7ff fdda 	bl	8003cc8 <_Bfree>
 8004114:	4628      	mov	r0, r5
 8004116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411a:	f842 0f04 	str.w	r0, [r2, #4]!
 800411e:	3301      	adds	r3, #1
 8004120:	e7c5      	b.n	80040ae <__lshift+0x4a>
 8004122:	3904      	subs	r1, #4
 8004124:	f853 2b04 	ldr.w	r2, [r3], #4
 8004128:	f841 2f04 	str.w	r2, [r1, #4]!
 800412c:	459c      	cmp	ip, r3
 800412e:	d8f9      	bhi.n	8004124 <__lshift+0xc0>
 8004130:	e7ea      	b.n	8004108 <__lshift+0xa4>
 8004132:	bf00      	nop
 8004134:	0800503e 	.word	0x0800503e
 8004138:	0800504f 	.word	0x0800504f

0800413c <__mcmp>:
 800413c:	690a      	ldr	r2, [r1, #16]
 800413e:	4603      	mov	r3, r0
 8004140:	6900      	ldr	r0, [r0, #16]
 8004142:	1a80      	subs	r0, r0, r2
 8004144:	b530      	push	{r4, r5, lr}
 8004146:	d10e      	bne.n	8004166 <__mcmp+0x2a>
 8004148:	3314      	adds	r3, #20
 800414a:	3114      	adds	r1, #20
 800414c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004150:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004154:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800415c:	4295      	cmp	r5, r2
 800415e:	d003      	beq.n	8004168 <__mcmp+0x2c>
 8004160:	d205      	bcs.n	800416e <__mcmp+0x32>
 8004162:	f04f 30ff 	mov.w	r0, #4294967295
 8004166:	bd30      	pop	{r4, r5, pc}
 8004168:	42a3      	cmp	r3, r4
 800416a:	d3f3      	bcc.n	8004154 <__mcmp+0x18>
 800416c:	e7fb      	b.n	8004166 <__mcmp+0x2a>
 800416e:	2001      	movs	r0, #1
 8004170:	e7f9      	b.n	8004166 <__mcmp+0x2a>
	...

08004174 <__mdiff>:
 8004174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004178:	4689      	mov	r9, r1
 800417a:	4606      	mov	r6, r0
 800417c:	4611      	mov	r1, r2
 800417e:	4648      	mov	r0, r9
 8004180:	4614      	mov	r4, r2
 8004182:	f7ff ffdb 	bl	800413c <__mcmp>
 8004186:	1e05      	subs	r5, r0, #0
 8004188:	d112      	bne.n	80041b0 <__mdiff+0x3c>
 800418a:	4629      	mov	r1, r5
 800418c:	4630      	mov	r0, r6
 800418e:	f7ff fd5b 	bl	8003c48 <_Balloc>
 8004192:	4602      	mov	r2, r0
 8004194:	b928      	cbnz	r0, 80041a2 <__mdiff+0x2e>
 8004196:	4b3f      	ldr	r3, [pc, #252]	@ (8004294 <__mdiff+0x120>)
 8004198:	f240 2137 	movw	r1, #567	@ 0x237
 800419c:	483e      	ldr	r0, [pc, #248]	@ (8004298 <__mdiff+0x124>)
 800419e:	f000 fb11 	bl	80047c4 <__assert_func>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80041a8:	4610      	mov	r0, r2
 80041aa:	b003      	add	sp, #12
 80041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b0:	bfbc      	itt	lt
 80041b2:	464b      	movlt	r3, r9
 80041b4:	46a1      	movlt	r9, r4
 80041b6:	4630      	mov	r0, r6
 80041b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80041bc:	bfba      	itte	lt
 80041be:	461c      	movlt	r4, r3
 80041c0:	2501      	movlt	r5, #1
 80041c2:	2500      	movge	r5, #0
 80041c4:	f7ff fd40 	bl	8003c48 <_Balloc>
 80041c8:	4602      	mov	r2, r0
 80041ca:	b918      	cbnz	r0, 80041d4 <__mdiff+0x60>
 80041cc:	4b31      	ldr	r3, [pc, #196]	@ (8004294 <__mdiff+0x120>)
 80041ce:	f240 2145 	movw	r1, #581	@ 0x245
 80041d2:	e7e3      	b.n	800419c <__mdiff+0x28>
 80041d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80041d8:	6926      	ldr	r6, [r4, #16]
 80041da:	60c5      	str	r5, [r0, #12]
 80041dc:	f109 0310 	add.w	r3, r9, #16
 80041e0:	f109 0514 	add.w	r5, r9, #20
 80041e4:	f104 0e14 	add.w	lr, r4, #20
 80041e8:	f100 0b14 	add.w	fp, r0, #20
 80041ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80041f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	46d9      	mov	r9, fp
 80041f8:	f04f 0c00 	mov.w	ip, #0
 80041fc:	9b01      	ldr	r3, [sp, #4]
 80041fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004202:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	fa1f f38a 	uxth.w	r3, sl
 800420c:	4619      	mov	r1, r3
 800420e:	b283      	uxth	r3, r0
 8004210:	1acb      	subs	r3, r1, r3
 8004212:	0c00      	lsrs	r0, r0, #16
 8004214:	4463      	add	r3, ip
 8004216:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800421a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800421e:	b29b      	uxth	r3, r3
 8004220:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004224:	4576      	cmp	r6, lr
 8004226:	f849 3b04 	str.w	r3, [r9], #4
 800422a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800422e:	d8e5      	bhi.n	80041fc <__mdiff+0x88>
 8004230:	1b33      	subs	r3, r6, r4
 8004232:	3b15      	subs	r3, #21
 8004234:	f023 0303 	bic.w	r3, r3, #3
 8004238:	3415      	adds	r4, #21
 800423a:	3304      	adds	r3, #4
 800423c:	42a6      	cmp	r6, r4
 800423e:	bf38      	it	cc
 8004240:	2304      	movcc	r3, #4
 8004242:	441d      	add	r5, r3
 8004244:	445b      	add	r3, fp
 8004246:	461e      	mov	r6, r3
 8004248:	462c      	mov	r4, r5
 800424a:	4544      	cmp	r4, r8
 800424c:	d30e      	bcc.n	800426c <__mdiff+0xf8>
 800424e:	f108 0103 	add.w	r1, r8, #3
 8004252:	1b49      	subs	r1, r1, r5
 8004254:	f021 0103 	bic.w	r1, r1, #3
 8004258:	3d03      	subs	r5, #3
 800425a:	45a8      	cmp	r8, r5
 800425c:	bf38      	it	cc
 800425e:	2100      	movcc	r1, #0
 8004260:	440b      	add	r3, r1
 8004262:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004266:	b191      	cbz	r1, 800428e <__mdiff+0x11a>
 8004268:	6117      	str	r7, [r2, #16]
 800426a:	e79d      	b.n	80041a8 <__mdiff+0x34>
 800426c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004270:	46e6      	mov	lr, ip
 8004272:	0c08      	lsrs	r0, r1, #16
 8004274:	fa1c fc81 	uxtah	ip, ip, r1
 8004278:	4471      	add	r1, lr
 800427a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800427e:	b289      	uxth	r1, r1
 8004280:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004284:	f846 1b04 	str.w	r1, [r6], #4
 8004288:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800428c:	e7dd      	b.n	800424a <__mdiff+0xd6>
 800428e:	3f01      	subs	r7, #1
 8004290:	e7e7      	b.n	8004262 <__mdiff+0xee>
 8004292:	bf00      	nop
 8004294:	0800503e 	.word	0x0800503e
 8004298:	0800504f 	.word	0x0800504f

0800429c <__d2b>:
 800429c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042a0:	460f      	mov	r7, r1
 80042a2:	2101      	movs	r1, #1
 80042a4:	ec59 8b10 	vmov	r8, r9, d0
 80042a8:	4616      	mov	r6, r2
 80042aa:	f7ff fccd 	bl	8003c48 <_Balloc>
 80042ae:	4604      	mov	r4, r0
 80042b0:	b930      	cbnz	r0, 80042c0 <__d2b+0x24>
 80042b2:	4602      	mov	r2, r0
 80042b4:	4b23      	ldr	r3, [pc, #140]	@ (8004344 <__d2b+0xa8>)
 80042b6:	4824      	ldr	r0, [pc, #144]	@ (8004348 <__d2b+0xac>)
 80042b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80042bc:	f000 fa82 	bl	80047c4 <__assert_func>
 80042c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80042c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042c8:	b10d      	cbz	r5, 80042ce <__d2b+0x32>
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	f1b8 0300 	subs.w	r3, r8, #0
 80042d4:	d023      	beq.n	800431e <__d2b+0x82>
 80042d6:	4668      	mov	r0, sp
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	f7ff fd7c 	bl	8003dd6 <__lo0bits>
 80042de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80042e2:	b1d0      	cbz	r0, 800431a <__d2b+0x7e>
 80042e4:	f1c0 0320 	rsb	r3, r0, #32
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	430b      	orrs	r3, r1
 80042ee:	40c2      	lsrs	r2, r0
 80042f0:	6163      	str	r3, [r4, #20]
 80042f2:	9201      	str	r2, [sp, #4]
 80042f4:	9b01      	ldr	r3, [sp, #4]
 80042f6:	61a3      	str	r3, [r4, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2201      	moveq	r2, #1
 80042fe:	2202      	movne	r2, #2
 8004300:	6122      	str	r2, [r4, #16]
 8004302:	b1a5      	cbz	r5, 800432e <__d2b+0x92>
 8004304:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004308:	4405      	add	r5, r0
 800430a:	603d      	str	r5, [r7, #0]
 800430c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004310:	6030      	str	r0, [r6, #0]
 8004312:	4620      	mov	r0, r4
 8004314:	b003      	add	sp, #12
 8004316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800431a:	6161      	str	r1, [r4, #20]
 800431c:	e7ea      	b.n	80042f4 <__d2b+0x58>
 800431e:	a801      	add	r0, sp, #4
 8004320:	f7ff fd59 	bl	8003dd6 <__lo0bits>
 8004324:	9b01      	ldr	r3, [sp, #4]
 8004326:	6163      	str	r3, [r4, #20]
 8004328:	3020      	adds	r0, #32
 800432a:	2201      	movs	r2, #1
 800432c:	e7e8      	b.n	8004300 <__d2b+0x64>
 800432e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004332:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004336:	6038      	str	r0, [r7, #0]
 8004338:	6918      	ldr	r0, [r3, #16]
 800433a:	f7ff fd2d 	bl	8003d98 <__hi0bits>
 800433e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004342:	e7e5      	b.n	8004310 <__d2b+0x74>
 8004344:	0800503e 	.word	0x0800503e
 8004348:	0800504f 	.word	0x0800504f

0800434c <__ssputs_r>:
 800434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	688e      	ldr	r6, [r1, #8]
 8004352:	461f      	mov	r7, r3
 8004354:	42be      	cmp	r6, r7
 8004356:	680b      	ldr	r3, [r1, #0]
 8004358:	4682      	mov	sl, r0
 800435a:	460c      	mov	r4, r1
 800435c:	4690      	mov	r8, r2
 800435e:	d82d      	bhi.n	80043bc <__ssputs_r+0x70>
 8004360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004368:	d026      	beq.n	80043b8 <__ssputs_r+0x6c>
 800436a:	6965      	ldr	r5, [r4, #20]
 800436c:	6909      	ldr	r1, [r1, #16]
 800436e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004372:	eba3 0901 	sub.w	r9, r3, r1
 8004376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800437a:	1c7b      	adds	r3, r7, #1
 800437c:	444b      	add	r3, r9
 800437e:	106d      	asrs	r5, r5, #1
 8004380:	429d      	cmp	r5, r3
 8004382:	bf38      	it	cc
 8004384:	461d      	movcc	r5, r3
 8004386:	0553      	lsls	r3, r2, #21
 8004388:	d527      	bpl.n	80043da <__ssputs_r+0x8e>
 800438a:	4629      	mov	r1, r5
 800438c:	f7ff fbd0 	bl	8003b30 <_malloc_r>
 8004390:	4606      	mov	r6, r0
 8004392:	b360      	cbz	r0, 80043ee <__ssputs_r+0xa2>
 8004394:	6921      	ldr	r1, [r4, #16]
 8004396:	464a      	mov	r2, r9
 8004398:	f000 fa06 	bl	80047a8 <memcpy>
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	6126      	str	r6, [r4, #16]
 80043aa:	6165      	str	r5, [r4, #20]
 80043ac:	444e      	add	r6, r9
 80043ae:	eba5 0509 	sub.w	r5, r5, r9
 80043b2:	6026      	str	r6, [r4, #0]
 80043b4:	60a5      	str	r5, [r4, #8]
 80043b6:	463e      	mov	r6, r7
 80043b8:	42be      	cmp	r6, r7
 80043ba:	d900      	bls.n	80043be <__ssputs_r+0x72>
 80043bc:	463e      	mov	r6, r7
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	4632      	mov	r2, r6
 80043c2:	4641      	mov	r1, r8
 80043c4:	f000 f9c6 	bl	8004754 <memmove>
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	1b9b      	subs	r3, r3, r6
 80043cc:	60a3      	str	r3, [r4, #8]
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	4433      	add	r3, r6
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	2000      	movs	r0, #0
 80043d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043da:	462a      	mov	r2, r5
 80043dc:	f000 fa36 	bl	800484c <_realloc_r>
 80043e0:	4606      	mov	r6, r0
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d1e0      	bne.n	80043a8 <__ssputs_r+0x5c>
 80043e6:	6921      	ldr	r1, [r4, #16]
 80043e8:	4650      	mov	r0, sl
 80043ea:	f7ff fb2d 	bl	8003a48 <_free_r>
 80043ee:	230c      	movs	r3, #12
 80043f0:	f8ca 3000 	str.w	r3, [sl]
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043fa:	81a3      	strh	r3, [r4, #12]
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	e7e9      	b.n	80043d6 <__ssputs_r+0x8a>
	...

08004404 <_svfiprintf_r>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	4698      	mov	r8, r3
 800440a:	898b      	ldrh	r3, [r1, #12]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	b09d      	sub	sp, #116	@ 0x74
 8004410:	4607      	mov	r7, r0
 8004412:	460d      	mov	r5, r1
 8004414:	4614      	mov	r4, r2
 8004416:	d510      	bpl.n	800443a <_svfiprintf_r+0x36>
 8004418:	690b      	ldr	r3, [r1, #16]
 800441a:	b973      	cbnz	r3, 800443a <_svfiprintf_r+0x36>
 800441c:	2140      	movs	r1, #64	@ 0x40
 800441e:	f7ff fb87 	bl	8003b30 <_malloc_r>
 8004422:	6028      	str	r0, [r5, #0]
 8004424:	6128      	str	r0, [r5, #16]
 8004426:	b930      	cbnz	r0, 8004436 <_svfiprintf_r+0x32>
 8004428:	230c      	movs	r3, #12
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	b01d      	add	sp, #116	@ 0x74
 8004432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004436:	2340      	movs	r3, #64	@ 0x40
 8004438:	616b      	str	r3, [r5, #20]
 800443a:	2300      	movs	r3, #0
 800443c:	9309      	str	r3, [sp, #36]	@ 0x24
 800443e:	2320      	movs	r3, #32
 8004440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004444:	f8cd 800c 	str.w	r8, [sp, #12]
 8004448:	2330      	movs	r3, #48	@ 0x30
 800444a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045e8 <_svfiprintf_r+0x1e4>
 800444e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004452:	f04f 0901 	mov.w	r9, #1
 8004456:	4623      	mov	r3, r4
 8004458:	469a      	mov	sl, r3
 800445a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445e:	b10a      	cbz	r2, 8004464 <_svfiprintf_r+0x60>
 8004460:	2a25      	cmp	r2, #37	@ 0x25
 8004462:	d1f9      	bne.n	8004458 <_svfiprintf_r+0x54>
 8004464:	ebba 0b04 	subs.w	fp, sl, r4
 8004468:	d00b      	beq.n	8004482 <_svfiprintf_r+0x7e>
 800446a:	465b      	mov	r3, fp
 800446c:	4622      	mov	r2, r4
 800446e:	4629      	mov	r1, r5
 8004470:	4638      	mov	r0, r7
 8004472:	f7ff ff6b 	bl	800434c <__ssputs_r>
 8004476:	3001      	adds	r0, #1
 8004478:	f000 80a7 	beq.w	80045ca <_svfiprintf_r+0x1c6>
 800447c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800447e:	445a      	add	r2, fp
 8004480:	9209      	str	r2, [sp, #36]	@ 0x24
 8004482:	f89a 3000 	ldrb.w	r3, [sl]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 809f 	beq.w	80045ca <_svfiprintf_r+0x1c6>
 800448c:	2300      	movs	r3, #0
 800448e:	f04f 32ff 	mov.w	r2, #4294967295
 8004492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004496:	f10a 0a01 	add.w	sl, sl, #1
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	9307      	str	r3, [sp, #28]
 800449e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80044a4:	4654      	mov	r4, sl
 80044a6:	2205      	movs	r2, #5
 80044a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ac:	484e      	ldr	r0, [pc, #312]	@ (80045e8 <_svfiprintf_r+0x1e4>)
 80044ae:	f7fb fe97 	bl	80001e0 <memchr>
 80044b2:	9a04      	ldr	r2, [sp, #16]
 80044b4:	b9d8      	cbnz	r0, 80044ee <_svfiprintf_r+0xea>
 80044b6:	06d0      	lsls	r0, r2, #27
 80044b8:	bf44      	itt	mi
 80044ba:	2320      	movmi	r3, #32
 80044bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c0:	0711      	lsls	r1, r2, #28
 80044c2:	bf44      	itt	mi
 80044c4:	232b      	movmi	r3, #43	@ 0x2b
 80044c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ca:	f89a 3000 	ldrb.w	r3, [sl]
 80044ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80044d0:	d015      	beq.n	80044fe <_svfiprintf_r+0xfa>
 80044d2:	9a07      	ldr	r2, [sp, #28]
 80044d4:	4654      	mov	r4, sl
 80044d6:	2000      	movs	r0, #0
 80044d8:	f04f 0c0a 	mov.w	ip, #10
 80044dc:	4621      	mov	r1, r4
 80044de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e2:	3b30      	subs	r3, #48	@ 0x30
 80044e4:	2b09      	cmp	r3, #9
 80044e6:	d94b      	bls.n	8004580 <_svfiprintf_r+0x17c>
 80044e8:	b1b0      	cbz	r0, 8004518 <_svfiprintf_r+0x114>
 80044ea:	9207      	str	r2, [sp, #28]
 80044ec:	e014      	b.n	8004518 <_svfiprintf_r+0x114>
 80044ee:	eba0 0308 	sub.w	r3, r0, r8
 80044f2:	fa09 f303 	lsl.w	r3, r9, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	9304      	str	r3, [sp, #16]
 80044fa:	46a2      	mov	sl, r4
 80044fc:	e7d2      	b.n	80044a4 <_svfiprintf_r+0xa0>
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	1d19      	adds	r1, r3, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	9103      	str	r1, [sp, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfbb      	ittet	lt
 800450a:	425b      	neglt	r3, r3
 800450c:	f042 0202 	orrlt.w	r2, r2, #2
 8004510:	9307      	strge	r3, [sp, #28]
 8004512:	9307      	strlt	r3, [sp, #28]
 8004514:	bfb8      	it	lt
 8004516:	9204      	strlt	r2, [sp, #16]
 8004518:	7823      	ldrb	r3, [r4, #0]
 800451a:	2b2e      	cmp	r3, #46	@ 0x2e
 800451c:	d10a      	bne.n	8004534 <_svfiprintf_r+0x130>
 800451e:	7863      	ldrb	r3, [r4, #1]
 8004520:	2b2a      	cmp	r3, #42	@ 0x2a
 8004522:	d132      	bne.n	800458a <_svfiprintf_r+0x186>
 8004524:	9b03      	ldr	r3, [sp, #12]
 8004526:	1d1a      	adds	r2, r3, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	9203      	str	r2, [sp, #12]
 800452c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004530:	3402      	adds	r4, #2
 8004532:	9305      	str	r3, [sp, #20]
 8004534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045f8 <_svfiprintf_r+0x1f4>
 8004538:	7821      	ldrb	r1, [r4, #0]
 800453a:	2203      	movs	r2, #3
 800453c:	4650      	mov	r0, sl
 800453e:	f7fb fe4f 	bl	80001e0 <memchr>
 8004542:	b138      	cbz	r0, 8004554 <_svfiprintf_r+0x150>
 8004544:	9b04      	ldr	r3, [sp, #16]
 8004546:	eba0 000a 	sub.w	r0, r0, sl
 800454a:	2240      	movs	r2, #64	@ 0x40
 800454c:	4082      	lsls	r2, r0
 800454e:	4313      	orrs	r3, r2
 8004550:	3401      	adds	r4, #1
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004558:	4824      	ldr	r0, [pc, #144]	@ (80045ec <_svfiprintf_r+0x1e8>)
 800455a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800455e:	2206      	movs	r2, #6
 8004560:	f7fb fe3e 	bl	80001e0 <memchr>
 8004564:	2800      	cmp	r0, #0
 8004566:	d036      	beq.n	80045d6 <_svfiprintf_r+0x1d2>
 8004568:	4b21      	ldr	r3, [pc, #132]	@ (80045f0 <_svfiprintf_r+0x1ec>)
 800456a:	bb1b      	cbnz	r3, 80045b4 <_svfiprintf_r+0x1b0>
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	3307      	adds	r3, #7
 8004570:	f023 0307 	bic.w	r3, r3, #7
 8004574:	3308      	adds	r3, #8
 8004576:	9303      	str	r3, [sp, #12]
 8004578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800457a:	4433      	add	r3, r6
 800457c:	9309      	str	r3, [sp, #36]	@ 0x24
 800457e:	e76a      	b.n	8004456 <_svfiprintf_r+0x52>
 8004580:	fb0c 3202 	mla	r2, ip, r2, r3
 8004584:	460c      	mov	r4, r1
 8004586:	2001      	movs	r0, #1
 8004588:	e7a8      	b.n	80044dc <_svfiprintf_r+0xd8>
 800458a:	2300      	movs	r3, #0
 800458c:	3401      	adds	r4, #1
 800458e:	9305      	str	r3, [sp, #20]
 8004590:	4619      	mov	r1, r3
 8004592:	f04f 0c0a 	mov.w	ip, #10
 8004596:	4620      	mov	r0, r4
 8004598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800459c:	3a30      	subs	r2, #48	@ 0x30
 800459e:	2a09      	cmp	r2, #9
 80045a0:	d903      	bls.n	80045aa <_svfiprintf_r+0x1a6>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0c6      	beq.n	8004534 <_svfiprintf_r+0x130>
 80045a6:	9105      	str	r1, [sp, #20]
 80045a8:	e7c4      	b.n	8004534 <_svfiprintf_r+0x130>
 80045aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ae:	4604      	mov	r4, r0
 80045b0:	2301      	movs	r3, #1
 80045b2:	e7f0      	b.n	8004596 <_svfiprintf_r+0x192>
 80045b4:	ab03      	add	r3, sp, #12
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	462a      	mov	r2, r5
 80045ba:	4b0e      	ldr	r3, [pc, #56]	@ (80045f4 <_svfiprintf_r+0x1f0>)
 80045bc:	a904      	add	r1, sp, #16
 80045be:	4638      	mov	r0, r7
 80045c0:	f7fd fe84 	bl	80022cc <_printf_float>
 80045c4:	1c42      	adds	r2, r0, #1
 80045c6:	4606      	mov	r6, r0
 80045c8:	d1d6      	bne.n	8004578 <_svfiprintf_r+0x174>
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	065b      	lsls	r3, r3, #25
 80045ce:	f53f af2d 	bmi.w	800442c <_svfiprintf_r+0x28>
 80045d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045d4:	e72c      	b.n	8004430 <_svfiprintf_r+0x2c>
 80045d6:	ab03      	add	r3, sp, #12
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	462a      	mov	r2, r5
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <_svfiprintf_r+0x1f0>)
 80045de:	a904      	add	r1, sp, #16
 80045e0:	4638      	mov	r0, r7
 80045e2:	f7fe f90b 	bl	80027fc <_printf_i>
 80045e6:	e7ed      	b.n	80045c4 <_svfiprintf_r+0x1c0>
 80045e8:	080051a8 	.word	0x080051a8
 80045ec:	080051b2 	.word	0x080051b2
 80045f0:	080022cd 	.word	0x080022cd
 80045f4:	0800434d 	.word	0x0800434d
 80045f8:	080051ae 	.word	0x080051ae

080045fc <__sflush_r>:
 80045fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004604:	0716      	lsls	r6, r2, #28
 8004606:	4605      	mov	r5, r0
 8004608:	460c      	mov	r4, r1
 800460a:	d454      	bmi.n	80046b6 <__sflush_r+0xba>
 800460c:	684b      	ldr	r3, [r1, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	dc02      	bgt.n	8004618 <__sflush_r+0x1c>
 8004612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	dd48      	ble.n	80046aa <__sflush_r+0xae>
 8004618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800461a:	2e00      	cmp	r6, #0
 800461c:	d045      	beq.n	80046aa <__sflush_r+0xae>
 800461e:	2300      	movs	r3, #0
 8004620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004624:	682f      	ldr	r7, [r5, #0]
 8004626:	6a21      	ldr	r1, [r4, #32]
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	d030      	beq.n	800468e <__sflush_r+0x92>
 800462c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	0759      	lsls	r1, r3, #29
 8004632:	d505      	bpl.n	8004640 <__sflush_r+0x44>
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800463a:	b10b      	cbz	r3, 8004640 <__sflush_r+0x44>
 800463c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	2300      	movs	r3, #0
 8004642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004644:	6a21      	ldr	r1, [r4, #32]
 8004646:	4628      	mov	r0, r5
 8004648:	47b0      	blx	r6
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	d106      	bne.n	800465e <__sflush_r+0x62>
 8004650:	6829      	ldr	r1, [r5, #0]
 8004652:	291d      	cmp	r1, #29
 8004654:	d82b      	bhi.n	80046ae <__sflush_r+0xb2>
 8004656:	4a2a      	ldr	r2, [pc, #168]	@ (8004700 <__sflush_r+0x104>)
 8004658:	410a      	asrs	r2, r1
 800465a:	07d6      	lsls	r6, r2, #31
 800465c:	d427      	bmi.n	80046ae <__sflush_r+0xb2>
 800465e:	2200      	movs	r2, #0
 8004660:	6062      	str	r2, [r4, #4]
 8004662:	04d9      	lsls	r1, r3, #19
 8004664:	6922      	ldr	r2, [r4, #16]
 8004666:	6022      	str	r2, [r4, #0]
 8004668:	d504      	bpl.n	8004674 <__sflush_r+0x78>
 800466a:	1c42      	adds	r2, r0, #1
 800466c:	d101      	bne.n	8004672 <__sflush_r+0x76>
 800466e:	682b      	ldr	r3, [r5, #0]
 8004670:	b903      	cbnz	r3, 8004674 <__sflush_r+0x78>
 8004672:	6560      	str	r0, [r4, #84]	@ 0x54
 8004674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004676:	602f      	str	r7, [r5, #0]
 8004678:	b1b9      	cbz	r1, 80046aa <__sflush_r+0xae>
 800467a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800467e:	4299      	cmp	r1, r3
 8004680:	d002      	beq.n	8004688 <__sflush_r+0x8c>
 8004682:	4628      	mov	r0, r5
 8004684:	f7ff f9e0 	bl	8003a48 <_free_r>
 8004688:	2300      	movs	r3, #0
 800468a:	6363      	str	r3, [r4, #52]	@ 0x34
 800468c:	e00d      	b.n	80046aa <__sflush_r+0xae>
 800468e:	2301      	movs	r3, #1
 8004690:	4628      	mov	r0, r5
 8004692:	47b0      	blx	r6
 8004694:	4602      	mov	r2, r0
 8004696:	1c50      	adds	r0, r2, #1
 8004698:	d1c9      	bne.n	800462e <__sflush_r+0x32>
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0c6      	beq.n	800462e <__sflush_r+0x32>
 80046a0:	2b1d      	cmp	r3, #29
 80046a2:	d001      	beq.n	80046a8 <__sflush_r+0xac>
 80046a4:	2b16      	cmp	r3, #22
 80046a6:	d11e      	bne.n	80046e6 <__sflush_r+0xea>
 80046a8:	602f      	str	r7, [r5, #0]
 80046aa:	2000      	movs	r0, #0
 80046ac:	e022      	b.n	80046f4 <__sflush_r+0xf8>
 80046ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b2:	b21b      	sxth	r3, r3
 80046b4:	e01b      	b.n	80046ee <__sflush_r+0xf2>
 80046b6:	690f      	ldr	r7, [r1, #16]
 80046b8:	2f00      	cmp	r7, #0
 80046ba:	d0f6      	beq.n	80046aa <__sflush_r+0xae>
 80046bc:	0793      	lsls	r3, r2, #30
 80046be:	680e      	ldr	r6, [r1, #0]
 80046c0:	bf08      	it	eq
 80046c2:	694b      	ldreq	r3, [r1, #20]
 80046c4:	600f      	str	r7, [r1, #0]
 80046c6:	bf18      	it	ne
 80046c8:	2300      	movne	r3, #0
 80046ca:	eba6 0807 	sub.w	r8, r6, r7
 80046ce:	608b      	str	r3, [r1, #8]
 80046d0:	f1b8 0f00 	cmp.w	r8, #0
 80046d4:	dde9      	ble.n	80046aa <__sflush_r+0xae>
 80046d6:	6a21      	ldr	r1, [r4, #32]
 80046d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80046da:	4643      	mov	r3, r8
 80046dc:	463a      	mov	r2, r7
 80046de:	4628      	mov	r0, r5
 80046e0:	47b0      	blx	r6
 80046e2:	2800      	cmp	r0, #0
 80046e4:	dc08      	bgt.n	80046f8 <__sflush_r+0xfc>
 80046e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f8:	4407      	add	r7, r0
 80046fa:	eba8 0800 	sub.w	r8, r8, r0
 80046fe:	e7e7      	b.n	80046d0 <__sflush_r+0xd4>
 8004700:	dfbffffe 	.word	0xdfbffffe

08004704 <_fflush_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	690b      	ldr	r3, [r1, #16]
 8004708:	4605      	mov	r5, r0
 800470a:	460c      	mov	r4, r1
 800470c:	b913      	cbnz	r3, 8004714 <_fflush_r+0x10>
 800470e:	2500      	movs	r5, #0
 8004710:	4628      	mov	r0, r5
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	b118      	cbz	r0, 800471e <_fflush_r+0x1a>
 8004716:	6a03      	ldr	r3, [r0, #32]
 8004718:	b90b      	cbnz	r3, 800471e <_fflush_r+0x1a>
 800471a:	f7fe fa1b 	bl	8002b54 <__sinit>
 800471e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f3      	beq.n	800470e <_fflush_r+0xa>
 8004726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004728:	07d0      	lsls	r0, r2, #31
 800472a:	d404      	bmi.n	8004736 <_fflush_r+0x32>
 800472c:	0599      	lsls	r1, r3, #22
 800472e:	d402      	bmi.n	8004736 <_fflush_r+0x32>
 8004730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004732:	f7fe fb3a 	bl	8002daa <__retarget_lock_acquire_recursive>
 8004736:	4628      	mov	r0, r5
 8004738:	4621      	mov	r1, r4
 800473a:	f7ff ff5f 	bl	80045fc <__sflush_r>
 800473e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004740:	07da      	lsls	r2, r3, #31
 8004742:	4605      	mov	r5, r0
 8004744:	d4e4      	bmi.n	8004710 <_fflush_r+0xc>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	059b      	lsls	r3, r3, #22
 800474a:	d4e1      	bmi.n	8004710 <_fflush_r+0xc>
 800474c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800474e:	f7fe fb2d 	bl	8002dac <__retarget_lock_release_recursive>
 8004752:	e7dd      	b.n	8004710 <_fflush_r+0xc>

08004754 <memmove>:
 8004754:	4288      	cmp	r0, r1
 8004756:	b510      	push	{r4, lr}
 8004758:	eb01 0402 	add.w	r4, r1, r2
 800475c:	d902      	bls.n	8004764 <memmove+0x10>
 800475e:	4284      	cmp	r4, r0
 8004760:	4623      	mov	r3, r4
 8004762:	d807      	bhi.n	8004774 <memmove+0x20>
 8004764:	1e43      	subs	r3, r0, #1
 8004766:	42a1      	cmp	r1, r4
 8004768:	d008      	beq.n	800477c <memmove+0x28>
 800476a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800476e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004772:	e7f8      	b.n	8004766 <memmove+0x12>
 8004774:	4402      	add	r2, r0
 8004776:	4601      	mov	r1, r0
 8004778:	428a      	cmp	r2, r1
 800477a:	d100      	bne.n	800477e <memmove+0x2a>
 800477c:	bd10      	pop	{r4, pc}
 800477e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004786:	e7f7      	b.n	8004778 <memmove+0x24>

08004788 <_sbrk_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4d06      	ldr	r5, [pc, #24]	@ (80047a4 <_sbrk_r+0x1c>)
 800478c:	2300      	movs	r3, #0
 800478e:	4604      	mov	r4, r0
 8004790:	4608      	mov	r0, r1
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	f7fd fb94 	bl	8001ec0 <_sbrk>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_sbrk_r+0x1a>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_sbrk_r+0x1a>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	2000038c 	.word	0x2000038c

080047a8 <memcpy>:
 80047a8:	440a      	add	r2, r1
 80047aa:	4291      	cmp	r1, r2
 80047ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80047b0:	d100      	bne.n	80047b4 <memcpy+0xc>
 80047b2:	4770      	bx	lr
 80047b4:	b510      	push	{r4, lr}
 80047b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047be:	4291      	cmp	r1, r2
 80047c0:	d1f9      	bne.n	80047b6 <memcpy+0xe>
 80047c2:	bd10      	pop	{r4, pc}

080047c4 <__assert_func>:
 80047c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047c6:	4614      	mov	r4, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b09      	ldr	r3, [pc, #36]	@ (80047f0 <__assert_func+0x2c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4605      	mov	r5, r0
 80047d0:	68d8      	ldr	r0, [r3, #12]
 80047d2:	b954      	cbnz	r4, 80047ea <__assert_func+0x26>
 80047d4:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <__assert_func+0x30>)
 80047d6:	461c      	mov	r4, r3
 80047d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047dc:	9100      	str	r1, [sp, #0]
 80047de:	462b      	mov	r3, r5
 80047e0:	4905      	ldr	r1, [pc, #20]	@ (80047f8 <__assert_func+0x34>)
 80047e2:	f000 f86f 	bl	80048c4 <fiprintf>
 80047e6:	f000 f87f 	bl	80048e8 <abort>
 80047ea:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <__assert_func+0x38>)
 80047ec:	e7f4      	b.n	80047d8 <__assert_func+0x14>
 80047ee:	bf00      	nop
 80047f0:	20000060 	.word	0x20000060
 80047f4:	080051fe 	.word	0x080051fe
 80047f8:	080051d0 	.word	0x080051d0
 80047fc:	080051c3 	.word	0x080051c3

08004800 <_calloc_r>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	fba1 5402 	umull	r5, r4, r1, r2
 8004806:	b93c      	cbnz	r4, 8004818 <_calloc_r+0x18>
 8004808:	4629      	mov	r1, r5
 800480a:	f7ff f991 	bl	8003b30 <_malloc_r>
 800480e:	4606      	mov	r6, r0
 8004810:	b928      	cbnz	r0, 800481e <_calloc_r+0x1e>
 8004812:	2600      	movs	r6, #0
 8004814:	4630      	mov	r0, r6
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	220c      	movs	r2, #12
 800481a:	6002      	str	r2, [r0, #0]
 800481c:	e7f9      	b.n	8004812 <_calloc_r+0x12>
 800481e:	462a      	mov	r2, r5
 8004820:	4621      	mov	r1, r4
 8004822:	f7fe fa44 	bl	8002cae <memset>
 8004826:	e7f5      	b.n	8004814 <_calloc_r+0x14>

08004828 <__ascii_mbtowc>:
 8004828:	b082      	sub	sp, #8
 800482a:	b901      	cbnz	r1, 800482e <__ascii_mbtowc+0x6>
 800482c:	a901      	add	r1, sp, #4
 800482e:	b142      	cbz	r2, 8004842 <__ascii_mbtowc+0x1a>
 8004830:	b14b      	cbz	r3, 8004846 <__ascii_mbtowc+0x1e>
 8004832:	7813      	ldrb	r3, [r2, #0]
 8004834:	600b      	str	r3, [r1, #0]
 8004836:	7812      	ldrb	r2, [r2, #0]
 8004838:	1e10      	subs	r0, r2, #0
 800483a:	bf18      	it	ne
 800483c:	2001      	movne	r0, #1
 800483e:	b002      	add	sp, #8
 8004840:	4770      	bx	lr
 8004842:	4610      	mov	r0, r2
 8004844:	e7fb      	b.n	800483e <__ascii_mbtowc+0x16>
 8004846:	f06f 0001 	mvn.w	r0, #1
 800484a:	e7f8      	b.n	800483e <__ascii_mbtowc+0x16>

0800484c <_realloc_r>:
 800484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004850:	4680      	mov	r8, r0
 8004852:	4615      	mov	r5, r2
 8004854:	460c      	mov	r4, r1
 8004856:	b921      	cbnz	r1, 8004862 <_realloc_r+0x16>
 8004858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	4611      	mov	r1, r2
 800485e:	f7ff b967 	b.w	8003b30 <_malloc_r>
 8004862:	b92a      	cbnz	r2, 8004870 <_realloc_r+0x24>
 8004864:	f7ff f8f0 	bl	8003a48 <_free_r>
 8004868:	2400      	movs	r4, #0
 800486a:	4620      	mov	r0, r4
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	f000 f841 	bl	80048f6 <_malloc_usable_size_r>
 8004874:	4285      	cmp	r5, r0
 8004876:	4606      	mov	r6, r0
 8004878:	d802      	bhi.n	8004880 <_realloc_r+0x34>
 800487a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800487e:	d8f4      	bhi.n	800486a <_realloc_r+0x1e>
 8004880:	4629      	mov	r1, r5
 8004882:	4640      	mov	r0, r8
 8004884:	f7ff f954 	bl	8003b30 <_malloc_r>
 8004888:	4607      	mov	r7, r0
 800488a:	2800      	cmp	r0, #0
 800488c:	d0ec      	beq.n	8004868 <_realloc_r+0x1c>
 800488e:	42b5      	cmp	r5, r6
 8004890:	462a      	mov	r2, r5
 8004892:	4621      	mov	r1, r4
 8004894:	bf28      	it	cs
 8004896:	4632      	movcs	r2, r6
 8004898:	f7ff ff86 	bl	80047a8 <memcpy>
 800489c:	4621      	mov	r1, r4
 800489e:	4640      	mov	r0, r8
 80048a0:	f7ff f8d2 	bl	8003a48 <_free_r>
 80048a4:	463c      	mov	r4, r7
 80048a6:	e7e0      	b.n	800486a <_realloc_r+0x1e>

080048a8 <__ascii_wctomb>:
 80048a8:	4603      	mov	r3, r0
 80048aa:	4608      	mov	r0, r1
 80048ac:	b141      	cbz	r1, 80048c0 <__ascii_wctomb+0x18>
 80048ae:	2aff      	cmp	r2, #255	@ 0xff
 80048b0:	d904      	bls.n	80048bc <__ascii_wctomb+0x14>
 80048b2:	228a      	movs	r2, #138	@ 0x8a
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	4770      	bx	lr
 80048bc:	700a      	strb	r2, [r1, #0]
 80048be:	2001      	movs	r0, #1
 80048c0:	4770      	bx	lr
	...

080048c4 <fiprintf>:
 80048c4:	b40e      	push	{r1, r2, r3}
 80048c6:	b503      	push	{r0, r1, lr}
 80048c8:	4601      	mov	r1, r0
 80048ca:	ab03      	add	r3, sp, #12
 80048cc:	4805      	ldr	r0, [pc, #20]	@ (80048e4 <fiprintf+0x20>)
 80048ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d2:	6800      	ldr	r0, [r0, #0]
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	f000 f83f 	bl	8004958 <_vfiprintf_r>
 80048da:	b002      	add	sp, #8
 80048dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e0:	b003      	add	sp, #12
 80048e2:	4770      	bx	lr
 80048e4:	20000060 	.word	0x20000060

080048e8 <abort>:
 80048e8:	b508      	push	{r3, lr}
 80048ea:	2006      	movs	r0, #6
 80048ec:	f000 fa08 	bl	8004d00 <raise>
 80048f0:	2001      	movs	r0, #1
 80048f2:	f7fd fa6c 	bl	8001dce <_exit>

080048f6 <_malloc_usable_size_r>:
 80048f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048fa:	1f18      	subs	r0, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bfbc      	itt	lt
 8004900:	580b      	ldrlt	r3, [r1, r0]
 8004902:	18c0      	addlt	r0, r0, r3
 8004904:	4770      	bx	lr

08004906 <__sfputc_r>:
 8004906:	6893      	ldr	r3, [r2, #8]
 8004908:	3b01      	subs	r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	b410      	push	{r4}
 800490e:	6093      	str	r3, [r2, #8]
 8004910:	da08      	bge.n	8004924 <__sfputc_r+0x1e>
 8004912:	6994      	ldr	r4, [r2, #24]
 8004914:	42a3      	cmp	r3, r4
 8004916:	db01      	blt.n	800491c <__sfputc_r+0x16>
 8004918:	290a      	cmp	r1, #10
 800491a:	d103      	bne.n	8004924 <__sfputc_r+0x1e>
 800491c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004920:	f000 b932 	b.w	8004b88 <__swbuf_r>
 8004924:	6813      	ldr	r3, [r2, #0]
 8004926:	1c58      	adds	r0, r3, #1
 8004928:	6010      	str	r0, [r2, #0]
 800492a:	7019      	strb	r1, [r3, #0]
 800492c:	4608      	mov	r0, r1
 800492e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004932:	4770      	bx	lr

08004934 <__sfputs_r>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	4606      	mov	r6, r0
 8004938:	460f      	mov	r7, r1
 800493a:	4614      	mov	r4, r2
 800493c:	18d5      	adds	r5, r2, r3
 800493e:	42ac      	cmp	r4, r5
 8004940:	d101      	bne.n	8004946 <__sfputs_r+0x12>
 8004942:	2000      	movs	r0, #0
 8004944:	e007      	b.n	8004956 <__sfputs_r+0x22>
 8004946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494a:	463a      	mov	r2, r7
 800494c:	4630      	mov	r0, r6
 800494e:	f7ff ffda 	bl	8004906 <__sfputc_r>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	d1f3      	bne.n	800493e <__sfputs_r+0xa>
 8004956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004958 <_vfiprintf_r>:
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	460d      	mov	r5, r1
 800495e:	b09d      	sub	sp, #116	@ 0x74
 8004960:	4614      	mov	r4, r2
 8004962:	4698      	mov	r8, r3
 8004964:	4606      	mov	r6, r0
 8004966:	b118      	cbz	r0, 8004970 <_vfiprintf_r+0x18>
 8004968:	6a03      	ldr	r3, [r0, #32]
 800496a:	b90b      	cbnz	r3, 8004970 <_vfiprintf_r+0x18>
 800496c:	f7fe f8f2 	bl	8002b54 <__sinit>
 8004970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004972:	07d9      	lsls	r1, r3, #31
 8004974:	d405      	bmi.n	8004982 <_vfiprintf_r+0x2a>
 8004976:	89ab      	ldrh	r3, [r5, #12]
 8004978:	059a      	lsls	r2, r3, #22
 800497a:	d402      	bmi.n	8004982 <_vfiprintf_r+0x2a>
 800497c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800497e:	f7fe fa14 	bl	8002daa <__retarget_lock_acquire_recursive>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	071b      	lsls	r3, r3, #28
 8004986:	d501      	bpl.n	800498c <_vfiprintf_r+0x34>
 8004988:	692b      	ldr	r3, [r5, #16]
 800498a:	b99b      	cbnz	r3, 80049b4 <_vfiprintf_r+0x5c>
 800498c:	4629      	mov	r1, r5
 800498e:	4630      	mov	r0, r6
 8004990:	f000 f938 	bl	8004c04 <__swsetup_r>
 8004994:	b170      	cbz	r0, 80049b4 <_vfiprintf_r+0x5c>
 8004996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004998:	07dc      	lsls	r4, r3, #31
 800499a:	d504      	bpl.n	80049a6 <_vfiprintf_r+0x4e>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b01d      	add	sp, #116	@ 0x74
 80049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a6:	89ab      	ldrh	r3, [r5, #12]
 80049a8:	0598      	lsls	r0, r3, #22
 80049aa:	d4f7      	bmi.n	800499c <_vfiprintf_r+0x44>
 80049ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049ae:	f7fe f9fd 	bl	8002dac <__retarget_lock_release_recursive>
 80049b2:	e7f3      	b.n	800499c <_vfiprintf_r+0x44>
 80049b4:	2300      	movs	r3, #0
 80049b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80049b8:	2320      	movs	r3, #32
 80049ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049be:	f8cd 800c 	str.w	r8, [sp, #12]
 80049c2:	2330      	movs	r3, #48	@ 0x30
 80049c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b74 <_vfiprintf_r+0x21c>
 80049c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049cc:	f04f 0901 	mov.w	r9, #1
 80049d0:	4623      	mov	r3, r4
 80049d2:	469a      	mov	sl, r3
 80049d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049d8:	b10a      	cbz	r2, 80049de <_vfiprintf_r+0x86>
 80049da:	2a25      	cmp	r2, #37	@ 0x25
 80049dc:	d1f9      	bne.n	80049d2 <_vfiprintf_r+0x7a>
 80049de:	ebba 0b04 	subs.w	fp, sl, r4
 80049e2:	d00b      	beq.n	80049fc <_vfiprintf_r+0xa4>
 80049e4:	465b      	mov	r3, fp
 80049e6:	4622      	mov	r2, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	4630      	mov	r0, r6
 80049ec:	f7ff ffa2 	bl	8004934 <__sfputs_r>
 80049f0:	3001      	adds	r0, #1
 80049f2:	f000 80a7 	beq.w	8004b44 <_vfiprintf_r+0x1ec>
 80049f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f8:	445a      	add	r2, fp
 80049fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80049fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 809f 	beq.w	8004b44 <_vfiprintf_r+0x1ec>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a10:	f10a 0a01 	add.w	sl, sl, #1
 8004a14:	9304      	str	r3, [sp, #16]
 8004a16:	9307      	str	r3, [sp, #28]
 8004a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a1e:	4654      	mov	r4, sl
 8004a20:	2205      	movs	r2, #5
 8004a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a26:	4853      	ldr	r0, [pc, #332]	@ (8004b74 <_vfiprintf_r+0x21c>)
 8004a28:	f7fb fbda 	bl	80001e0 <memchr>
 8004a2c:	9a04      	ldr	r2, [sp, #16]
 8004a2e:	b9d8      	cbnz	r0, 8004a68 <_vfiprintf_r+0x110>
 8004a30:	06d1      	lsls	r1, r2, #27
 8004a32:	bf44      	itt	mi
 8004a34:	2320      	movmi	r3, #32
 8004a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a3a:	0713      	lsls	r3, r2, #28
 8004a3c:	bf44      	itt	mi
 8004a3e:	232b      	movmi	r3, #43	@ 0x2b
 8004a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a44:	f89a 3000 	ldrb.w	r3, [sl]
 8004a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a4a:	d015      	beq.n	8004a78 <_vfiprintf_r+0x120>
 8004a4c:	9a07      	ldr	r2, [sp, #28]
 8004a4e:	4654      	mov	r4, sl
 8004a50:	2000      	movs	r0, #0
 8004a52:	f04f 0c0a 	mov.w	ip, #10
 8004a56:	4621      	mov	r1, r4
 8004a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5c:	3b30      	subs	r3, #48	@ 0x30
 8004a5e:	2b09      	cmp	r3, #9
 8004a60:	d94b      	bls.n	8004afa <_vfiprintf_r+0x1a2>
 8004a62:	b1b0      	cbz	r0, 8004a92 <_vfiprintf_r+0x13a>
 8004a64:	9207      	str	r2, [sp, #28]
 8004a66:	e014      	b.n	8004a92 <_vfiprintf_r+0x13a>
 8004a68:	eba0 0308 	sub.w	r3, r0, r8
 8004a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a70:	4313      	orrs	r3, r2
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	46a2      	mov	sl, r4
 8004a76:	e7d2      	b.n	8004a1e <_vfiprintf_r+0xc6>
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	1d19      	adds	r1, r3, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	9103      	str	r1, [sp, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bfbb      	ittet	lt
 8004a84:	425b      	neglt	r3, r3
 8004a86:	f042 0202 	orrlt.w	r2, r2, #2
 8004a8a:	9307      	strge	r3, [sp, #28]
 8004a8c:	9307      	strlt	r3, [sp, #28]
 8004a8e:	bfb8      	it	lt
 8004a90:	9204      	strlt	r2, [sp, #16]
 8004a92:	7823      	ldrb	r3, [r4, #0]
 8004a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a96:	d10a      	bne.n	8004aae <_vfiprintf_r+0x156>
 8004a98:	7863      	ldrb	r3, [r4, #1]
 8004a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a9c:	d132      	bne.n	8004b04 <_vfiprintf_r+0x1ac>
 8004a9e:	9b03      	ldr	r3, [sp, #12]
 8004aa0:	1d1a      	adds	r2, r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	9203      	str	r2, [sp, #12]
 8004aa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004aaa:	3402      	adds	r4, #2
 8004aac:	9305      	str	r3, [sp, #20]
 8004aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b84 <_vfiprintf_r+0x22c>
 8004ab2:	7821      	ldrb	r1, [r4, #0]
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	4650      	mov	r0, sl
 8004ab8:	f7fb fb92 	bl	80001e0 <memchr>
 8004abc:	b138      	cbz	r0, 8004ace <_vfiprintf_r+0x176>
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	eba0 000a 	sub.w	r0, r0, sl
 8004ac4:	2240      	movs	r2, #64	@ 0x40
 8004ac6:	4082      	lsls	r2, r0
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	3401      	adds	r4, #1
 8004acc:	9304      	str	r3, [sp, #16]
 8004ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad2:	4829      	ldr	r0, [pc, #164]	@ (8004b78 <_vfiprintf_r+0x220>)
 8004ad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ad8:	2206      	movs	r2, #6
 8004ada:	f7fb fb81 	bl	80001e0 <memchr>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d03f      	beq.n	8004b62 <_vfiprintf_r+0x20a>
 8004ae2:	4b26      	ldr	r3, [pc, #152]	@ (8004b7c <_vfiprintf_r+0x224>)
 8004ae4:	bb1b      	cbnz	r3, 8004b2e <_vfiprintf_r+0x1d6>
 8004ae6:	9b03      	ldr	r3, [sp, #12]
 8004ae8:	3307      	adds	r3, #7
 8004aea:	f023 0307 	bic.w	r3, r3, #7
 8004aee:	3308      	adds	r3, #8
 8004af0:	9303      	str	r3, [sp, #12]
 8004af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af4:	443b      	add	r3, r7
 8004af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004af8:	e76a      	b.n	80049d0 <_vfiprintf_r+0x78>
 8004afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afe:	460c      	mov	r4, r1
 8004b00:	2001      	movs	r0, #1
 8004b02:	e7a8      	b.n	8004a56 <_vfiprintf_r+0xfe>
 8004b04:	2300      	movs	r3, #0
 8004b06:	3401      	adds	r4, #1
 8004b08:	9305      	str	r3, [sp, #20]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f04f 0c0a 	mov.w	ip, #10
 8004b10:	4620      	mov	r0, r4
 8004b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b16:	3a30      	subs	r2, #48	@ 0x30
 8004b18:	2a09      	cmp	r2, #9
 8004b1a:	d903      	bls.n	8004b24 <_vfiprintf_r+0x1cc>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0c6      	beq.n	8004aae <_vfiprintf_r+0x156>
 8004b20:	9105      	str	r1, [sp, #20]
 8004b22:	e7c4      	b.n	8004aae <_vfiprintf_r+0x156>
 8004b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b28:	4604      	mov	r4, r0
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e7f0      	b.n	8004b10 <_vfiprintf_r+0x1b8>
 8004b2e:	ab03      	add	r3, sp, #12
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	462a      	mov	r2, r5
 8004b34:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <_vfiprintf_r+0x228>)
 8004b36:	a904      	add	r1, sp, #16
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f7fd fbc7 	bl	80022cc <_printf_float>
 8004b3e:	4607      	mov	r7, r0
 8004b40:	1c78      	adds	r0, r7, #1
 8004b42:	d1d6      	bne.n	8004af2 <_vfiprintf_r+0x19a>
 8004b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b46:	07d9      	lsls	r1, r3, #31
 8004b48:	d405      	bmi.n	8004b56 <_vfiprintf_r+0x1fe>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	059a      	lsls	r2, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_vfiprintf_r+0x1fe>
 8004b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b52:	f7fe f92b 	bl	8002dac <__retarget_lock_release_recursive>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	065b      	lsls	r3, r3, #25
 8004b5a:	f53f af1f 	bmi.w	800499c <_vfiprintf_r+0x44>
 8004b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b60:	e71e      	b.n	80049a0 <_vfiprintf_r+0x48>
 8004b62:	ab03      	add	r3, sp, #12
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	462a      	mov	r2, r5
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <_vfiprintf_r+0x228>)
 8004b6a:	a904      	add	r1, sp, #16
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f7fd fe45 	bl	80027fc <_printf_i>
 8004b72:	e7e4      	b.n	8004b3e <_vfiprintf_r+0x1e6>
 8004b74:	080051a8 	.word	0x080051a8
 8004b78:	080051b2 	.word	0x080051b2
 8004b7c:	080022cd 	.word	0x080022cd
 8004b80:	08004935 	.word	0x08004935
 8004b84:	080051ae 	.word	0x080051ae

08004b88 <__swbuf_r>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	460e      	mov	r6, r1
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	4605      	mov	r5, r0
 8004b90:	b118      	cbz	r0, 8004b9a <__swbuf_r+0x12>
 8004b92:	6a03      	ldr	r3, [r0, #32]
 8004b94:	b90b      	cbnz	r3, 8004b9a <__swbuf_r+0x12>
 8004b96:	f7fd ffdd 	bl	8002b54 <__sinit>
 8004b9a:	69a3      	ldr	r3, [r4, #24]
 8004b9c:	60a3      	str	r3, [r4, #8]
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	071a      	lsls	r2, r3, #28
 8004ba2:	d501      	bpl.n	8004ba8 <__swbuf_r+0x20>
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	b943      	cbnz	r3, 8004bba <__swbuf_r+0x32>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 f82a 	bl	8004c04 <__swsetup_r>
 8004bb0:	b118      	cbz	r0, 8004bba <__swbuf_r+0x32>
 8004bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6922      	ldr	r2, [r4, #16]
 8004bbe:	1a98      	subs	r0, r3, r2
 8004bc0:	6963      	ldr	r3, [r4, #20]
 8004bc2:	b2f6      	uxtb	r6, r6
 8004bc4:	4283      	cmp	r3, r0
 8004bc6:	4637      	mov	r7, r6
 8004bc8:	dc05      	bgt.n	8004bd6 <__swbuf_r+0x4e>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f7ff fd99 	bl	8004704 <_fflush_r>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d1ed      	bne.n	8004bb2 <__swbuf_r+0x2a>
 8004bd6:	68a3      	ldr	r3, [r4, #8]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	60a3      	str	r3, [r4, #8]
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	6022      	str	r2, [r4, #0]
 8004be2:	701e      	strb	r6, [r3, #0]
 8004be4:	6962      	ldr	r2, [r4, #20]
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d004      	beq.n	8004bf6 <__swbuf_r+0x6e>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	07db      	lsls	r3, r3, #31
 8004bf0:	d5e1      	bpl.n	8004bb6 <__swbuf_r+0x2e>
 8004bf2:	2e0a      	cmp	r6, #10
 8004bf4:	d1df      	bne.n	8004bb6 <__swbuf_r+0x2e>
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f7ff fd83 	bl	8004704 <_fflush_r>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d0d9      	beq.n	8004bb6 <__swbuf_r+0x2e>
 8004c02:	e7d6      	b.n	8004bb2 <__swbuf_r+0x2a>

08004c04 <__swsetup_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <__swsetup_r+0xa8>)
 8004c08:	4605      	mov	r5, r0
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	b118      	cbz	r0, 8004c18 <__swsetup_r+0x14>
 8004c10:	6a03      	ldr	r3, [r0, #32]
 8004c12:	b90b      	cbnz	r3, 8004c18 <__swsetup_r+0x14>
 8004c14:	f7fd ff9e 	bl	8002b54 <__sinit>
 8004c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c1c:	0719      	lsls	r1, r3, #28
 8004c1e:	d422      	bmi.n	8004c66 <__swsetup_r+0x62>
 8004c20:	06da      	lsls	r2, r3, #27
 8004c22:	d407      	bmi.n	8004c34 <__swsetup_r+0x30>
 8004c24:	2209      	movs	r2, #9
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c32:	e033      	b.n	8004c9c <__swsetup_r+0x98>
 8004c34:	0758      	lsls	r0, r3, #29
 8004c36:	d512      	bpl.n	8004c5e <__swsetup_r+0x5a>
 8004c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c3a:	b141      	cbz	r1, 8004c4e <__swsetup_r+0x4a>
 8004c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c40:	4299      	cmp	r1, r3
 8004c42:	d002      	beq.n	8004c4a <__swsetup_r+0x46>
 8004c44:	4628      	mov	r0, r5
 8004c46:	f7fe feff 	bl	8003a48 <_free_r>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c54:	81a3      	strh	r3, [r4, #12]
 8004c56:	2300      	movs	r3, #0
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f043 0308 	orr.w	r3, r3, #8
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	b94b      	cbnz	r3, 8004c7e <__swsetup_r+0x7a>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c74:	d003      	beq.n	8004c7e <__swsetup_r+0x7a>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 f883 	bl	8004d84 <__smakebuf_r>
 8004c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c82:	f013 0201 	ands.w	r2, r3, #1
 8004c86:	d00a      	beq.n	8004c9e <__swsetup_r+0x9a>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60a2      	str	r2, [r4, #8]
 8004c8c:	6962      	ldr	r2, [r4, #20]
 8004c8e:	4252      	negs	r2, r2
 8004c90:	61a2      	str	r2, [r4, #24]
 8004c92:	6922      	ldr	r2, [r4, #16]
 8004c94:	b942      	cbnz	r2, 8004ca8 <__swsetup_r+0xa4>
 8004c96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c9a:	d1c5      	bne.n	8004c28 <__swsetup_r+0x24>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
 8004c9e:	0799      	lsls	r1, r3, #30
 8004ca0:	bf58      	it	pl
 8004ca2:	6962      	ldrpl	r2, [r4, #20]
 8004ca4:	60a2      	str	r2, [r4, #8]
 8004ca6:	e7f4      	b.n	8004c92 <__swsetup_r+0x8e>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e7f7      	b.n	8004c9c <__swsetup_r+0x98>
 8004cac:	20000060 	.word	0x20000060

08004cb0 <_raise_r>:
 8004cb0:	291f      	cmp	r1, #31
 8004cb2:	b538      	push	{r3, r4, r5, lr}
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	d904      	bls.n	8004cc4 <_raise_r+0x14>
 8004cba:	2316      	movs	r3, #22
 8004cbc:	6003      	str	r3, [r0, #0]
 8004cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004cc6:	b112      	cbz	r2, 8004cce <_raise_r+0x1e>
 8004cc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ccc:	b94b      	cbnz	r3, 8004ce2 <_raise_r+0x32>
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 f830 	bl	8004d34 <_getpid_r>
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	4628      	mov	r0, r5
 8004cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cde:	f000 b817 	b.w	8004d10 <_kill_r>
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d00a      	beq.n	8004cfc <_raise_r+0x4c>
 8004ce6:	1c59      	adds	r1, r3, #1
 8004ce8:	d103      	bne.n	8004cf2 <_raise_r+0x42>
 8004cea:	2316      	movs	r3, #22
 8004cec:	6003      	str	r3, [r0, #0]
 8004cee:	2001      	movs	r0, #1
 8004cf0:	e7e7      	b.n	8004cc2 <_raise_r+0x12>
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	4798      	blx	r3
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e7e0      	b.n	8004cc2 <_raise_r+0x12>

08004d00 <raise>:
 8004d00:	4b02      	ldr	r3, [pc, #8]	@ (8004d0c <raise+0xc>)
 8004d02:	4601      	mov	r1, r0
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	f7ff bfd3 	b.w	8004cb0 <_raise_r>
 8004d0a:	bf00      	nop
 8004d0c:	20000060 	.word	0x20000060

08004d10 <_kill_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4d07      	ldr	r5, [pc, #28]	@ (8004d30 <_kill_r+0x20>)
 8004d14:	2300      	movs	r3, #0
 8004d16:	4604      	mov	r4, r0
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	f7fd f846 	bl	8001dae <_kill>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d102      	bne.n	8004d2c <_kill_r+0x1c>
 8004d26:	682b      	ldr	r3, [r5, #0]
 8004d28:	b103      	cbz	r3, 8004d2c <_kill_r+0x1c>
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	bd38      	pop	{r3, r4, r5, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000038c 	.word	0x2000038c

08004d34 <_getpid_r>:
 8004d34:	f7fd b833 	b.w	8001d9e <_getpid>

08004d38 <__swhatbuf_r>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d40:	2900      	cmp	r1, #0
 8004d42:	b096      	sub	sp, #88	@ 0x58
 8004d44:	4615      	mov	r5, r2
 8004d46:	461e      	mov	r6, r3
 8004d48:	da0d      	bge.n	8004d66 <__swhatbuf_r+0x2e>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	bf14      	ite	ne
 8004d56:	2340      	movne	r3, #64	@ 0x40
 8004d58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	6031      	str	r1, [r6, #0]
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	b016      	add	sp, #88	@ 0x58
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	466a      	mov	r2, sp
 8004d68:	f000 f848 	bl	8004dfc <_fstat_r>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	dbec      	blt.n	8004d4a <__swhatbuf_r+0x12>
 8004d70:	9901      	ldr	r1, [sp, #4]
 8004d72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d7a:	4259      	negs	r1, r3
 8004d7c:	4159      	adcs	r1, r3
 8004d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d82:	e7eb      	b.n	8004d5c <__swhatbuf_r+0x24>

08004d84 <__smakebuf_r>:
 8004d84:	898b      	ldrh	r3, [r1, #12]
 8004d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d88:	079d      	lsls	r5, r3, #30
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	d507      	bpl.n	8004da0 <__smakebuf_r+0x1c>
 8004d90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	6163      	str	r3, [r4, #20]
 8004d9c:	b003      	add	sp, #12
 8004d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da0:	ab01      	add	r3, sp, #4
 8004da2:	466a      	mov	r2, sp
 8004da4:	f7ff ffc8 	bl	8004d38 <__swhatbuf_r>
 8004da8:	9f00      	ldr	r7, [sp, #0]
 8004daa:	4605      	mov	r5, r0
 8004dac:	4639      	mov	r1, r7
 8004dae:	4630      	mov	r0, r6
 8004db0:	f7fe febe 	bl	8003b30 <_malloc_r>
 8004db4:	b948      	cbnz	r0, 8004dca <__smakebuf_r+0x46>
 8004db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dba:	059a      	lsls	r2, r3, #22
 8004dbc:	d4ee      	bmi.n	8004d9c <__smakebuf_r+0x18>
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	f043 0302 	orr.w	r3, r3, #2
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	e7e2      	b.n	8004d90 <__smakebuf_r+0xc>
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	6020      	str	r0, [r4, #0]
 8004dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	9b01      	ldr	r3, [sp, #4]
 8004dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dda:	b15b      	cbz	r3, 8004df4 <__smakebuf_r+0x70>
 8004ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f81d 	bl	8004e20 <_isatty_r>
 8004de6:	b128      	cbz	r0, 8004df4 <__smakebuf_r+0x70>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	431d      	orrs	r5, r3
 8004df8:	81a5      	strh	r5, [r4, #12]
 8004dfa:	e7cf      	b.n	8004d9c <__smakebuf_r+0x18>

08004dfc <_fstat_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d07      	ldr	r5, [pc, #28]	@ (8004e1c <_fstat_r+0x20>)
 8004e00:	2300      	movs	r3, #0
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	f7fd f830 	bl	8001e6e <_fstat>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	d102      	bne.n	8004e18 <_fstat_r+0x1c>
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	b103      	cbz	r3, 8004e18 <_fstat_r+0x1c>
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2000038c 	.word	0x2000038c

08004e20 <_isatty_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d06      	ldr	r5, [pc, #24]	@ (8004e3c <_isatty_r+0x1c>)
 8004e24:	2300      	movs	r3, #0
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	f7fd f82f 	bl	8001e8e <_isatty>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_isatty_r+0x1a>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_isatty_r+0x1a>
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	2000038c 	.word	0x2000038c

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
